
arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001cc  00800100  00002f16  00002faa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f16  00000000  00000000  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001f0  008002cc  008002cc  00003176  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00003176  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003188  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006c8  00000000  00000000  000031c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015269  00000000  00000000  00003890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000348d  00000000  00000000  00018af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004a80  00000000  00000000  0001bf86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f34  00000000  00000000  00020a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000041f8  00000000  00000000  0002193c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000676e  00000000  00000000  00025b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000860  00000000  00000000  0002c2a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
       4:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <__vector_1>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <__vector_11>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 e9 09 	jmp	0x13d2	; 0x13d2 <__vector_18>
      4c:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 08       	sbc	r0, r0
      6c:	00 02       	muls	r16, r16
      6e:	01 00       	.word	0x0001	; ????
      70:	00 03       	mulsu	r16, r16
      72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	4b 0a       	sbc	r4, r27

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	12 e0       	ldi	r17, 0x02	; 2
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e6 e1       	ldi	r30, 0x16	; 22
      d8:	ff e2       	ldi	r31, 0x2F	; 47
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	ac 3c       	cpi	r26, 0xCC	; 204
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	24 e0       	ldi	r18, 0x04	; 4
      e8:	ac ec       	ldi	r26, 0xCC	; 204
      ea:	b2 e0       	ldi	r27, 0x02	; 2
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	ac 3b       	cpi	r26, 0xBC	; 188
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c2 e6       	ldi	r28, 0x62	; 98
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
      fe:	21 97       	sbiw	r28, 0x01	; 1
     100:	fe 01       	movw	r30, r28
     102:	0e 94 a2 14 	call	0x2944	; 0x2944 <__tablejump2__>
     106:	c1 36       	cpi	r28, 0x61	; 97
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
     10c:	0e 94 3e 01 	call	0x27c	; 0x27c <main>
     110:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 e8 0f 	jmp	0x1fd0	; 0x1fd0 <__vector_default>

00000118 <osEE_hal_save_ctx_and_restore_ctx>:
  .type osEE_hal_save_ctx_and_restore_ctx, @function
osEE_hal_save_ctx_and_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     118:	2f 92       	push	r2
     11a:	3f 92       	push	r3
     11c:	4f 92       	push	r4
     11e:	5f 92       	push	r5
     120:	6f 92       	push	r6
     122:	7f 92       	push	r7
     124:	8f 92       	push	r8
     126:	9f 92       	push	r9
     128:	af 92       	push	r10
     12a:	bf 92       	push	r11
     12c:	cf 92       	push	r12
     12e:	df 92       	push	r13
     130:	ef 92       	push	r14
     132:	ff 92       	push	r15
     134:	0f 93       	push	r16
     136:	1f 93       	push	r17
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	e4 2f       	mov	r30, r20
     13e:	f5 2f       	mov	r31, r21
     140:	41 90       	ld	r4, Z+
     142:	50 80       	ld	r5, Z
     144:	4f 92       	push	r4
     146:	5f 92       	push	r5
     148:	e4 2f       	mov	r30, r20
     14a:	f5 2f       	mov	r31, r21
     14c:	4d b6       	in	r4, 0x3d	; 61
     14e:	5e b6       	in	r5, 0x3e	; 62
     150:	41 92       	st	Z+, r4
     152:	50 82       	st	Z, r5

/* Unconditional brach to restore context */
    jmp osEE_hal_restore_ctx
     154:	0c 94 ac 00 	jmp	0x158	; 0x158 <osEE_hal_restore_ctx>

00000158 <osEE_hal_restore_ctx>:
  .globl osEE_hal_restore_ctx
  .type osEE_hal_restore_ctx, @function
osEE_hal_restore_ctx:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb */
    osEE_hal_restore_vcontext_m r23 r22
     158:	e6 2f       	mov	r30, r22
     15a:	f7 2f       	mov	r31, r23
     15c:	41 90       	ld	r4, Z+
     15e:	50 80       	ld	r5, Z
     160:	4d be       	out	0x3d, r4	; 61
     162:	5e be       	out	0x3e, r5	; 62
     164:	5f 90       	pop	r5
     166:	4f 90       	pop	r4
     168:	e6 2f       	mov	r30, r22
     16a:	f7 2f       	mov	r31, r23
     16c:	41 92       	st	Z+, r4
     16e:	50 82       	st	Z, r5
     170:	df 91       	pop	r29
     172:	cf 91       	pop	r28
     174:	1f 91       	pop	r17
     176:	0f 91       	pop	r16
     178:	ff 90       	pop	r15
     17a:	ef 90       	pop	r14
     17c:	df 90       	pop	r13
     17e:	cf 90       	pop	r12
     180:	bf 90       	pop	r11
     182:	af 90       	pop	r10
     184:	9f 90       	pop	r9
     186:	8f 90       	pop	r8
     188:	7f 90       	pop	r7
     18a:	6f 90       	pop	r6
     18c:	5f 90       	pop	r5
     18e:	4f 90       	pop	r4
     190:	3f 90       	pop	r3
     192:	2f 90       	pop	r2
    jmp osEE_scheduler_task_wrapper_restore
     194:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <osEE_scheduler_task_wrapper_restore>

00000198 <osEE_hal_ready2stacked>:
  .type   osEE_hal_ready2stacked, @function
osEE_hal_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 local       p_to_scb->p_tos */
    mov r30, r22
     198:	e6 2f       	mov	r30, r22
    mov r31, r23
     19a:	f7 2f       	mov	r31, r23
    ld  r20, z+
     19c:	41 91       	ld	r20, Z+
    ld  r21, z
     19e:	50 81       	ld	r21, Z
/* sp = 21:20 */
    out 0x3D, r20
     1a0:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21
     1a2:	5e bf       	out	0x3e, r21	; 62

    jmp osEE_scheduler_task_wrapper_run
     1a4:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <osEE_scheduler_task_wrapper_run>

000001a8 <osEE_hal_save_ctx_and_ready2stacked>:
  .type osEE_hal_save_ctx_and_ready2stacked, @function
osEE_hal_save_ctx_and_ready2stacked:
  /*  r25:r24 parameter:  OsEE_TDB * p_to_tdb
      r23:r22 parameter:  OsEE_SCB * p_to_scb
      r21:r20 parameter:  OsEE_SCB * p_from_scb */
    osEE_hal_save_vcontext_m r21 r20
     1a8:	2f 92       	push	r2
     1aa:	3f 92       	push	r3
     1ac:	4f 92       	push	r4
     1ae:	5f 92       	push	r5
     1b0:	6f 92       	push	r6
     1b2:	7f 92       	push	r7
     1b4:	8f 92       	push	r8
     1b6:	9f 92       	push	r9
     1b8:	af 92       	push	r10
     1ba:	bf 92       	push	r11
     1bc:	cf 92       	push	r12
     1be:	df 92       	push	r13
     1c0:	ef 92       	push	r14
     1c2:	ff 92       	push	r15
     1c4:	0f 93       	push	r16
     1c6:	1f 93       	push	r17
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	e4 2f       	mov	r30, r20
     1ce:	f5 2f       	mov	r31, r21
     1d0:	41 90       	ld	r4, Z+
     1d2:	50 80       	ld	r5, Z
     1d4:	4f 92       	push	r4
     1d6:	5f 92       	push	r5
     1d8:	e4 2f       	mov	r30, r20
     1da:	f5 2f       	mov	r31, r21
     1dc:	4d b6       	in	r4, 0x3d	; 61
     1de:	5e b6       	in	r5, 0x3e	; 62
     1e0:	41 92       	st	Z+, r4
     1e2:	50 82       	st	Z, r5
    jmp osEE_hal_ready2stacked
     1e4:	0c 94 cc 00 	jmp	0x198	; 0x198 <osEE_hal_ready2stacked>

000001e8 <osEE_hal_terminate_ctx>:
  .type osEE_hal_terminate_ctx, @function
osEE_hal_terminate_ctx:
  /*  r25:r24 parameter:  OsEE_SCB * p_term_scb
      r23:r22 parameter:  kernel_cb
      r21:r20 local       p_term_scb->p_tos */
    mov r30, r24
     1e8:	e8 2f       	mov	r30, r24
    mov r31, r25
     1ea:	f9 2f       	mov	r31, r25
    ld  r20, z+
     1ec:	41 91       	ld	r20, Z+
    ld  r21, z
     1ee:	50 81       	ld	r21, Z

/* Unwind SP */
    out 0x3D, r20 /* r20 -> spl */
     1f0:	4d bf       	out	0x3d, r20	; 61
    out 0x3E, r21 /* r21 -> sph */
     1f2:	5e bf       	out	0x3e, r21	; 62

/*  Jump to kern_callback (that schedule) */
    mov r30, r22
     1f4:	e6 2f       	mov	r30, r22
    mov r31, r23
     1f6:	f7 2f       	mov	r31, r23

    ijmp
     1f8:	09 94       	ijmp
	...

000001fc <idle_hook>:
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	00 d0       	rcall	.+0      	; 0x206 <idle_hook+0xa>
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	8d b7       	in	r24, 0x3d	; 61
     20c:	9e b7       	in	r25, 0x3e	; 62
     20e:	9a 83       	std	Y+2, r25	; 0x02
     210:	89 83       	std	Y+1, r24	; 0x01
     212:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <__data_end>
     216:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <__data_end+0x1>
     21a:	89 2b       	or	r24, r25
     21c:	a9 f4       	brne	.+42     	; 0x248 <idle_hook+0x4c>
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	9a 81       	ldd	r25, Y+2	; 0x02
     222:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <__data_end+0x1>
     226:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <__data_end>
     22a:	f8 94       	cli
     22c:	8a ee       	ldi	r24, 0xEA	; 234
     22e:	98 e0       	ldi	r25, 0x08	; 8
     230:	89 2b       	or	r24, r25
     232:	11 f0       	breq	.+4      	; 0x238 <idle_hook+0x3c>
     234:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <_Z14serialEventRunv>
     238:	78 94       	sei
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	1f 91       	pop	r17
     244:	0f 91       	pop	r16
     246:	08 95       	ret
     248:	20 91 cc 02 	lds	r18, 0x02CC	; 0x8002cc <__data_end>
     24c:	30 91 cd 02 	lds	r19, 0x02CD	; 0x8002cd <__data_end+0x1>
     250:	89 81       	ldd	r24, Y+1	; 0x01
     252:	9a 81       	ldd	r25, Y+2	; 0x02
     254:	28 17       	cp	r18, r24
     256:	39 07       	cpc	r19, r25
     258:	41 f3       	breq	.-48     	; 0x22a <idle_hook+0x2e>
     25a:	61 e0       	ldi	r22, 0x01	; 1
     25c:	8d e0       	ldi	r24, 0x0D	; 13
     25e:	0e 94 de 07 	call	0xfbc	; 0xfbc <digitalWrite>
     262:	f8 94       	cli
     264:	83 e6       	ldi	r24, 0x63	; 99
     266:	91 e0       	ldi	r25, 0x01	; 1
     268:	0e 94 ed 01 	call	0x3da	; 0x3da <serial_print>
     26c:	0a ee       	ldi	r16, 0xEA	; 234
     26e:	18 e0       	ldi	r17, 0x08	; 8
     270:	01 15       	cp	r16, r1
     272:	11 05       	cpc	r17, r1
     274:	e9 f3       	breq	.-6      	; 0x270 <idle_hook+0x74>
     276:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <_Z14serialEventRunv>
     27a:	fa cf       	rjmp	.-12     	; 0x270 <idle_hook+0x74>

0000027c <main>:
     27c:	0e 94 3e 07 	call	0xe7c	; 0xe7c <init>
     280:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <startupmode>
     284:	0e 94 b8 0a 	call	0x1570	; 0x1570 <StartOS>
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	08 95       	ret

0000028e <lcd_animation>:
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	c0 e0       	ldi	r28, 0x00	; 0
     29a:	8f e7       	ldi	r24, 0x7F	; 127
     29c:	e8 2e       	mov	r14, r24
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	f8 2e       	mov	r15, r24
     2a2:	07 e8       	ldi	r16, 0x87	; 135
     2a4:	11 e0       	ldi	r17, 0x01	; 1
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	8c 2f       	mov	r24, r28
     2aa:	0e 94 ed 02 	call	0x5da	; 0x5da <hd44780_setCursor>
     2ae:	ff 92       	push	r15
     2b0:	ef 92       	push	r14
     2b2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <hd44780_printf>
     2b6:	61 e0       	ldi	r22, 0x01	; 1
     2b8:	8c 2f       	mov	r24, r28
     2ba:	0e 94 ed 02 	call	0x5da	; 0x5da <hd44780_setCursor>
     2be:	1f 93       	push	r17
     2c0:	0f 93       	push	r16
     2c2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <hd44780_printf>
     2c6:	60 e3       	ldi	r22, 0x30	; 48
     2c8:	75 e7       	ldi	r23, 0x75	; 117
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <delay>
     2d2:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <hd44780_clear>
     2d6:	cf 5f       	subi	r28, 0xFF	; 255
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
     2de:	0f 90       	pop	r0
     2e0:	c0 31       	cpi	r28, 0x10	; 16
     2e2:	09 f7       	brne	.-62     	; 0x2a6 <lcd_animation+0x18>
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
     2ea:	ff 90       	pop	r15
     2ec:	ef 90       	pop	r14
     2ee:	08 95       	ret

000002f0 <check_mode>:
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	0e 94 0c 08 	call	0x1018	; 0x1018 <digitalRead>
     2f6:	89 2b       	or	r24, r25
     2f8:	31 f5       	brne	.+76     	; 0x346 <check_mode+0x56>
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <startupmode>
     300:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <startupmode>
     304:	81 11       	cpse	r24, r1
     306:	22 c0       	rjmp	.+68     	; 0x34c <check_mode+0x5c>
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	0e 94 ed 02 	call	0x5da	; 0x5da <hd44780_setCursor>
     30e:	80 e9       	ldi	r24, 0x90	; 144
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	9f 93       	push	r25
     314:	8f 93       	push	r24
     316:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <hd44780_printf>
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	0e 94 ed 02 	call	0x5da	; 0x5da <hd44780_setCursor>
     322:	8d e9       	ldi	r24, 0x9D	; 157
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	9f 93       	push	r25
     328:	8f 93       	push	r24
     32a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <hd44780_printf>
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	60 e4       	ldi	r22, 0x40	; 64
     338:	7d e0       	ldi	r23, 0x0D	; 13
     33a:	83 e0       	ldi	r24, 0x03	; 3
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <delay>
     342:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <hd44780_clear>
     346:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <startupmode>
     34a:	da cf       	rjmp	.-76     	; 0x300 <check_mode+0x10>
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	99 f7       	brne	.-26     	; 0x336 <check_mode+0x46>
     350:	60 e0       	ldi	r22, 0x00	; 0
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	0e 94 ed 02 	call	0x5da	; 0x5da <hd44780_setCursor>
     358:	80 e9       	ldi	r24, 0x90	; 144
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	9f 93       	push	r25
     35e:	8f 93       	push	r24
     360:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <hd44780_printf>
     364:	61 e0       	ldi	r22, 0x01	; 1
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	0e 94 ed 02 	call	0x5da	; 0x5da <hd44780_setCursor>
     36c:	88 ea       	ldi	r24, 0xA8	; 168
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	da cf       	rjmp	.-76     	; 0x326 <check_mode+0x36>

00000372 <StartupHook>:
     372:	61 e0       	ldi	r22, 0x01	; 1
     374:	8d e0       	ldi	r24, 0x0D	; 13
     376:	0e 94 a2 07 	call	0xf44	; 0xf44 <pinMode>
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	8d e0       	ldi	r24, 0x0D	; 13
     37e:	0e 94 de 07 	call	0xfbc	; 0xfbc <digitalWrite>
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	83 e1       	ldi	r24, 0x13	; 19
     386:	0e 94 a2 07 	call	0xf44	; 0xf44 <pinMode>
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	0e 94 a2 07 	call	0xf44	; 0xf44 <pinMode>
     392:	40 e0       	ldi	r20, 0x00	; 0
     394:	62 e0       	ldi	r22, 0x02	; 2
     396:	80 e1       	ldi	r24, 0x10	; 16
     398:	0e 94 ad 04 	call	0x95a	; 0x95a <hd44780_init>
     39c:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_animation>
     3a0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <check_mode>
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	0e 94 ed 02 	call	0x5da	; 0x5da <hd44780_setCursor>
     3ac:	8e ea       	ldi	r24, 0xAE	; 174
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	9f 93       	push	r25
     3b2:	8f 93       	push	r24
     3b4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <hd44780_printf>
     3b8:	e9 e6       	ldi	r30, 0x69	; 105
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	80 81       	ld	r24, Z
     3be:	82 60       	ori	r24, 0x02	; 2
     3c0:	80 83       	st	Z, r24
     3c2:	e8 9a       	sbi	0x1d, 0	; 29
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	26 e0       	ldi	r18, 0x06	; 6
     3ca:	40 e0       	ldi	r20, 0x00	; 0
     3cc:	52 ec       	ldi	r21, 0xC2	; 194
     3ce:	61 e0       	ldi	r22, 0x01	; 1
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	8d e0       	ldi	r24, 0x0D	; 13
     3d4:	93 e0       	ldi	r25, 0x03	; 3
     3d6:	0c 94 87 09 	jmp	0x130e	; 0x130e <_ZN14HardwareSerial5beginEmh>

000003da <serial_print>:
     3da:	f8 94       	cli
     3dc:	fc 01       	movw	r30, r24
     3de:	01 90       	ld	r0, Z+
     3e0:	00 20       	and	r0, r0
     3e2:	e9 f7       	brne	.-6      	; 0x3de <serial_print+0x4>
     3e4:	31 97       	sbiw	r30, 0x01	; 1
     3e6:	af 01       	movw	r20, r30
     3e8:	48 1b       	sub	r20, r24
     3ea:	59 0b       	sbc	r21, r25
     3ec:	bc 01       	movw	r22, r24
     3ee:	8d e0       	ldi	r24, 0x0D	; 13
     3f0:	93 e0       	ldi	r25, 0x03	; 3
     3f2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_ZN5Print5writeEPKhj>
     3f6:	78 94       	sei
     3f8:	08 95       	ret

000003fa <hd44780_markStart>:
     3fa:	cf 92       	push	r12
     3fc:	df 92       	push	r13
     3fe:	ef 92       	push	r14
     400:	ff 92       	push	r15
     402:	6b 01       	movw	r12, r22
     404:	7c 01       	movw	r14, r24
     406:	0e 94 d5 06 	call	0xdaa	; 0xdaa <micros>
     40a:	60 93 dc 02 	sts	0x02DC, r22	; 0x8002dc <_startTime>
     40e:	70 93 dd 02 	sts	0x02DD, r23	; 0x8002dd <_startTime+0x1>
     412:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <_startTime+0x2>
     416:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <_startTime+0x3>
     41a:	c0 92 d8 02 	sts	0x02D8, r12	; 0x8002d8 <_execTime>
     41e:	d0 92 d9 02 	sts	0x02D9, r13	; 0x8002d9 <_execTime+0x1>
     422:	e0 92 da 02 	sts	0x02DA, r14	; 0x8002da <_execTime+0x2>
     426:	f0 92 db 02 	sts	0x02DB, r15	; 0x8002db <_execTime+0x3>
     42a:	ff 90       	pop	r15
     42c:	ef 90       	pop	r14
     42e:	df 90       	pop	r13
     430:	cf 90       	pop	r12
     432:	08 95       	ret

00000434 <hd44780_pinIO>:
     434:	87 e0       	ldi	r24, 0x07	; 7
     436:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <_rs>
     43a:	8c e0       	ldi	r24, 0x0C	; 12
     43c:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <_en>
     440:	8f ef       	ldi	r24, 0xFF	; 255
     442:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <_rw>
     446:	9b e0       	ldi	r25, 0x0B	; 11
     448:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <_d4>
     44c:	9a e0       	ldi	r25, 0x0A	; 10
     44e:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <_d5>
     452:	99 e0       	ldi	r25, 0x09	; 9
     454:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <_d6>
     458:	98 e0       	ldi	r25, 0x08	; 8
     45a:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <_d7>
     45e:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <_bl>
     462:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <_blLevel>
     466:	08 95       	ret

00000468 <iosetBacklight>:
     468:	68 2f       	mov	r22, r24
     46a:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <_bl>
     46e:	8f 3f       	cpi	r24, 0xFF	; 255
     470:	89 f1       	breq	.+98     	; 0x4d4 <iosetBacklight+0x6c>
     472:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <_blLevel>
     476:	9e 3f       	cpi	r25, 0xFE	; 254
     478:	51 f4       	brne	.+20     	; 0x48e <iosetBacklight+0x26>
     47a:	66 23       	and	r22, r22
     47c:	31 f0       	breq	.+12     	; 0x48a <iosetBacklight+0x22>
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	0e 94 a2 07 	call	0xf44	; 0xf44 <pinMode>
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	08 95       	ret
     48a:	61 e0       	ldi	r22, 0x01	; 1
     48c:	f9 cf       	rjmp	.-14     	; 0x480 <iosetBacklight+0x18>
     48e:	83 30       	cpi	r24, 0x03	; 3
     490:	41 f0       	breq	.+16     	; 0x4a2 <iosetBacklight+0x3a>
     492:	2b ef       	ldi	r18, 0xFB	; 251
     494:	28 0f       	add	r18, r24
     496:	22 30       	cpi	r18, 0x02	; 2
     498:	20 f0       	brcs	.+8      	; 0x4a2 <iosetBacklight+0x3a>
     49a:	27 ef       	ldi	r18, 0xF7	; 247
     49c:	28 0f       	add	r18, r24
     49e:	23 30       	cpi	r18, 0x03	; 3
     4a0:	68 f4       	brcc	.+26     	; 0x4bc <iosetBacklight+0x54>
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	91 30       	cpi	r25, 0x01	; 1
     4a6:	19 f4       	brne	.+6      	; 0x4ae <iosetBacklight+0x46>
     4a8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <analogWrite>
     4ac:	eb cf       	rjmp	.-42     	; 0x484 <iosetBacklight+0x1c>
     4ae:	2f ef       	ldi	r18, 0xFF	; 255
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	a9 01       	movw	r20, r18
     4b4:	46 1b       	sub	r20, r22
     4b6:	57 0b       	sbc	r21, r23
     4b8:	ba 01       	movw	r22, r20
     4ba:	f6 cf       	rjmp	.-20     	; 0x4a8 <iosetBacklight+0x40>
     4bc:	66 23       	and	r22, r22
     4be:	31 f0       	breq	.+12     	; 0x4cc <iosetBacklight+0x64>
     4c0:	91 30       	cpi	r25, 0x01	; 1
     4c2:	31 f4       	brne	.+12     	; 0x4d0 <iosetBacklight+0x68>
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	0e 94 de 07 	call	0xfbc	; 0xfbc <digitalWrite>
     4ca:	dc cf       	rjmp	.-72     	; 0x484 <iosetBacklight+0x1c>
     4cc:	99 23       	and	r25, r25
     4ce:	d1 f3       	breq	.-12     	; 0x4c4 <iosetBacklight+0x5c>
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	f9 cf       	rjmp	.-14     	; 0x4c6 <iosetBacklight+0x5e>
     4d4:	8d ef       	ldi	r24, 0xFD	; 253
     4d6:	9f ef       	ldi	r25, 0xFF	; 255
     4d8:	08 95       	ret

000004da <hd44780_backlight>:
     4da:	8f ef       	ldi	r24, 0xFF	; 255
     4dc:	0c 94 34 02 	jmp	0x468	; 0x468 <iosetBacklight>

000004e0 <write4bits>:
     4e0:	cf 93       	push	r28
     4e2:	c8 2f       	mov	r28, r24
     4e4:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <_d4>
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	c0 ff       	sbrs	r28, 0
     4ec:	60 e0       	ldi	r22, 0x00	; 0
     4ee:	0e 94 de 07 	call	0xfbc	; 0xfbc <digitalWrite>
     4f2:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <_d5>
     4f6:	61 e0       	ldi	r22, 0x01	; 1
     4f8:	c1 ff       	sbrs	r28, 1
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	0e 94 de 07 	call	0xfbc	; 0xfbc <digitalWrite>
     500:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <_d6>
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	c2 ff       	sbrs	r28, 2
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	0e 94 de 07 	call	0xfbc	; 0xfbc <digitalWrite>
     50e:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <_d7>
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	c3 ff       	sbrs	r28, 3
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	cf 91       	pop	r28
     51a:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <digitalWrite>

0000051e <pulseEnable>:
     51e:	61 e0       	ldi	r22, 0x01	; 1
     520:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <_en>
     524:	0e 94 de 07 	call	0xfbc	; 0xfbc <digitalWrite>
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 33 07 	call	0xe66	; 0xe66 <delayMicroseconds>
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <_en>
     536:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <digitalWrite>

0000053a <iowrite>:
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	8c 01       	movw	r16, r24
     542:	c6 2f       	mov	r28, r22
     544:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <_rs>
     548:	61 e0       	ldi	r22, 0x01	; 1
     54a:	01 30       	cpi	r16, 0x01	; 1
     54c:	11 05       	cpc	r17, r1
     54e:	09 f0       	breq	.+2      	; 0x552 <iowrite+0x18>
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	0e 94 de 07 	call	0xfbc	; 0xfbc <digitalWrite>
     556:	8c 2f       	mov	r24, r28
     558:	82 95       	swap	r24
     55a:	8f 70       	andi	r24, 0x0F	; 15
     55c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <write4bits>
     560:	0e 94 8f 02 	call	0x51e	; 0x51e <pulseEnable>
     564:	02 30       	cpi	r16, 0x02	; 2
     566:	11 05       	cpc	r17, r1
     568:	31 f0       	breq	.+12     	; 0x576 <iowrite+0x3c>
     56a:	8c 2f       	mov	r24, r28
     56c:	8f 70       	andi	r24, 0x0F	; 15
     56e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <write4bits>
     572:	0e 94 8f 02 	call	0x51e	; 0x51e <pulseEnable>
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	08 95       	ret

00000582 <hd44780_command>:
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	c8 2f       	mov	r28, r24
     58a:	68 2f       	mov	r22, r24
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	0e 94 9d 02 	call	0x53a	; 0x53a <iowrite>
     594:	8c 01       	movw	r16, r24
     596:	c1 50       	subi	r28, 0x01	; 1
     598:	c2 30       	cpi	r28, 0x02	; 2
     59a:	98 f4       	brcc	.+38     	; 0x5c2 <hd44780_command+0x40>
     59c:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <_curcol>
     5a0:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <_currow>
     5a4:	60 91 e4 02 	lds	r22, 0x02E4	; 0x8002e4 <_chExecTime>
     5a8:	70 91 e5 02 	lds	r23, 0x02E5	; 0x8002e5 <_chExecTime+0x1>
     5ac:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <_chExecTime+0x2>
     5b0:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <_chExecTime+0x3>
     5b4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <hd44780_markStart>
     5b8:	c8 01       	movw	r24, r16
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	08 95       	ret
     5c2:	60 91 e0 02 	lds	r22, 0x02E0	; 0x8002e0 <_insExecTime>
     5c6:	70 91 e1 02 	lds	r23, 0x02E1	; 0x8002e1 <_insExecTime+0x1>
     5ca:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <_insExecTime+0x2>
     5ce:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <_insExecTime+0x3>
     5d2:	f0 cf       	rjmp	.-32     	; 0x5b4 <hd44780_command+0x32>

000005d4 <hd44780_clear>:
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	0c 94 c1 02 	jmp	0x582	; 0x582 <hd44780_command>

000005da <hd44780_setCursor>:
     5da:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <_rows>
     5de:	69 17       	cp	r22, r25
     5e0:	10 f0       	brcs	.+4      	; 0x5e6 <hd44780_setCursor+0xc>
     5e2:	6f ef       	ldi	r22, 0xFF	; 255
     5e4:	69 0f       	add	r22, r25
     5e6:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <_wraplines>
     5ea:	22 23       	and	r18, r18
     5ec:	71 f0       	breq	.+28     	; 0x60a <hd44780_setCursor+0x30>
     5ee:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <_cols>
     5f2:	82 17       	cp	r24, r18
     5f4:	30 f0       	brcs	.+12     	; 0x602 <hd44780_setCursor+0x28>
     5f6:	82 1b       	sub	r24, r18
     5f8:	6f 5f       	subi	r22, 0xFF	; 255
     5fa:	69 17       	cp	r22, r25
     5fc:	d0 f3       	brcs	.-12     	; 0x5f2 <hd44780_setCursor+0x18>
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	f8 cf       	rjmp	.-16     	; 0x5f2 <hd44780_setCursor+0x18>
     602:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <_curcol>
     606:	60 93 e9 02 	sts	0x02E9, r22	; 0x8002e9 <_currow>
     60a:	e6 2f       	mov	r30, r22
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	e5 51       	subi	r30, 0x15	; 21
     610:	fd 4f       	sbci	r31, 0xFD	; 253
     612:	90 81       	ld	r25, Z
     614:	89 0f       	add	r24, r25
     616:	80 68       	ori	r24, 0x80	; 128
     618:	0c 94 c1 02 	jmp	0x582	; 0x582 <hd44780_command>

0000061c <hd44780_display>:
     61c:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <_displaycontrol>
     620:	98 2f       	mov	r25, r24
     622:	94 60       	ori	r25, 0x04	; 4
     624:	90 93 f2 02 	sts	0x02F2, r25	; 0x8002f2 <_displaycontrol>
     628:	8c 60       	ori	r24, 0x0C	; 12
     62a:	0c 94 c1 02 	jmp	0x582	; 0x582 <hd44780_command>

0000062e <hd44780_rwrite>:
     62e:	cf 93       	push	r28
     630:	df 93       	push	r29
     632:	68 2f       	mov	r22, r24
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 9d 02 	call	0x53a	; 0x53a <iowrite>
     63c:	ec 01       	movw	r28, r24
     63e:	60 91 e0 02 	lds	r22, 0x02E0	; 0x8002e0 <_insExecTime>
     642:	70 91 e1 02 	lds	r23, 0x02E1	; 0x8002e1 <_insExecTime+0x1>
     646:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <_insExecTime+0x2>
     64a:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <_insExecTime+0x3>
     64e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <hd44780_markStart>
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	cd 2b       	or	r28, r29
     658:	11 f0       	breq	.+4      	; 0x65e <hd44780_rwrite+0x30>
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	08 95       	ret

00000664 <hd44780_write>:
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	0e 94 17 03 	call	0x62e	; 0x62e <hd44780_rwrite>
     66c:	ec 01       	movw	r28, r24
     66e:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <_wraplines>
     672:	88 23       	and	r24, r24
     674:	d9 f0       	breq	.+54     	; 0x6ac <hd44780_write+0x48>
     676:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <_curcol>
     67a:	8f 5f       	subi	r24, 0xFF	; 255
     67c:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <_curcol>
     680:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <_cols>
     684:	89 17       	cp	r24, r25
     686:	90 f0       	brcs	.+36     	; 0x6ac <hd44780_write+0x48>
     688:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <_curcol>
     68c:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <_currow>
     690:	8f 5f       	subi	r24, 0xFF	; 255
     692:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <_currow>
     696:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <_rows>
     69a:	89 17       	cp	r24, r25
     69c:	10 f0       	brcs	.+4      	; 0x6a2 <hd44780_write+0x3e>
     69e:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <_currow>
     6a2:	60 91 e9 02 	lds	r22, 0x02E9	; 0x8002e9 <_currow>
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 ed 02 	call	0x5da	; 0x5da <hd44780_setCursor>
     6ac:	ce 01       	movw	r24, r28
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	08 95       	ret

000006b4 <hd44780_printf>:
     6b4:	ef 92       	push	r14
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
     6c4:	a0 97       	sbiw	r28, 0x20	; 32
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	9e 01       	movw	r18, r28
     6d2:	27 5d       	subi	r18, 0xD7	; 215
     6d4:	3f 4f       	sbci	r19, 0xFF	; 255
     6d6:	f9 01       	movw	r30, r18
     6d8:	41 91       	ld	r20, Z+
     6da:	51 91       	ld	r21, Z+
     6dc:	9f 01       	movw	r18, r30
     6de:	60 e2       	ldi	r22, 0x20	; 32
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	ce 01       	movw	r24, r28
     6e4:	01 96       	adiw	r24, 0x01	; 1
     6e6:	0e 94 a8 14 	call	0x2950	; 0x2950 <vsnprintf>
     6ea:	7c 01       	movw	r14, r24
     6ec:	10 e0       	ldi	r17, 0x00	; 0
     6ee:	00 e0       	ldi	r16, 0x00	; 0
     6f0:	0e 15       	cp	r16, r14
     6f2:	1f 05       	cpc	r17, r15
     6f4:	b8 f4       	brcc	.+46     	; 0x724 <hd44780_printf+0x70>
     6f6:	e1 e0       	ldi	r30, 0x01	; 1
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	ec 0f       	add	r30, r28
     6fc:	fd 1f       	adc	r31, r29
     6fe:	e0 0f       	add	r30, r16
     700:	f1 1f       	adc	r31, r17
     702:	80 81       	ld	r24, Z
     704:	0e 94 32 03 	call	0x664	; 0x664 <hd44780_write>
     708:	08 0f       	add	r16, r24
     70a:	19 1f       	adc	r17, r25
     70c:	89 2b       	or	r24, r25
     70e:	51 f0       	breq	.+20     	; 0x724 <hd44780_printf+0x70>
     710:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <_wraplines>
     714:	81 11       	cpse	r24, r1
     716:	ec cf       	rjmp	.-40     	; 0x6f0 <hd44780_printf+0x3c>
     718:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <_cols>
     71c:	80 17       	cp	r24, r16
     71e:	11 06       	cpc	r1, r17
     720:	09 f0       	breq	.+2      	; 0x724 <hd44780_printf+0x70>
     722:	30 f7       	brcc	.-52     	; 0x6f0 <hd44780_printf+0x3c>
     724:	c8 01       	movw	r24, r16
     726:	a0 96       	adiw	r28, 0x20	; 32
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	08 95       	ret

00000740 <blPinTest>:
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	c8 2f       	mov	r28, r24
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	0e 94 de 07 	call	0xfbc	; 0xfbc <digitalWrite>
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	8c 2f       	mov	r24, r28
     752:	0e 94 a2 07 	call	0xf44	; 0xf44 <pinMode>
     756:	61 e0       	ldi	r22, 0x01	; 1
     758:	8c 2f       	mov	r24, r28
     75a:	0e 94 a2 07 	call	0xf44	; 0xf44 <pinMode>
     75e:	61 e0       	ldi	r22, 0x01	; 1
     760:	8c 2f       	mov	r24, r28
     762:	0e 94 de 07 	call	0xfbc	; 0xfbc <digitalWrite>
     766:	85 e0       	ldi	r24, 0x05	; 5
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 33 07 	call	0xe66	; 0xe66 <delayMicroseconds>
     76e:	8c 2f       	mov	r24, r28
     770:	0e 94 0c 08 	call	0x1018	; 0x1018 <digitalRead>
     774:	8c 01       	movw	r16, r24
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	8c 2f       	mov	r24, r28
     77a:	0e 94 de 07 	call	0xfbc	; 0xfbc <digitalWrite>
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	8c 2f       	mov	r24, r28
     782:	0e 94 a2 07 	call	0xf44	; 0xf44 <pinMode>
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	01 30       	cpi	r16, 0x01	; 1
     78c:	11 05       	cpc	r17, r1
     78e:	11 f4       	brne	.+4      	; 0x794 <blPinTest+0x54>
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	91 95       	neg	r25
     796:	81 95       	neg	r24
     798:	91 09       	sbc	r25, r1
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	08 95       	ret

000007a2 <ioinit>:
     7a2:	0e 94 1a 02 	call	0x434	; 0x434 <hd44780_pinIO>
     7a6:	61 e0       	ldi	r22, 0x01	; 1
     7a8:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <_rs>
     7ac:	0e 94 a2 07 	call	0xf44	; 0xf44 <pinMode>
     7b0:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <_rw>
     7b4:	8f 3f       	cpi	r24, 0xFF	; 255
     7b6:	41 f0       	breq	.+16     	; 0x7c8 <ioinit+0x26>
     7b8:	61 e0       	ldi	r22, 0x01	; 1
     7ba:	0e 94 a2 07 	call	0xf44	; 0xf44 <pinMode>
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <_rw>
     7c4:	0e 94 de 07 	call	0xfbc	; 0xfbc <digitalWrite>
     7c8:	61 e0       	ldi	r22, 0x01	; 1
     7ca:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <_en>
     7ce:	0e 94 a2 07 	call	0xf44	; 0xf44 <pinMode>
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <_en>
     7d8:	0e 94 de 07 	call	0xfbc	; 0xfbc <digitalWrite>
     7dc:	61 e0       	ldi	r22, 0x01	; 1
     7de:	80 91 d4 02 	lds	r24, 0x02D4	; 0x8002d4 <_d4>
     7e2:	0e 94 a2 07 	call	0xf44	; 0xf44 <pinMode>
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <_d5>
     7ec:	0e 94 a2 07 	call	0xf44	; 0xf44 <pinMode>
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <_d6>
     7f6:	0e 94 a2 07 	call	0xf44	; 0xf44 <pinMode>
     7fa:	61 e0       	ldi	r22, 0x01	; 1
     7fc:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <_d7>
     800:	0e 94 a2 07 	call	0xf44	; 0xf44 <pinMode>
     804:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <_bl>
     808:	8f 3f       	cpi	r24, 0xFF	; 255
     80a:	89 f0       	breq	.+34     	; 0x82e <ioinit+0x8c>
     80c:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <_blLevel>
     810:	91 30       	cpi	r25, 0x01	; 1
     812:	41 f4       	brne	.+16     	; 0x824 <ioinit+0x82>
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 a0 03 	call	0x740	; 0x740 <blPinTest>
     81a:	89 2b       	or	r24, r25
     81c:	19 f0       	breq	.+6      	; 0x824 <ioinit+0x82>
     81e:	8e ef       	ldi	r24, 0xFE	; 254
     820:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <_blLevel>
     824:	61 e0       	ldi	r22, 0x01	; 1
     826:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <_bl>
     82a:	0e 94 a2 07 	call	0xf44	; 0xf44 <pinMode>
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	08 95       	ret

00000834 <hd44780_begin>:
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	16 2f       	mov	r17, r22
     83e:	04 2f       	mov	r16, r20
     840:	96 2f       	mov	r25, r22
     842:	65 30       	cpi	r22, 0x05	; 5
     844:	08 f0       	brcs	.+2      	; 0x848 <hd44780_begin+0x14>
     846:	94 e0       	ldi	r25, 0x04	; 4
     848:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <_rowOffsets>
     84c:	21 11       	cpse	r18, r1
     84e:	0c c0       	rjmp	.+24     	; 0x868 <hd44780_begin+0x34>
     850:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <_rowOffsets+0x1>
     854:	21 11       	cpse	r18, r1
     856:	08 c0       	rjmp	.+16     	; 0x868 <hd44780_begin+0x34>
     858:	20 91 ed 02 	lds	r18, 0x02ED	; 0x8002ed <_rowOffsets+0x2>
     85c:	21 11       	cpse	r18, r1
     85e:	04 c0       	rjmp	.+8      	; 0x868 <hd44780_begin+0x34>
     860:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <_rowOffsets+0x3>
     864:	22 23       	and	r18, r18
     866:	31 f0       	breq	.+12     	; 0x874 <hd44780_begin+0x40>
     868:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <_cols>
     86c:	22 23       	and	r18, r18
     86e:	61 f0       	breq	.+24     	; 0x888 <hd44780_begin+0x54>
     870:	28 17       	cp	r18, r24
     872:	51 f0       	breq	.+20     	; 0x888 <hd44780_begin+0x54>
     874:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <_rowOffsets>
     878:	20 e4       	ldi	r18, 0x40	; 64
     87a:	20 93 ec 02 	sts	0x02EC, r18	; 0x8002ec <_rowOffsets+0x1>
     87e:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <_rowOffsets+0x2>
     882:	28 0f       	add	r18, r24
     884:	20 93 ee 02 	sts	0x02EE, r18	; 0x8002ee <_rowOffsets+0x3>
     888:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <_rows>
     88c:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <_cols>
     890:	64 e6       	ldi	r22, 0x64	; 100
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <delay>
     89c:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <_displayfunction>
     8a0:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <ioinit>
     8a4:	ec 01       	movw	r28, r24
     8a6:	89 2b       	or	r24, r25
     8a8:	09 f0       	breq	.+2      	; 0x8ac <hd44780_begin+0x78>
     8aa:	51 c0       	rjmp	.+162    	; 0x94e <__stack+0x4f>
     8ac:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <_rows>
     8b0:	82 30       	cpi	r24, 0x02	; 2
     8b2:	28 f0       	brcs	.+10     	; 0x8be <hd44780_begin+0x8a>
     8b4:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <_displayfunction>
     8b8:	88 60       	ori	r24, 0x08	; 8
     8ba:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <_displayfunction>
     8be:	00 23       	and	r16, r16
     8c0:	39 f0       	breq	.+14     	; 0x8d0 <hd44780_begin+0x9c>
     8c2:	11 30       	cpi	r17, 0x01	; 1
     8c4:	29 f4       	brne	.+10     	; 0x8d0 <hd44780_begin+0x9c>
     8c6:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <_displayfunction>
     8ca:	84 60       	ori	r24, 0x04	; 4
     8cc:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <_displayfunction>
     8d0:	60 e3       	ldi	r22, 0x30	; 48
     8d2:	82 e0       	ldi	r24, 0x02	; 2
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 9d 02 	call	0x53a	; 0x53a <iowrite>
     8da:	65 e0       	ldi	r22, 0x05	; 5
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <delay>
     8e6:	60 e3       	ldi	r22, 0x30	; 48
     8e8:	82 e0       	ldi	r24, 0x02	; 2
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 9d 02 	call	0x53a	; 0x53a <iowrite>
     8f0:	61 e0       	ldi	r22, 0x01	; 1
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <delay>
     8fc:	60 e3       	ldi	r22, 0x30	; 48
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 9d 02 	call	0x53a	; 0x53a <iowrite>
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <delay>
     912:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <_displayfunction>
     916:	84 fd       	sbrc	r24, 4
     918:	05 c0       	rjmp	.+10     	; 0x924 <__stack+0x25>
     91a:	60 e2       	ldi	r22, 0x20	; 32
     91c:	82 e0       	ldi	r24, 0x02	; 2
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 9d 02 	call	0x53a	; 0x53a <iowrite>
     924:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <_displayfunction>
     928:	80 62       	ori	r24, 0x20	; 32
     92a:	0e 94 c1 02 	call	0x582	; 0x582 <hd44780_command>
     92e:	84 e0       	ldi	r24, 0x04	; 4
     930:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_displaycontrol>
     934:	0e 94 0e 03 	call	0x61c	; 0x61c <hd44780_display>
     938:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <hd44780_clear>
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	80 93 f1 02 	sts	0x02F1, r24	; 0x8002f1 <_displaymode>
     942:	86 e0       	ldi	r24, 0x06	; 6
     944:	0e 94 c1 02 	call	0x582	; 0x582 <hd44780_command>
     948:	ec 01       	movw	r28, r24
     94a:	0e 94 6d 02 	call	0x4da	; 0x4da <hd44780_backlight>
     94e:	ce 01       	movw	r24, r28
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	1f 91       	pop	r17
     956:	0f 91       	pop	r16
     958:	08 95       	ret

0000095a <hd44780_init>:
     95a:	90 91 f0 02 	lds	r25, 0x02F0	; 0x8002f0 <_cols>
     95e:	91 11       	cpse	r25, r1
     960:	02 c0       	rjmp	.+4      	; 0x966 <hd44780_init+0xc>
     962:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <_cols>
     966:	80 91 ef 02 	lds	r24, 0x02EF	; 0x8002ef <_rows>
     96a:	81 11       	cpse	r24, r1
     96c:	02 c0       	rjmp	.+4      	; 0x972 <hd44780_init+0x18>
     96e:	60 93 ef 02 	sts	0x02EF, r22	; 0x8002ef <_rows>
     972:	80 ed       	ldi	r24, 0xD0	; 208
     974:	97 e0       	ldi	r25, 0x07	; 7
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <_chExecTime>
     97e:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <_chExecTime+0x1>
     982:	a0 93 e6 02 	sts	0x02E6, r26	; 0x8002e6 <_chExecTime+0x2>
     986:	b0 93 e7 02 	sts	0x02E7, r27	; 0x8002e7 <_chExecTime+0x3>
     98a:	86 e2       	ldi	r24, 0x26	; 38
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	a0 e0       	ldi	r26, 0x00	; 0
     990:	b0 e0       	ldi	r27, 0x00	; 0
     992:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <_insExecTime>
     996:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <_insExecTime+0x1>
     99a:	a0 93 e2 02 	sts	0x02E2, r26	; 0x8002e2 <_insExecTime+0x2>
     99e:	b0 93 e3 02 	sts	0x02E3, r27	; 0x8002e3 <_insExecTime+0x3>
     9a2:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <_rowOffsets>
     9a6:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <_rowOffsets+0x1>
     9aa:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <_rowOffsets+0x2>
     9ae:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <_rowOffsets+0x3>
     9b2:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <_wraplines>
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	70 e0       	ldi	r23, 0x00	; 0
     9ba:	cb 01       	movw	r24, r22
     9bc:	0e 94 fd 01 	call	0x3fa	; 0x3fa <hd44780_markStart>
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	60 91 ef 02 	lds	r22, 0x02EF	; 0x8002ef <_rows>
     9c6:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <_cols>
     9ca:	0c 94 1a 04 	jmp	0x834	; 0x834 <hd44780_begin>

000009ce <FuncMileageTask>:
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <FuncMileageTask+0x6>
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	83 e0       	ldi	r24, 0x03	; 3
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 a0 0b 	call	0x1740	; 0x1740 <WaitEvent>
     9e0:	be 01       	movw	r22, r28
     9e2:	6f 5f       	subi	r22, 0xFF	; 255
     9e4:	7f 4f       	sbci	r23, 0xFF	; 255
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	0e 94 9c 0c 	call	0x1938	; 0x1938 <GetEvent>
     9ec:	89 81       	ldd	r24, Y+1	; 0x01
     9ee:	80 ff       	sbrs	r24, 0
     9f0:	1d c0       	rjmp	.+58     	; 0xa2c <FuncMileageTask+0x5e>
     9f2:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <decimal+0x1>
     9f6:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <decimal>
     9fa:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <mileage+0x1>
     9fe:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <mileage>
     a02:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <hour+0x1>
     a06:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <hour>
     a0a:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <min+0x1>
     a0e:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <min>
     a12:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <sec+0x1>
     a16:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <sec>
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <ClearEvent>
     a22:	61 e0       	ldi	r22, 0x01	; 1
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	83 e0       	ldi	r24, 0x03	; 3
     a28:	0e 94 16 0c 	call	0x182c	; 0x182c <SetEvent>
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	81 ff       	sbrs	r24, 1
     a30:	d3 cf       	rjmp	.-90     	; 0x9d8 <FuncMileageTask+0xa>
     a32:	83 e1       	ldi	r24, 0x13	; 19
     a34:	0e 94 35 08 	call	0x106a	; 0x106a <analogRead>
     a38:	90 93 03 03 	sts	0x0303, r25	; 0x800303 <adc+0x1>
     a3c:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <adc>
     a40:	0e 94 94 0b 	call	0x1728	; 0x1728 <GetActiveApplicationMode>
     a44:	60 91 02 03 	lds	r22, 0x0302	; 0x800302 <adc>
     a48:	70 91 03 03 	lds	r23, 0x0303	; 0x800303 <adc+0x1>
     a4c:	81 11       	cpse	r24, r1
     a4e:	73 c0       	rjmp	.+230    	; 0xb36 <FuncMileageTask+0x168>
     a50:	07 2e       	mov	r0, r23
     a52:	00 0c       	add	r0, r0
     a54:	88 0b       	sbc	r24, r24
     a56:	99 0b       	sbc	r25, r25
     a58:	0e 94 3b 13 	call	0x2676	; 0x2676 <__floatsisf>
     a5c:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <adc2kph>
     a60:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <adc2kph+0x1>
     a64:	40 91 60 01 	lds	r20, 0x0160	; 0x800160 <adc2kph+0x2>
     a68:	50 91 61 01 	lds	r21, 0x0161	; 0x800161 <adc2kph+0x3>
     a6c:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <__mulsf3>
     a70:	60 93 fe 02 	sts	0x02FE, r22	; 0x8002fe <speed>
     a74:	70 93 ff 02 	sts	0x02FF, r23	; 0x8002ff <speed+0x1>
     a78:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <speed+0x2>
     a7c:	90 93 01 03 	sts	0x0301, r25	; 0x800301 <speed+0x3>
     a80:	c0 90 fe 02 	lds	r12, 0x02FE	; 0x8002fe <speed>
     a84:	d0 90 ff 02 	lds	r13, 0x02FF	; 0x8002ff <speed+0x1>
     a88:	e0 90 00 03 	lds	r14, 0x0300	; 0x800300 <speed+0x2>
     a8c:	f0 90 01 03 	lds	r15, 0x0301	; 0x800301 <speed+0x3>
     a90:	60 91 fc 02 	lds	r22, 0x02FC	; 0x8002fc <decimal>
     a94:	70 91 fd 02 	lds	r23, 0x02FD	; 0x8002fd <decimal+0x1>
     a98:	07 2e       	mov	r0, r23
     a9a:	00 0c       	add	r0, r0
     a9c:	88 0b       	sbc	r24, r24
     a9e:	99 0b       	sbc	r25, r25
     aa0:	0e 94 3b 13 	call	0x2676	; 0x2676 <__floatsisf>
     aa4:	4b 01       	movw	r8, r22
     aa6:	5c 01       	movw	r10, r24
     aa8:	26 e6       	ldi	r18, 0x66	; 102
     aaa:	36 e6       	ldi	r19, 0x66	; 102
     aac:	46 e6       	ldi	r20, 0x66	; 102
     aae:	50 e4       	ldi	r21, 0x40	; 64
     ab0:	c7 01       	movw	r24, r14
     ab2:	b6 01       	movw	r22, r12
     ab4:	0e 94 91 12 	call	0x2522	; 0x2522 <__divsf3>
     ab8:	9b 01       	movw	r18, r22
     aba:	ac 01       	movw	r20, r24
     abc:	c5 01       	movw	r24, r10
     abe:	b4 01       	movw	r22, r8
     ac0:	0e 94 20 12 	call	0x2440	; 0x2440 <__addsf3>
     ac4:	0e 94 03 13 	call	0x2606	; 0x2606 <__fixsfsi>
     ac8:	70 93 fd 02 	sts	0x02FD, r23	; 0x8002fd <decimal+0x1>
     acc:	60 93 fc 02 	sts	0x02FC, r22	; 0x8002fc <decimal>
     ad0:	68 3e       	cpi	r22, 0xE8	; 232
     ad2:	23 e0       	ldi	r18, 0x03	; 3
     ad4:	72 07       	cpc	r23, r18
     ad6:	84 f0       	brlt	.+32     	; 0xaf8 <FuncMileageTask+0x12a>
     ad8:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <mileage>
     adc:	30 91 fb 02 	lds	r19, 0x02FB	; 0x8002fb <mileage+0x1>
     ae0:	2f 5f       	subi	r18, 0xFF	; 255
     ae2:	3f 4f       	sbci	r19, 0xFF	; 255
     ae4:	30 93 fb 02 	sts	0x02FB, r19	; 0x8002fb <mileage+0x1>
     ae8:	20 93 fa 02 	sts	0x02FA, r18	; 0x8002fa <mileage>
     aec:	68 5e       	subi	r22, 0xE8	; 232
     aee:	73 40       	sbci	r23, 0x03	; 3
     af0:	70 93 fd 02 	sts	0x02FD, r23	; 0x8002fd <decimal+0x1>
     af4:	60 93 fc 02 	sts	0x02FC, r22	; 0x8002fc <decimal>
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	a9 01       	movw	r20, r18
     afe:	c7 01       	movw	r24, r14
     b00:	b6 01       	movw	r22, r12
     b02:	0e 94 8c 12 	call	0x2518	; 0x2518 <__cmpsf2>
     b06:	88 23       	and	r24, r24
     b08:	61 f0       	breq	.+24     	; 0xb22 <FuncMileageTask+0x154>
     b0a:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <sec>
     b0e:	90 91 f5 02 	lds	r25, 0x02F5	; 0x8002f5 <sec+0x1>
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	8c 33       	cpi	r24, 0x3C	; 60
     b16:	91 05       	cpc	r25, r1
     b18:	ec f4       	brge	.+58     	; 0xb54 <FuncMileageTask+0x186>
     b1a:	90 93 f5 02 	sts	0x02F5, r25	; 0x8002f5 <sec+0x1>
     b1e:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <sec>
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <ClearEvent>
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	83 e0       	ldi	r24, 0x03	; 3
     b30:	0e 94 16 0c 	call	0x182c	; 0x182c <SetEvent>
     b34:	51 cf       	rjmp	.-350    	; 0x9d8 <FuncMileageTask+0xa>
     b36:	07 2e       	mov	r0, r23
     b38:	00 0c       	add	r0, r0
     b3a:	88 0b       	sbc	r24, r24
     b3c:	99 0b       	sbc	r25, r25
     b3e:	0e 94 3b 13 	call	0x2676	; 0x2676 <__floatsisf>
     b42:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <adc2mph>
     b46:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <adc2mph+0x1>
     b4a:	40 91 5c 01 	lds	r20, 0x015C	; 0x80015c <adc2mph+0x2>
     b4e:	50 91 5d 01 	lds	r21, 0x015D	; 0x80015d <adc2mph+0x3>
     b52:	8c cf       	rjmp	.-232    	; 0xa6c <FuncMileageTask+0x9e>
     b54:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <sec+0x1>
     b58:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <sec>
     b5c:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <min>
     b60:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <min+0x1>
     b64:	01 96       	adiw	r24, 0x01	; 1
     b66:	8c 33       	cpi	r24, 0x3C	; 60
     b68:	91 05       	cpc	r25, r1
     b6a:	2c f4       	brge	.+10     	; 0xb76 <FuncMileageTask+0x1a8>
     b6c:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <min+0x1>
     b70:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <min>
     b74:	d6 cf       	rjmp	.-84     	; 0xb22 <FuncMileageTask+0x154>
     b76:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <min+0x1>
     b7a:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <min>
     b7e:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <hour>
     b82:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <hour+0x1>
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <hour+0x1>
     b8c:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <hour>
     b90:	c8 cf       	rjmp	.-112    	; 0xb22 <FuncMileageTask+0x154>

00000b92 <FuncDisplayTask>:
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	00 d0       	rcall	.+0      	; 0xb98 <FuncDisplayTask+0x6>
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	03 e8       	ldi	r16, 0x83	; 131
     b9e:	12 e0       	ldi	r17, 0x02	; 2
     ba0:	86 ea       	ldi	r24, 0xA6	; 166
     ba2:	68 2e       	mov	r6, r24
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	78 2e       	mov	r7, r24
     ba8:	94 e6       	ldi	r25, 0x64	; 100
     baa:	e9 2e       	mov	r14, r25
     bac:	f1 2c       	mov	r15, r1
     bae:	2e ea       	ldi	r18, 0xAE	; 174
     bb0:	c2 2e       	mov	r12, r18
     bb2:	22 e0       	ldi	r18, 0x02	; 2
     bb4:	d2 2e       	mov	r13, r18
     bb6:	32 e9       	ldi	r19, 0x92	; 146
     bb8:	a3 2e       	mov	r10, r19
     bba:	32 e0       	ldi	r19, 0x02	; 2
     bbc:	b3 2e       	mov	r11, r19
     bbe:	4a e9       	ldi	r20, 0x9A	; 154
     bc0:	84 2e       	mov	r8, r20
     bc2:	42 e0       	ldi	r20, 0x02	; 2
     bc4:	94 2e       	mov	r9, r20
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	0e 94 a0 0b 	call	0x1740	; 0x1740 <WaitEvent>
     bce:	be 01       	movw	r22, r28
     bd0:	6f 5f       	subi	r22, 0xFF	; 255
     bd2:	7f 4f       	sbci	r23, 0xFF	; 255
     bd4:	83 e0       	ldi	r24, 0x03	; 3
     bd6:	0e 94 9c 0c 	call	0x1938	; 0x1938 <GetEvent>
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	80 ff       	sbrs	r24, 0
     bde:	f3 cf       	rjmp	.-26     	; 0xbc6 <FuncDisplayTask+0x34>
     be0:	0e 94 94 0b 	call	0x1728	; 0x1728 <GetActiveApplicationMode>
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	81 11       	cpse	r24, r1
     be8:	4e c0       	rjmp	.+156    	; 0xc86 <FuncDisplayTask+0xf4>
     bea:	88 e0       	ldi	r24, 0x08	; 8
     bec:	0e 94 ed 02 	call	0x5da	; 0x5da <hd44780_setCursor>
     bf0:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <sec+0x1>
     bf4:	8f 93       	push	r24
     bf6:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <sec>
     bfa:	8f 93       	push	r24
     bfc:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <min+0x1>
     c00:	8f 93       	push	r24
     c02:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <min>
     c06:	8f 93       	push	r24
     c08:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <hour+0x1>
     c0c:	8f 93       	push	r24
     c0e:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <hour>
     c12:	8f 93       	push	r24
     c14:	1f 93       	push	r17
     c16:	0f 93       	push	r16
     c18:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <hd44780_printf>
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	0e 94 ed 02 	call	0x5da	; 0x5da <hd44780_setCursor>
     c24:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <speed>
     c28:	70 91 ff 02 	lds	r23, 0x02FF	; 0x8002ff <speed+0x1>
     c2c:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <speed+0x2>
     c30:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <speed+0x3>
     c34:	0e 94 03 13 	call	0x2606	; 0x2606 <__fixsfsi>
     c38:	7f 93       	push	r23
     c3a:	6f 93       	push	r22
     c3c:	bf 92       	push	r11
     c3e:	af 92       	push	r10
     c40:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <hd44780_printf>
     c44:	61 e0       	ldi	r22, 0x01	; 1
     c46:	88 e0       	ldi	r24, 0x08	; 8
     c48:	0e 94 ed 02 	call	0x5da	; 0x5da <hd44780_setCursor>
     c4c:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <decimal>
     c50:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <decimal+0x1>
     c54:	b7 01       	movw	r22, r14
     c56:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
     c5a:	7f 93       	push	r23
     c5c:	6f 93       	push	r22
     c5e:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <mileage+0x1>
     c62:	8f 93       	push	r24
     c64:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <mileage>
     c68:	8f 93       	push	r24
     c6a:	9f 92       	push	r9
     c6c:	8f 92       	push	r8
     c6e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <hd44780_printf>
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <ClearEvent>
     c84:	a0 cf       	rjmp	.-192    	; 0xbc6 <FuncDisplayTask+0x34>
     c86:	88 e0       	ldi	r24, 0x08	; 8
     c88:	0e 94 ed 02 	call	0x5da	; 0x5da <hd44780_setCursor>
     c8c:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <sec+0x1>
     c90:	8f 93       	push	r24
     c92:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <sec>
     c96:	8f 93       	push	r24
     c98:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <min+0x1>
     c9c:	8f 93       	push	r24
     c9e:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <min>
     ca2:	8f 93       	push	r24
     ca4:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <hour+0x1>
     ca8:	8f 93       	push	r24
     caa:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <hour>
     cae:	8f 93       	push	r24
     cb0:	1f 93       	push	r17
     cb2:	0f 93       	push	r16
     cb4:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <hd44780_printf>
     cb8:	61 e0       	ldi	r22, 0x01	; 1
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	0e 94 ed 02 	call	0x5da	; 0x5da <hd44780_setCursor>
     cc0:	60 91 fe 02 	lds	r22, 0x02FE	; 0x8002fe <speed>
     cc4:	70 91 ff 02 	lds	r23, 0x02FF	; 0x8002ff <speed+0x1>
     cc8:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <speed+0x2>
     ccc:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <speed+0x3>
     cd0:	0e 94 03 13 	call	0x2606	; 0x2606 <__fixsfsi>
     cd4:	7f 93       	push	r23
     cd6:	6f 93       	push	r22
     cd8:	7f 92       	push	r7
     cda:	6f 92       	push	r6
     cdc:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <hd44780_printf>
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	88 e0       	ldi	r24, 0x08	; 8
     ce4:	0e 94 ed 02 	call	0x5da	; 0x5da <hd44780_setCursor>
     ce8:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <decimal>
     cec:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <decimal+0x1>
     cf0:	b7 01       	movw	r22, r14
     cf2:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
     cf6:	7f 93       	push	r23
     cf8:	6f 93       	push	r22
     cfa:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <mileage+0x1>
     cfe:	8f 93       	push	r24
     d00:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <mileage>
     d04:	8f 93       	push	r24
     d06:	df 92       	push	r13
     d08:	cf 92       	push	r12
     d0a:	b1 cf       	rjmp	.-158    	; 0xc6e <FuncDisplayTask+0xdc>

00000d0c <ButtonISR>:
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	82 e0       	ldi	r24, 0x02	; 2
     d12:	0c 94 16 0c 	jmp	0x182c	; 0x182c <SetEvent>

00000d16 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     d16:	1f 92       	push	r1
     d18:	0f 92       	push	r0
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	0f 92       	push	r0
     d1e:	11 24       	eor	r1, r1
     d20:	2f 93       	push	r18
     d22:	3f 93       	push	r19
     d24:	8f 93       	push	r24
     d26:	9f 93       	push	r25
     d28:	af 93       	push	r26
     d2a:	bf 93       	push	r27
     d2c:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <timer0_millis>
     d30:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <timer0_millis+0x1>
     d34:	a0 91 07 03 	lds	r26, 0x0307	; 0x800307 <timer0_millis+0x2>
     d38:	b0 91 08 03 	lds	r27, 0x0308	; 0x800308 <timer0_millis+0x3>
     d3c:	30 91 04 03 	lds	r19, 0x0304	; 0x800304 <timer0_fract>
     d40:	23 e0       	ldi	r18, 0x03	; 3
     d42:	23 0f       	add	r18, r19
     d44:	2d 37       	cpi	r18, 0x7D	; 125
     d46:	58 f5       	brcc	.+86     	; 0xd9e <__vector_16+0x88>
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	a1 1d       	adc	r26, r1
     d4c:	b1 1d       	adc	r27, r1
     d4e:	20 93 04 03 	sts	0x0304, r18	; 0x800304 <timer0_fract>
     d52:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <timer0_millis>
     d56:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <timer0_millis+0x1>
     d5a:	a0 93 07 03 	sts	0x0307, r26	; 0x800307 <timer0_millis+0x2>
     d5e:	b0 93 08 03 	sts	0x0308, r27	; 0x800308 <timer0_millis+0x3>
     d62:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <timer0_overflow_count>
     d66:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <timer0_overflow_count+0x1>
     d6a:	a0 91 0b 03 	lds	r26, 0x030B	; 0x80030b <timer0_overflow_count+0x2>
     d6e:	b0 91 0c 03 	lds	r27, 0x030C	; 0x80030c <timer0_overflow_count+0x3>
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	a1 1d       	adc	r26, r1
     d76:	b1 1d       	adc	r27, r1
     d78:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <timer0_overflow_count>
     d7c:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <timer0_overflow_count+0x1>
     d80:	a0 93 0b 03 	sts	0x030B, r26	; 0x80030b <timer0_overflow_count+0x2>
     d84:	b0 93 0c 03 	sts	0x030C, r27	; 0x80030c <timer0_overflow_count+0x3>
     d88:	bf 91       	pop	r27
     d8a:	af 91       	pop	r26
     d8c:	9f 91       	pop	r25
     d8e:	8f 91       	pop	r24
     d90:	3f 91       	pop	r19
     d92:	2f 91       	pop	r18
     d94:	0f 90       	pop	r0
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	0f 90       	pop	r0
     d9a:	1f 90       	pop	r1
     d9c:	18 95       	reti
     d9e:	26 e8       	ldi	r18, 0x86	; 134
     da0:	23 0f       	add	r18, r19
     da2:	02 96       	adiw	r24, 0x02	; 2
     da4:	a1 1d       	adc	r26, r1
     da6:	b1 1d       	adc	r27, r1
     da8:	d2 cf       	rjmp	.-92     	; 0xd4e <__vector_16+0x38>

00000daa <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     daa:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     dac:	f8 94       	cli
	m = timer0_overflow_count;
     dae:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <timer0_overflow_count>
     db2:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <timer0_overflow_count+0x1>
     db6:	a0 91 0b 03 	lds	r26, 0x030B	; 0x80030b <timer0_overflow_count+0x2>
     dba:	b0 91 0c 03 	lds	r27, 0x030C	; 0x80030c <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     dbe:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     dc0:	a8 9b       	sbis	0x15, 0	; 21
     dc2:	05 c0       	rjmp	.+10     	; 0xdce <micros+0x24>
     dc4:	2f 3f       	cpi	r18, 0xFF	; 255
     dc6:	19 f0       	breq	.+6      	; 0xdce <micros+0x24>
		m++;
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	a1 1d       	adc	r26, r1
     dcc:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     dce:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     dd0:	ba 2f       	mov	r27, r26
     dd2:	a9 2f       	mov	r26, r25
     dd4:	98 2f       	mov	r25, r24
     dd6:	88 27       	eor	r24, r24
     dd8:	bc 01       	movw	r22, r24
     dda:	cd 01       	movw	r24, r26
     ddc:	62 0f       	add	r22, r18
     dde:	71 1d       	adc	r23, r1
     de0:	81 1d       	adc	r24, r1
     de2:	91 1d       	adc	r25, r1
     de4:	42 e0       	ldi	r20, 0x02	; 2
     de6:	66 0f       	add	r22, r22
     de8:	77 1f       	adc	r23, r23
     dea:	88 1f       	adc	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	4a 95       	dec	r20
     df0:	d1 f7       	brne	.-12     	; 0xde6 <micros+0x3c>
}
     df2:	08 95       	ret

00000df4 <delay>:

void delay(unsigned long ms)
{
     df4:	8f 92       	push	r8
     df6:	9f 92       	push	r9
     df8:	af 92       	push	r10
     dfa:	bf 92       	push	r11
     dfc:	cf 92       	push	r12
     dfe:	df 92       	push	r13
     e00:	ef 92       	push	r14
     e02:	ff 92       	push	r15
     e04:	6b 01       	movw	r12, r22
     e06:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     e08:	0e 94 d5 06 	call	0xdaa	; 0xdaa <micros>
     e0c:	4b 01       	movw	r8, r22
     e0e:	5c 01       	movw	r10, r24

	while (ms > 0) {
     e10:	c1 14       	cp	r12, r1
     e12:	d1 04       	cpc	r13, r1
     e14:	e1 04       	cpc	r14, r1
     e16:	f1 04       	cpc	r15, r1
     e18:	e9 f0       	breq	.+58     	; 0xe54 <delay+0x60>
		yield();
     e1a:	0e 94 a5 0a 	call	0x154a	; 0x154a <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     e1e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <micros>
     e22:	68 19       	sub	r22, r8
     e24:	79 09       	sbc	r23, r9
     e26:	8a 09       	sbc	r24, r10
     e28:	9b 09       	sbc	r25, r11
     e2a:	68 3e       	cpi	r22, 0xE8	; 232
     e2c:	73 40       	sbci	r23, 0x03	; 3
     e2e:	81 05       	cpc	r24, r1
     e30:	91 05       	cpc	r25, r1
     e32:	70 f3       	brcs	.-36     	; 0xe10 <delay+0x1c>
			ms--;
     e34:	21 e0       	ldi	r18, 0x01	; 1
     e36:	c2 1a       	sub	r12, r18
     e38:	d1 08       	sbc	r13, r1
     e3a:	e1 08       	sbc	r14, r1
     e3c:	f1 08       	sbc	r15, r1
			start += 1000;
     e3e:	88 ee       	ldi	r24, 0xE8	; 232
     e40:	88 0e       	add	r8, r24
     e42:	83 e0       	ldi	r24, 0x03	; 3
     e44:	98 1e       	adc	r9, r24
     e46:	a1 1c       	adc	r10, r1
     e48:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     e4a:	c1 14       	cp	r12, r1
     e4c:	d1 04       	cpc	r13, r1
     e4e:	e1 04       	cpc	r14, r1
     e50:	f1 04       	cpc	r15, r1
     e52:	29 f7       	brne	.-54     	; 0xe1e <delay+0x2a>
			ms--;
			start += 1000;
		}
	}
}
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	df 90       	pop	r13
     e5a:	cf 90       	pop	r12
     e5c:	bf 90       	pop	r11
     e5e:	af 90       	pop	r10
     e60:	9f 90       	pop	r9
     e62:	8f 90       	pop	r8
     e64:	08 95       	ret

00000e66 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     e66:	82 30       	cpi	r24, 0x02	; 2
     e68:	91 05       	cpc	r25, r1
     e6a:	38 f0       	brcs	.+14     	; 0xe7a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     e74:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <delayMicroseconds+0x10>
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
	// return = 4 cycles
}
     e7a:	08 95       	ret

00000e7c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     e7c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     e7e:	84 b5       	in	r24, 0x24	; 36
     e80:	82 60       	ori	r24, 0x02	; 2
     e82:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     e84:	84 b5       	in	r24, 0x24	; 36
     e86:	81 60       	ori	r24, 0x01	; 1
     e88:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     e8a:	85 b5       	in	r24, 0x25	; 37
     e8c:	82 60       	ori	r24, 0x02	; 2
     e8e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     e90:	85 b5       	in	r24, 0x25	; 37
     e92:	81 60       	ori	r24, 0x01	; 1
     e94:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     e96:	ee e6       	ldi	r30, 0x6E	; 110
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	81 60       	ori	r24, 0x01	; 1
     e9e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     ea0:	e1 e8       	ldi	r30, 0x81	; 129
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     ea6:	80 81       	ld	r24, Z
     ea8:	82 60       	ori	r24, 0x02	; 2
     eaa:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     eac:	80 81       	ld	r24, Z
     eae:	81 60       	ori	r24, 0x01	; 1
     eb0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     eb2:	e0 e8       	ldi	r30, 0x80	; 128
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	81 60       	ori	r24, 0x01	; 1
     eba:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     ebc:	e1 eb       	ldi	r30, 0xB1	; 177
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	84 60       	ori	r24, 0x04	; 4
     ec4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     ec6:	e0 eb       	ldi	r30, 0xB0	; 176
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	81 60       	ori	r24, 0x01	; 1
     ece:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     ed0:	ea e7       	ldi	r30, 0x7A	; 122
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	84 60       	ori	r24, 0x04	; 4
     ed8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     eda:	80 81       	ld	r24, Z
     edc:	82 60       	ori	r24, 0x02	; 2
     ede:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     ee0:	80 81       	ld	r24, Z
     ee2:	81 60       	ori	r24, 0x01	; 1
     ee4:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     ee6:	80 81       	ld	r24, Z
     ee8:	80 68       	ori	r24, 0x80	; 128
     eea:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     eec:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
#endif
}
     ef0:	08 95       	ret

00000ef2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     ef2:	83 30       	cpi	r24, 0x03	; 3
     ef4:	81 f0       	breq	.+32     	; 0xf16 <turnOffPWM+0x24>
     ef6:	28 f4       	brcc	.+10     	; 0xf02 <turnOffPWM+0x10>
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	99 f0       	breq	.+38     	; 0xf22 <turnOffPWM+0x30>
     efc:	82 30       	cpi	r24, 0x02	; 2
     efe:	a9 f0       	breq	.+42     	; 0xf2a <turnOffPWM+0x38>
     f00:	08 95       	ret
     f02:	87 30       	cpi	r24, 0x07	; 7
     f04:	a9 f0       	breq	.+42     	; 0xf30 <turnOffPWM+0x3e>
     f06:	88 30       	cpi	r24, 0x08	; 8
     f08:	c9 f0       	breq	.+50     	; 0xf3c <turnOffPWM+0x4a>
     f0a:	84 30       	cpi	r24, 0x04	; 4
     f0c:	b1 f4       	brne	.+44     	; 0xf3a <turnOffPWM+0x48>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f0e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     f12:	8f 7d       	andi	r24, 0xDF	; 223
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     f16:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     f1a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     f1c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     f20:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     f22:	84 b5       	in	r24, 0x24	; 36
     f24:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     f26:	84 bd       	out	0x24, r24	; 36
     f28:	08 95       	ret
     f2a:	84 b5       	in	r24, 0x24	; 36
     f2c:	8f 7d       	andi	r24, 0xDF	; 223
     f2e:	fb cf       	rjmp	.-10     	; 0xf26 <turnOffPWM+0x34>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     f30:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     f34:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     f36:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
		#endif
	}
}
     f3a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     f3c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     f40:	8f 7d       	andi	r24, 0xDF	; 223
     f42:	f9 cf       	rjmp	.-14     	; 0xf36 <turnOffPWM+0x44>

00000f44 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	fc 01       	movw	r30, r24
     f4c:	e4 58       	subi	r30, 0x84	; 132
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     f52:	80 57       	subi	r24, 0x70	; 112
     f54:	9f 4f       	sbci	r25, 0xFF	; 255
     f56:	fc 01       	movw	r30, r24
     f58:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     f5a:	88 23       	and	r24, r24
     f5c:	c9 f0       	breq	.+50     	; 0xf90 <pinMode+0x4c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	fc 01       	movw	r30, r24
     f66:	e8 54       	subi	r30, 0x48	; 72
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	a5 91       	lpm	r26, Z+
     f6c:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
     f6e:	fc 01       	movw	r30, r24
     f70:	e2 55       	subi	r30, 0x52	; 82
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	c5 91       	lpm	r28, Z+
     f76:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
     f78:	61 11       	cpse	r22, r1
     f7a:	0d c0       	rjmp	.+26     	; 0xf96 <pinMode+0x52>
		uint8_t oldSREG = SREG;
     f7c:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f7e:	f8 94       	cli
		*reg &= ~bit;
     f80:	8c 91       	ld	r24, X
     f82:	20 95       	com	r18
     f84:	82 23       	and	r24, r18
     f86:	8c 93       	st	X, r24
		*out &= ~bit;
     f88:	88 81       	ld	r24, Y
     f8a:	28 23       	and	r18, r24
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out |= bit;
     f8c:	28 83       	st	Y, r18
		SREG = oldSREG;
     f8e:	9f bf       	out	0x3f, r25	; 63
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
		SREG = oldSREG;
	}
}
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	08 95       	ret
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
		*out &= ~bit;
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     f96:	62 30       	cpi	r22, 0x02	; 2
     f98:	51 f4       	brne	.+20     	; 0xfae <pinMode+0x6a>
		uint8_t oldSREG = SREG;
     f9a:	9f b7       	in	r25, 0x3f	; 63
                cli();
     f9c:	f8 94       	cli
		*reg &= ~bit;
     f9e:	3c 91       	ld	r19, X
     fa0:	82 2f       	mov	r24, r18
     fa2:	80 95       	com	r24
     fa4:	83 23       	and	r24, r19
     fa6:	8c 93       	st	X, r24
		*out |= bit;
     fa8:	e8 81       	ld	r30, Y
     faa:	2e 2b       	or	r18, r30
     fac:	ef cf       	rjmp	.-34     	; 0xf8c <pinMode+0x48>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
     fae:	8f b7       	in	r24, 0x3f	; 63
                cli();
     fb0:	f8 94       	cli
		*reg |= bit;
     fb2:	ec 91       	ld	r30, X
     fb4:	2e 2b       	or	r18, r30
     fb6:	2c 93       	st	X, r18
		SREG = oldSREG;
     fb8:	8f bf       	out	0x3f, r24	; 63
     fba:	ea cf       	rjmp	.-44     	; 0xf90 <pinMode+0x4c>

00000fbc <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	f9 01       	movw	r30, r18
     fc8:	e8 59       	subi	r30, 0x98	; 152
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     fce:	f9 01       	movw	r30, r18
     fd0:	e4 58       	subi	r30, 0x84	; 132
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     fd6:	f9 01       	movw	r30, r18
     fd8:	e0 57       	subi	r30, 0x70	; 112
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     fde:	cc 23       	and	r28, r28
     fe0:	a9 f0       	breq	.+42     	; 0x100c <digitalWrite+0x50>
     fe2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     fe4:	81 11       	cpse	r24, r1
     fe6:	0e 94 79 07 	call	0xef2	; 0xef2 <turnOffPWM>

	out = portOutputRegister(port);
     fea:	ec 2f       	mov	r30, r28
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	ee 0f       	add	r30, r30
     ff0:	ff 1f       	adc	r31, r31
     ff2:	e2 55       	subi	r30, 0x52	; 82
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	a5 91       	lpm	r26, Z+
     ff8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     ffa:	8f b7       	in	r24, 0x3f	; 63
	cli();
     ffc:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
     ffe:	ec 91       	ld	r30, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
    1000:	11 11       	cpse	r17, r1
    1002:	08 c0       	rjmp	.+16     	; 0x1014 <digitalWrite+0x58>
		*out &= ~bit;
    1004:	d0 95       	com	r29
    1006:	de 23       	and	r29, r30
	} else {
		*out |= bit;
    1008:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    100a:	8f bf       	out	0x3f, r24	; 63
}
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	08 95       	ret
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
    1014:	de 2b       	or	r29, r30
    1016:	f8 cf       	rjmp	.-16     	; 0x1008 <digitalWrite+0x4c>

00001018 <digitalRead>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	f9 01       	movw	r30, r18
    1022:	e8 59       	subi	r30, 0x98	; 152
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1028:	f9 01       	movw	r30, r18
    102a:	e4 58       	subi	r30, 0x84	; 132
    102c:	ff 4f       	sbci	r31, 0xFF	; 255
    102e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1030:	f9 01       	movw	r30, r18
    1032:	e0 57       	subi	r30, 0x70	; 112
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1038:	cc 23       	and	r28, r28
    103a:	a1 f0       	breq	.+40     	; 0x1064 <digitalRead+0x4c>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    103c:	81 11       	cpse	r24, r1
    103e:	0e 94 79 07 	call	0xef2	; 0xef2 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1042:	ec 2f       	mov	r30, r28
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	ee 0f       	add	r30, r30
    1048:	ff 1f       	adc	r31, r31
    104a:	ec 55       	subi	r30, 0x5C	; 92
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	a5 91       	lpm	r26, Z+
    1050:	b4 91       	lpm	r27, Z
    1052:	ec 91       	ld	r30, X
    1054:	ed 23       	and	r30, r29
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	09 f4       	brne	.+2      	; 0x105e <digitalRead+0x46>
    105c:	80 e0       	ldi	r24, 0x00	; 0
	return LOW;
}
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	08 95       	ret
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	fa cf       	rjmp	.-12     	; 0x105e <digitalRead+0x46>

0000106a <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    106a:	8e 30       	cpi	r24, 0x0E	; 14
    106c:	08 f0       	brcs	.+2      	; 0x1070 <analogRead+0x6>
    106e:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1070:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <analog_reference>
    1074:	90 e4       	ldi	r25, 0x40	; 64
    1076:	29 9f       	mul	r18, r25
    1078:	90 01       	movw	r18, r0
    107a:	11 24       	eor	r1, r1
    107c:	87 70       	andi	r24, 0x07	; 7
    107e:	82 2b       	or	r24, r18
    1080:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1084:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1088:	80 64       	ori	r24, 0x40	; 64
    108a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    108e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1092:	86 fd       	sbrc	r24, 6
    1094:	fc cf       	rjmp	.-8      	; 0x108e <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1096:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    109a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    109e:	08 95       	ret

000010a0 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	18 2f       	mov	r17, r24
    10a8:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    10aa:	61 e0       	ldi	r22, 0x01	; 1
    10ac:	0e 94 a2 07 	call	0xf44	; 0xf44 <pinMode>
	if (val == 0)
    10b0:	20 97       	sbiw	r28, 0x00	; 0
    10b2:	39 f4       	brne	.+14     	; 0x10c2 <analogWrite+0x22>
	{
		digitalWrite(pin, LOW);
    10b4:	60 e0       	ldi	r22, 0x00	; 0
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    10b6:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    10be:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <digitalWrite>
	pinMode(pin, OUTPUT);
	if (val == 0)
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    10c2:	cf 3f       	cpi	r28, 0xFF	; 255
    10c4:	d1 05       	cpc	r29, r1
    10c6:	11 f4       	brne	.+4      	; 0x10cc <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	f5 cf       	rjmp	.-22     	; 0x10b6 <analogWrite+0x16>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    10cc:	e1 2f       	mov	r30, r17
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	e8 59       	subi	r30, 0x98	; 152
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	e4 91       	lpm	r30, Z
    10d6:	e3 30       	cpi	r30, 0x03	; 3
    10d8:	31 f1       	breq	.+76     	; 0x1126 <analogWrite+0x86>
    10da:	40 f4       	brcc	.+16     	; 0x10ec <analogWrite+0x4c>
    10dc:	e1 30       	cpi	r30, 0x01	; 1
    10de:	b1 f0       	breq	.+44     	; 0x110c <analogWrite+0x6c>
    10e0:	e2 30       	cpi	r30, 0x02	; 2
    10e2:	e1 f0       	breq	.+56     	; 0x111c <analogWrite+0x7c>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    10e4:	c0 38       	cpi	r28, 0x80	; 128
    10e6:	d1 05       	cpc	r29, r1
    10e8:	7c f7       	brge	.-34     	; 0x10c8 <analogWrite+0x28>
    10ea:	e4 cf       	rjmp	.-56     	; 0x10b4 <analogWrite+0x14>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    10ec:	e7 30       	cpi	r30, 0x07	; 7
    10ee:	29 f1       	breq	.+74     	; 0x113a <analogWrite+0x9a>
    10f0:	e8 30       	cpi	r30, 0x08	; 8
    10f2:	59 f1       	breq	.+86     	; 0x114a <analogWrite+0xaa>
    10f4:	e4 30       	cpi	r30, 0x04	; 4
    10f6:	b1 f7       	brne	.-20     	; 0x10e4 <analogWrite+0x44>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    10f8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    10fc:	80 62       	ori	r24, 0x20	; 32
    10fe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1B = val; // set pwm duty
    1102:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    1106:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
				break;
    110a:	04 c0       	rjmp	.+8      	; 0x1114 <analogWrite+0x74>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    110c:	84 b5       	in	r24, 0x24	; 36
    110e:	80 68       	ori	r24, 0x80	; 128
    1110:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    1112:	c7 bd       	out	0x27, r28	; 39
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	08 95       	ret
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    111c:	84 b5       	in	r24, 0x24	; 36
    111e:	80 62       	ori	r24, 0x20	; 32
    1120:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    1122:	c8 bd       	out	0x28, r28	; 40
				break;
    1124:	f7 cf       	rjmp	.-18     	; 0x1114 <analogWrite+0x74>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    1126:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    112a:	80 68       	ori	r24, 0x80	; 128
    112c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1A = val; // set pwm duty
    1130:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1134:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
				break;
    1138:	ed cf       	rjmp	.-38     	; 0x1114 <analogWrite+0x74>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    113a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    113e:	80 68       	ori	r24, 0x80	; 128
    1140:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
				OCR2A = val; // set pwm duty
    1144:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
				break;
    1148:	e5 cf       	rjmp	.-54     	; 0x1114 <analogWrite+0x74>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    114a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    114e:	80 62       	ori	r24, 0x20	; 32
    1150:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
				OCR2B = val; // set pwm duty
    1154:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
				break;
    1158:	dd cf       	rjmp	.-70     	; 0x1114 <analogWrite+0x74>

0000115a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    115a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    115c:	91 8d       	ldd	r25, Z+25	; 0x19
    115e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1160:	89 2f       	mov	r24, r25
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	80 5c       	subi	r24, 0xC0	; 192
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	82 1b       	sub	r24, r18
    116a:	91 09       	sbc	r25, r1
}
    116c:	8f 73       	andi	r24, 0x3F	; 63
    116e:	99 27       	eor	r25, r25
    1170:	08 95       	ret

00001172 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1172:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1174:	91 8d       	ldd	r25, Z+25	; 0x19
    1176:	82 8d       	ldd	r24, Z+26	; 0x1a
    1178:	98 17       	cp	r25, r24
    117a:	31 f0       	breq	.+12     	; 0x1188 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    117c:	82 8d       	ldd	r24, Z+26	; 0x1a
    117e:	e8 0f       	add	r30, r24
    1180:	f1 1d       	adc	r31, r1
    1182:	85 8d       	ldd	r24, Z+29	; 0x1d
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1188:	8f ef       	ldi	r24, 0xFF	; 255
    118a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    118c:	08 95       	ret

0000118e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    118e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1190:	91 8d       	ldd	r25, Z+25	; 0x19
    1192:	82 8d       	ldd	r24, Z+26	; 0x1a
    1194:	98 17       	cp	r25, r24
    1196:	61 f0       	breq	.+24     	; 0x11b0 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1198:	a2 8d       	ldd	r26, Z+26	; 0x1a
    119a:	ae 0f       	add	r26, r30
    119c:	bf 2f       	mov	r27, r31
    119e:	b1 1d       	adc	r27, r1
    11a0:	5d 96       	adiw	r26, 0x1d	; 29
    11a2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    11a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    11a6:	9f 5f       	subi	r25, 0xFF	; 255
    11a8:	9f 73       	andi	r25, 0x3F	; 63
    11aa:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    11b0:	8f ef       	ldi	r24, 0xFF	; 255
    11b2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    11b4:	08 95       	ret

000011b6 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    11b6:	fc 01       	movw	r30, r24
    11b8:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
    11ba:	44 8d       	ldd	r20, Z+28	; 0x1c
    11bc:	25 2f       	mov	r18, r21
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	84 2f       	mov	r24, r20
    11c2:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    11c4:	82 1b       	sub	r24, r18
    11c6:	93 0b       	sbc	r25, r19
    11c8:	54 17       	cp	r21, r20
    11ca:	10 f0       	brcs	.+4      	; 0x11d0 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    11cc:	cf 96       	adiw	r24, 0x3f	; 63
    11ce:	08 95       	ret
  return tail - head - 1;
    11d0:	01 97       	sbiw	r24, 0x01	; 1
}
    11d2:	08 95       	ret

000011d4 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    11d4:	81 e4       	ldi	r24, 0x41	; 65
    11d6:	9a e0       	ldi	r25, 0x0A	; 10
    11d8:	89 2b       	or	r24, r25
    11da:	49 f0       	breq	.+18     	; 0x11ee <_Z14serialEventRunv+0x1a>
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	89 2b       	or	r24, r25
    11e2:	29 f0       	breq	.+10     	; 0x11ee <_Z14serialEventRunv+0x1a>
    11e4:	0e 94 41 0a 	call	0x1482	; 0x1482 <_Z17Serial0_availablev>
    11e8:	81 11       	cpse	r24, r1
    11ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    11ee:	08 95       	ret

000011f0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    11f0:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    11f2:	a4 8d       	ldd	r26, Z+28	; 0x1c
    11f4:	a8 0f       	add	r26, r24
    11f6:	b9 2f       	mov	r27, r25
    11f8:	b1 1d       	adc	r27, r1
    11fa:	a3 5a       	subi	r26, 0xA3	; 163
    11fc:	bf 4f       	sbci	r27, 0xFF	; 255
    11fe:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1200:	84 8d       	ldd	r24, Z+28	; 0x1c
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	8f 73       	andi	r24, 0x3F	; 63
    1208:	99 27       	eor	r25, r25
    120a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    120c:	a6 89       	ldd	r26, Z+22	; 0x16
    120e:	b7 89       	ldd	r27, Z+23	; 0x17
    1210:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1212:	a0 89       	ldd	r26, Z+16	; 0x10
    1214:	b1 89       	ldd	r27, Z+17	; 0x11
    1216:	8c 91       	ld	r24, X
    1218:	83 70       	andi	r24, 0x03	; 3
    121a:	80 64       	ori	r24, 0x40	; 64
    121c:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    121e:	93 8d       	ldd	r25, Z+27	; 0x1b
    1220:	84 8d       	ldd	r24, Z+28	; 0x1c
    1222:	98 13       	cpse	r25, r24
    1224:	06 c0       	rjmp	.+12     	; 0x1232 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1226:	02 88       	ldd	r0, Z+18	; 0x12
    1228:	f3 89       	ldd	r31, Z+19	; 0x13
    122a:	e0 2d       	mov	r30, r0
    122c:	80 81       	ld	r24, Z
    122e:	8f 7d       	andi	r24, 0xDF	; 223
    1230:	80 83       	st	Z, r24
  }
}
    1232:	08 95       	ret

00001234 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    123a:	88 8d       	ldd	r24, Y+24	; 0x18
    123c:	88 23       	and	r24, r24
    123e:	b9 f0       	breq	.+46     	; 0x126e <_ZN14HardwareSerial5flushEv+0x3a>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1240:	aa 89       	ldd	r26, Y+18	; 0x12
    1242:	bb 89       	ldd	r27, Y+19	; 0x13
    1244:	e8 89       	ldd	r30, Y+16	; 0x10
    1246:	f9 89       	ldd	r31, Y+17	; 0x11
    1248:	8c 91       	ld	r24, X
    124a:	85 fd       	sbrc	r24, 5
    124c:	03 c0       	rjmp	.+6      	; 0x1254 <_ZN14HardwareSerial5flushEv+0x20>
    124e:	80 81       	ld	r24, Z
    1250:	86 fd       	sbrc	r24, 6
    1252:	0d c0       	rjmp	.+26     	; 0x126e <_ZN14HardwareSerial5flushEv+0x3a>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	07 fc       	sbrc	r0, 7
    1258:	f7 cf       	rjmp	.-18     	; 0x1248 <_ZN14HardwareSerial5flushEv+0x14>
    125a:	8c 91       	ld	r24, X
    125c:	85 ff       	sbrs	r24, 5
    125e:	f2 cf       	rjmp	.-28     	; 0x1244 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1260:	80 81       	ld	r24, Z
    1262:	85 ff       	sbrs	r24, 5
    1264:	ed cf       	rjmp	.-38     	; 0x1240 <_ZN14HardwareSerial5flushEv+0xc>
	  _tx_udr_empty_irq();
    1266:	ce 01       	movw	r24, r28
    1268:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    126c:	e9 cf       	rjmp	.-46     	; 0x1240 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	08 95       	ret

00001274 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1274:	ef 92       	push	r14
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	ec 01       	movw	r28, r24
  _written = true;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1286:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1288:	8c 8d       	ldd	r24, Y+28	; 0x1c
    128a:	98 13       	cpse	r25, r24
    128c:	1a c0       	rjmp	.+52     	; 0x12c2 <_ZN14HardwareSerial5writeEh+0x4e>
    128e:	e8 89       	ldd	r30, Y+16	; 0x10
    1290:	f9 89       	ldd	r31, Y+17	; 0x11
    1292:	80 81       	ld	r24, Z
    1294:	85 ff       	sbrs	r24, 5
    1296:	15 c0       	rjmp	.+42     	; 0x12c2 <_ZN14HardwareSerial5writeEh+0x4e>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1298:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    129a:	f8 94       	cli
      *_udr = c;
    129c:	ee 89       	ldd	r30, Y+22	; 0x16
    129e:	ff 89       	ldd	r31, Y+23	; 0x17
    12a0:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    12a2:	e8 89       	ldd	r30, Y+16	; 0x10
    12a4:	f9 89       	ldd	r31, Y+17	; 0x11
    12a6:	80 81       	ld	r24, Z
    12a8:	83 70       	andi	r24, 0x03	; 3
    12aa:	80 64       	ori	r24, 0x40	; 64
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
    12ac:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    12ae:	9f bf       	out	0x3f, r25	; 63
  }
  
  return 1;
}
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	ff 90       	pop	r15
    12be:	ef 90       	pop	r14
    12c0:	08 95       	ret
    12c2:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    12c4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    12c6:	10 e0       	ldi	r17, 0x00	; 0
    12c8:	0f 5f       	subi	r16, 0xFF	; 255
    12ca:	1f 4f       	sbci	r17, 0xFF	; 255
    12cc:	0f 73       	andi	r16, 0x3F	; 63
    12ce:	11 27       	eor	r17, r17
    12d0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    12d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12d4:	8e 11       	cpse	r24, r14
    12d6:	0c c0       	rjmp	.+24     	; 0x12f0 <_ZN14HardwareSerial5writeEh+0x7c>
    if (bit_is_clear(SREG, SREG_I)) {
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	07 fc       	sbrc	r0, 7
    12dc:	fa cf       	rjmp	.-12     	; 0x12d2 <_ZN14HardwareSerial5writeEh+0x5e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    12de:	e8 89       	ldd	r30, Y+16	; 0x10
    12e0:	f9 89       	ldd	r31, Y+17	; 0x11
    12e2:	80 81       	ld	r24, Z
    12e4:	85 ff       	sbrs	r24, 5
    12e6:	f5 cf       	rjmp	.-22     	; 0x12d2 <_ZN14HardwareSerial5writeEh+0x5e>
	_tx_udr_empty_irq();
    12e8:	ce 01       	movw	r24, r28
    12ea:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    12ee:	f1 cf       	rjmp	.-30     	; 0x12d2 <_ZN14HardwareSerial5writeEh+0x5e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    12f0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    12f2:	ec 0f       	add	r30, r28
    12f4:	fd 2f       	mov	r31, r29
    12f6:	f1 1d       	adc	r31, r1
    12f8:	e3 5a       	subi	r30, 0xA3	; 163
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    12fe:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1300:	f8 94       	cli
    _tx_buffer_head = i;
    1302:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
    1304:	ea 89       	ldd	r30, Y+18	; 0x12
    1306:	fb 89       	ldd	r31, Y+19	; 0x13
    1308:	80 81       	ld	r24, Z
    130a:	80 62       	ori	r24, 0x20	; 32
    130c:	cf cf       	rjmp	.-98     	; 0x12ac <_ZN14HardwareSerial5writeEh+0x38>

0000130e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    130e:	cf 92       	push	r12
    1310:	df 92       	push	r13
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	ec 01       	movw	r28, r24
    131e:	6a 01       	movw	r12, r20
    1320:	7b 01       	movw	r14, r22
    1322:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1324:	e8 89       	ldd	r30, Y+16	; 0x10
    1326:	f9 89       	ldd	r31, Y+17	; 0x11
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    132c:	c1 14       	cp	r12, r1
    132e:	81 ee       	ldi	r24, 0xE1	; 225
    1330:	d8 06       	cpc	r13, r24
    1332:	e1 04       	cpc	r14, r1
    1334:	f1 04       	cpc	r15, r1
    1336:	a1 f0       	breq	.+40     	; 0x1360 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	79 e0       	ldi	r23, 0x09	; 9
    133c:	8d e3       	ldi	r24, 0x3D	; 61
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	a7 01       	movw	r20, r14
    1342:	96 01       	movw	r18, r12
    1344:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__udivmodsi4>
    1348:	21 50       	subi	r18, 0x01	; 1
    134a:	31 09       	sbc	r19, r1
    134c:	41 09       	sbc	r20, r1
    134e:	51 09       	sbc	r21, r1
    1350:	56 95       	lsr	r21
    1352:	47 95       	ror	r20
    1354:	37 95       	ror	r19
    1356:	27 95       	ror	r18
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1358:	21 15       	cp	r18, r1
    135a:	80 e1       	ldi	r24, 0x10	; 16
    135c:	38 07       	cpc	r19, r24
    135e:	98 f0       	brcs	.+38     	; 0x1386 <_ZN14HardwareSerial5beginEmh+0x78>
  {
    *_ucsra = 0;
    1360:	e8 89       	ldd	r30, Y+16	; 0x10
    1362:	f9 89       	ldd	r31, Y+17	; 0x11
    1364:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1366:	60 e8       	ldi	r22, 0x80	; 128
    1368:	74 e8       	ldi	r23, 0x84	; 132
    136a:	8e e1       	ldi	r24, 0x1E	; 30
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	a7 01       	movw	r20, r14
    1370:	96 01       	movw	r18, r12
    1372:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__udivmodsi4>
    1376:	21 50       	subi	r18, 0x01	; 1
    1378:	31 09       	sbc	r19, r1
    137a:	41 09       	sbc	r20, r1
    137c:	51 09       	sbc	r21, r1
    137e:	56 95       	lsr	r21
    1380:	47 95       	ror	r20
    1382:	37 95       	ror	r19
    1384:	27 95       	ror	r18
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1386:	ec 85       	ldd	r30, Y+12	; 0x0c
    1388:	fd 85       	ldd	r31, Y+13	; 0x0d
    138a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    138c:	ee 85       	ldd	r30, Y+14	; 0x0e
    138e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1390:	20 83       	st	Z, r18

  _written = false;
    1392:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1394:	ec 89       	ldd	r30, Y+20	; 0x14
    1396:	fd 89       	ldd	r31, Y+21	; 0x15
    1398:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    139a:	ea 89       	ldd	r30, Y+18	; 0x12
    139c:	fb 89       	ldd	r31, Y+19	; 0x13
    139e:	80 81       	ld	r24, Z
    13a0:	80 61       	ori	r24, 0x10	; 16
    13a2:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    13a4:	ea 89       	ldd	r30, Y+18	; 0x12
    13a6:	fb 89       	ldd	r31, Y+19	; 0x13
    13a8:	80 81       	ld	r24, Z
    13aa:	88 60       	ori	r24, 0x08	; 8
    13ac:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    13ae:	ea 89       	ldd	r30, Y+18	; 0x12
    13b0:	fb 89       	ldd	r31, Y+19	; 0x13
    13b2:	80 81       	ld	r24, Z
    13b4:	80 68       	ori	r24, 0x80	; 128
    13b6:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    13b8:	ea 89       	ldd	r30, Y+18	; 0x12
    13ba:	fb 89       	ldd	r31, Y+19	; 0x13
    13bc:	80 81       	ld	r24, Z
    13be:	8f 7d       	andi	r24, 0xDF	; 223
    13c0:	80 83       	st	Z, r24
}
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	ff 90       	pop	r15
    13ca:	ef 90       	pop	r14
    13cc:	df 90       	pop	r13
    13ce:	cf 90       	pop	r12
    13d0:	08 95       	ret

000013d2 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    13d2:	1f 92       	push	r1
    13d4:	0f 92       	push	r0
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	0f 92       	push	r0
    13da:	11 24       	eor	r1, r1
    13dc:	2f 93       	push	r18
    13de:	8f 93       	push	r24
    13e0:	9f 93       	push	r25
    13e2:	ef 93       	push	r30
    13e4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    13e6:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <Serial+0x10>
    13ea:	f0 91 1e 03 	lds	r31, 0x031E	; 0x80031e <Serial+0x11>
    13ee:	80 81       	ld	r24, Z
    13f0:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <Serial+0x16>
    13f4:	f0 91 24 03 	lds	r31, 0x0324	; 0x800324 <Serial+0x17>
    13f8:	82 fd       	sbrc	r24, 2
    13fa:	1b c0       	rjmp	.+54     	; 0x1432 <__vector_18+0x60>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    13fc:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    13fe:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <Serial+0x19>
    1402:	8f 5f       	subi	r24, 0xFF	; 255
    1404:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1406:	20 91 27 03 	lds	r18, 0x0327	; 0x800327 <Serial+0x1a>
    140a:	82 17       	cp	r24, r18
    140c:	41 f0       	breq	.+16     	; 0x141e <__vector_18+0x4c>
      _rx_buffer[_rx_buffer_head] = c;
    140e:	e0 91 26 03 	lds	r30, 0x0326	; 0x800326 <Serial+0x19>
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	e3 5f       	subi	r30, 0xF3	; 243
    1416:	fc 4f       	sbci	r31, 0xFC	; 252
    1418:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    141a:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <Serial+0x19>
    Serial._rx_complete_irq();
  }
    141e:	ff 91       	pop	r31
    1420:	ef 91       	pop	r30
    1422:	9f 91       	pop	r25
    1424:	8f 91       	pop	r24
    1426:	2f 91       	pop	r18
    1428:	0f 90       	pop	r0
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	0f 90       	pop	r0
    142e:	1f 90       	pop	r1
    1430:	18 95       	reti
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1432:	80 81       	ld	r24, Z
    1434:	f4 cf       	rjmp	.-24     	; 0x141e <__vector_18+0x4c>

00001436 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1436:	1f 92       	push	r1
    1438:	0f 92       	push	r0
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	0f 92       	push	r0
    143e:	11 24       	eor	r1, r1
    1440:	2f 93       	push	r18
    1442:	3f 93       	push	r19
    1444:	4f 93       	push	r20
    1446:	5f 93       	push	r21
    1448:	6f 93       	push	r22
    144a:	7f 93       	push	r23
    144c:	8f 93       	push	r24
    144e:	9f 93       	push	r25
    1450:	af 93       	push	r26
    1452:	bf 93       	push	r27
    1454:	ef 93       	push	r30
    1456:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    1458:	8d e0       	ldi	r24, 0x0D	; 13
    145a:	93 e0       	ldi	r25, 0x03	; 3
    145c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1460:	ff 91       	pop	r31
    1462:	ef 91       	pop	r30
    1464:	bf 91       	pop	r27
    1466:	af 91       	pop	r26
    1468:	9f 91       	pop	r25
    146a:	8f 91       	pop	r24
    146c:	7f 91       	pop	r23
    146e:	6f 91       	pop	r22
    1470:	5f 91       	pop	r21
    1472:	4f 91       	pop	r20
    1474:	3f 91       	pop	r19
    1476:	2f 91       	pop	r18
    1478:	0f 90       	pop	r0
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	0f 90       	pop	r0
    147e:	1f 90       	pop	r1
    1480:	18 95       	reti

00001482 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1482:	8d e0       	ldi	r24, 0x0D	; 13
    1484:	93 e0       	ldi	r25, 0x03	; 3
    1486:	0e 94 ad 08 	call	0x115a	; 0x115a <_ZN14HardwareSerial9availableEv>
    148a:	21 e0       	ldi	r18, 0x01	; 1
    148c:	89 2b       	or	r24, r25
    148e:	09 f4       	brne	.+2      	; 0x1492 <_Z17Serial0_availablev+0x10>
    1490:	20 e0       	ldi	r18, 0x00	; 0
}
    1492:	82 2f       	mov	r24, r18
    1494:	08 95       	ret

00001496 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1496:	ed e0       	ldi	r30, 0x0D	; 13
    1498:	f3 e0       	ldi	r31, 0x03	; 3
    149a:	13 82       	std	Z+3, r1	; 0x03
    149c:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    149e:	88 ee       	ldi	r24, 0xE8	; 232
    14a0:	93 e0       	ldi	r25, 0x03	; 3
    14a2:	a0 e0       	ldi	r26, 0x00	; 0
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	84 83       	std	Z+4, r24	; 0x04
    14a8:	95 83       	std	Z+5, r25	; 0x05
    14aa:	a6 83       	std	Z+6, r26	; 0x06
    14ac:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    14ae:	8e eb       	ldi	r24, 0xBE	; 190
    14b0:	92 e0       	ldi	r25, 0x02	; 2
    14b2:	91 83       	std	Z+1, r25	; 0x01
    14b4:	80 83       	st	Z, r24
    14b6:	85 ec       	ldi	r24, 0xC5	; 197
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	95 87       	std	Z+13, r25	; 0x0d
    14bc:	84 87       	std	Z+12, r24	; 0x0c
    14be:	84 ec       	ldi	r24, 0xC4	; 196
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	97 87       	std	Z+15, r25	; 0x0f
    14c4:	86 87       	std	Z+14, r24	; 0x0e
    14c6:	80 ec       	ldi	r24, 0xC0	; 192
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	91 8b       	std	Z+17, r25	; 0x11
    14cc:	80 8b       	std	Z+16, r24	; 0x10
    14ce:	81 ec       	ldi	r24, 0xC1	; 193
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	93 8b       	std	Z+19, r25	; 0x13
    14d4:	82 8b       	std	Z+18, r24	; 0x12
    14d6:	82 ec       	ldi	r24, 0xC2	; 194
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	95 8b       	std	Z+21, r25	; 0x15
    14dc:	84 8b       	std	Z+20, r24	; 0x14
    14de:	86 ec       	ldi	r24, 0xC6	; 198
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	97 8b       	std	Z+23, r25	; 0x17
    14e4:	86 8b       	std	Z+22, r24	; 0x16
    14e6:	11 8e       	std	Z+25, r1	; 0x19
    14e8:	12 8e       	std	Z+26, r1	; 0x1a
    14ea:	13 8e       	std	Z+27, r1	; 0x1b
    14ec:	14 8e       	std	Z+28, r1	; 0x1c
    14ee:	08 95       	ret

000014f0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    14f0:	af 92       	push	r10
    14f2:	bf 92       	push	r11
    14f4:	cf 92       	push	r12
    14f6:	df 92       	push	r13
    14f8:	ef 92       	push	r14
    14fa:	ff 92       	push	r15
    14fc:	0f 93       	push	r16
    14fe:	1f 93       	push	r17
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	6c 01       	movw	r12, r24
    1506:	7b 01       	movw	r14, r22
    1508:	8b 01       	movw	r16, r22
    150a:	04 0f       	add	r16, r20
    150c:	15 1f       	adc	r17, r21
    150e:	eb 01       	movw	r28, r22
    1510:	5e 01       	movw	r10, r28
    1512:	ae 18       	sub	r10, r14
    1514:	bf 08       	sbc	r11, r15
  size_t n = 0;
  while (size--) {
    1516:	c0 17       	cp	r28, r16
    1518:	d1 07       	cpc	r29, r17
    151a:	59 f0       	breq	.+22     	; 0x1532 <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
    151c:	69 91       	ld	r22, Y+
    151e:	d6 01       	movw	r26, r12
    1520:	ed 91       	ld	r30, X+
    1522:	fc 91       	ld	r31, X
    1524:	01 90       	ld	r0, Z+
    1526:	f0 81       	ld	r31, Z
    1528:	e0 2d       	mov	r30, r0
    152a:	c6 01       	movw	r24, r12
    152c:	09 95       	icall
    152e:	89 2b       	or	r24, r25
    1530:	79 f7       	brne	.-34     	; 0x1510 <_ZN5Print5writeEPKhj+0x20>
    else break;
  }
  return n;
}
    1532:	c5 01       	movw	r24, r10
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	ff 90       	pop	r15
    153e:	ef 90       	pop	r14
    1540:	df 90       	pop	r13
    1542:	cf 90       	pop	r12
    1544:	bf 90       	pop	r11
    1546:	af 90       	pop	r10
    1548:	08 95       	ret

0000154a <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
    154a:	08 95       	ret

0000154c <osEE_check_disableint>:
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetAlarmBase);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
    154c:	fc 01       	movw	r30, r24
    154e:	87 85       	ldd	r24, Z+15	; 0x0f
    1550:	81 11       	cpse	r24, r1
    1552:	0b c0       	rjmp	.+22     	; 0x156a <osEE_check_disableint+0x1e>
    1554:	80 89       	ldd	r24, Z+16	; 0x10
    1556:	81 11       	cpse	r24, r1
    1558:	08 c0       	rjmp	.+16     	; 0x156a <osEE_check_disableint+0x1e>
    155a:	21 e0       	ldi	r18, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	81 89       	ldd	r24, Z+17	; 0x11
    1560:	81 11       	cpse	r24, r1
    1562:	01 c0       	rjmp	.+2      	; 0x1566 <osEE_check_disableint+0x1a>
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	82 2f       	mov	r24, r18
    1568:	08 95       	ret
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	08 95       	ret

00001570 <StartOS>:
    1570:	4f 92       	push	r4
    1572:	5f 92       	push	r5
    1574:	6f 92       	push	r6
    1576:	7f 92       	push	r7
    1578:	8f 92       	push	r8
    157a:	9f 92       	push	r9
    157c:	af 92       	push	r10
    157e:	bf 92       	push	r11
    1580:	cf 92       	push	r12
    1582:	df 92       	push	r13
    1584:	ef 92       	push	r14
    1586:	ff 92       	push	r15
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	00 d0       	rcall	.+0      	; 0x1592 <StartOS+0x22>
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <CDB>
    159a:	10 91 cb 01 	lds	r17, 0x01CB	; 0x8001cb <CDB+0x1>
    159e:	9f b7       	in	r25, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	d8 01       	movw	r26, r16
    15a4:	18 96       	adiw	r26, 0x08	; 8
    15a6:	2d 91       	ld	r18, X+
    15a8:	3c 91       	ld	r19, X
    15aa:	23 2b       	or	r18, r19
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <StartOS+0x40>
    15ae:	a6 c0       	rjmp	.+332    	; 0x16fc <StartOS+0x18c>
    15b0:	88 2e       	mov	r8, r24
    15b2:	8a ee       	ldi	r24, 0xEA	; 234
    15b4:	9f e0       	ldi	r25, 0x0F	; 15
    15b6:	9a 83       	std	Y+2, r25	; 0x02
    15b8:	89 83       	std	Y+1, r24	; 0x01
    15ba:	0e 94 32 10 	call	0x2064	; 0x2064 <osEE_avr8_system_timer_init>
    15be:	a0 90 ce 01 	lds	r10, 0x01CE	; 0x8001ce <CDB+0x4>
    15c2:	b0 90 cf 01 	lds	r11, 0x01CF	; 0x8001cf <CDB+0x5>
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	f8 01       	movw	r30, r16
    15cc:	91 87       	std	Z+9, r25	; 0x09
    15ce:	80 87       	std	Z+8, r24	; 0x08
    15d0:	82 86       	std	Z+10, r8	; 0x0a
    15d2:	0e 94 b9 01 	call	0x372	; 0x372 <StartupHook>
    15d6:	e0 90 d6 01 	lds	r14, 0x01D6	; 0x8001d6 <CDB+0xc>
    15da:	f0 90 d7 01 	lds	r15, 0x01D7	; 0x8001d7 <CDB+0xd>
    15de:	d1 2c       	mov	r13, r1
    15e0:	c1 2c       	mov	r12, r1
    15e2:	f4 e0       	ldi	r31, 0x04	; 4
    15e4:	8f 9e       	mul	r8, r31
    15e6:	40 01       	movw	r8, r0
    15e8:	11 24       	eor	r1, r1
    15ea:	e8 0c       	add	r14, r8
    15ec:	f9 1c       	adc	r15, r9
    15ee:	37 01       	movw	r6, r14
    15f0:	82 e0       	ldi	r24, 0x02	; 2
    15f2:	68 0e       	add	r6, r24
    15f4:	71 1c       	adc	r7, r1
    15f6:	46 e0       	ldi	r20, 0x06	; 6
    15f8:	54 2e       	mov	r5, r20
    15fa:	f3 01       	movw	r30, r6
    15fc:	80 81       	ld	r24, Z
    15fe:	91 81       	ldd	r25, Z+1	; 0x01
    1600:	c8 16       	cp	r12, r24
    1602:	d9 06       	cpc	r13, r25
    1604:	e0 f1       	brcs	.+120    	; 0x167e <StartOS+0x10e>
    1606:	e0 90 d2 01 	lds	r14, 0x01D2	; 0x8001d2 <CDB+0x8>
    160a:	f0 90 d3 01 	lds	r15, 0x01D3	; 0x8001d3 <CDB+0x9>
    160e:	38 01       	movw	r6, r16
    1610:	f2 e0       	ldi	r31, 0x02	; 2
    1612:	6f 0e       	add	r6, r31
    1614:	71 1c       	adc	r7, r1
    1616:	d1 2c       	mov	r13, r1
    1618:	c1 2c       	mov	r12, r1
    161a:	e8 0c       	add	r14, r8
    161c:	f9 1c       	adc	r15, r9
    161e:	27 01       	movw	r4, r14
    1620:	82 e0       	ldi	r24, 0x02	; 2
    1622:	48 0e       	add	r4, r24
    1624:	51 1c       	adc	r5, r1
    1626:	88 24       	eor	r8, r8
    1628:	83 94       	inc	r8
    162a:	91 2c       	mov	r9, r1
    162c:	f2 01       	movw	r30, r4
    162e:	80 81       	ld	r24, Z
    1630:	91 81       	ldd	r25, Z+1	; 0x01
    1632:	c8 16       	cp	r12, r24
    1634:	d9 06       	cpc	r13, r25
    1636:	e8 f1       	brcs	.+122    	; 0x16b2 <StartOS+0x142>
    1638:	d8 01       	movw	r26, r16
    163a:	18 96       	adiw	r26, 0x08	; 8
    163c:	8d 91       	ld	r24, X+
    163e:	9c 91       	ld	r25, X
    1640:	19 97       	sbiw	r26, 0x09	; 9
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	31 f4       	brne	.+12     	; 0x1652 <StartOS+0xe2>
    1646:	82 e0       	ldi	r24, 0x02	; 2
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	19 96       	adiw	r26, 0x09	; 9
    164c:	9c 93       	st	X, r25
    164e:	8e 93       	st	-X, r24
    1650:	18 97       	sbiw	r26, 0x08	; 8
    1652:	f8 01       	movw	r30, r16
    1654:	80 85       	ldd	r24, Z+8	; 0x08
    1656:	91 85       	ldd	r25, Z+9	; 0x09
    1658:	02 97       	sbiw	r24, 0x02	; 2
    165a:	41 f4       	brne	.+16     	; 0x166c <StartOS+0xfc>
    165c:	d5 01       	movw	r26, r10
    165e:	12 96       	adiw	r26, 0x02	; 2
    1660:	6d 91       	ld	r22, X+
    1662:	7c 91       	ld	r23, X
    1664:	ab 01       	movw	r20, r22
    1666:	c5 01       	movw	r24, r10
    1668:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <osEE_hal_save_ctx_and_ready2stacked>
    166c:	f8 01       	movw	r30, r16
    166e:	80 85       	ldd	r24, Z+8	; 0x08
    1670:	91 85       	ldd	r25, Z+9	; 0x09
    1672:	02 97       	sbiw	r24, 0x02	; 2
    1674:	09 f4       	brne	.+2      	; 0x1678 <StartOS+0x108>
    1676:	78 94       	sei
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	42 c0       	rjmp	.+132    	; 0x1702 <StartOS+0x192>
    167e:	d7 01       	movw	r26, r14
    1680:	ed 91       	ld	r30, X+
    1682:	fc 91       	ld	r31, X
    1684:	5c 9c       	mul	r5, r12
    1686:	c0 01       	movw	r24, r0
    1688:	5d 9c       	mul	r5, r13
    168a:	90 0d       	add	r25, r0
    168c:	11 24       	eor	r1, r1
    168e:	e8 0f       	add	r30, r24
    1690:	f9 1f       	adc	r31, r25
    1692:	a0 81       	ld	r26, Z
    1694:	b1 81       	ldd	r27, Z+1	; 0x01
    1696:	24 81       	ldd	r18, Z+4	; 0x04
    1698:	35 81       	ldd	r19, Z+5	; 0x05
    169a:	42 81       	ldd	r20, Z+2	; 0x02
    169c:	53 81       	ldd	r21, Z+3	; 0x03
    169e:	bd 01       	movw	r22, r26
    16a0:	12 96       	adiw	r26, 0x02	; 2
    16a2:	8d 91       	ld	r24, X+
    16a4:	9c 91       	ld	r25, X
    16a6:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <osEE_alarm_set_rel>
    16aa:	bf ef       	ldi	r27, 0xFF	; 255
    16ac:	cb 1a       	sub	r12, r27
    16ae:	db 0a       	sbc	r13, r27
    16b0:	a4 cf       	rjmp	.-184    	; 0x15fa <StartOS+0x8a>
    16b2:	d7 01       	movw	r26, r14
    16b4:	ed 91       	ld	r30, X+
    16b6:	fc 91       	ld	r31, X
    16b8:	c6 01       	movw	r24, r12
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	e8 0f       	add	r30, r24
    16c0:	f9 1f       	adc	r31, r25
    16c2:	40 81       	ld	r20, Z
    16c4:	51 81       	ldd	r21, Z+1	; 0x01
    16c6:	da 01       	movw	r26, r20
    16c8:	14 96       	adiw	r26, 0x04	; 4
    16ca:	ed 91       	ld	r30, X+
    16cc:	fc 91       	ld	r31, X
    16ce:	80 81       	ld	r24, Z
    16d0:	8f 5f       	subi	r24, 0xFF	; 255
    16d2:	80 83       	st	Z, r24
    16d4:	93 82       	std	Z+3, r9	; 0x03
    16d6:	82 82       	std	Z+2, r8	; 0x02
    16d8:	f8 01       	movw	r30, r16
    16da:	64 81       	ldd	r22, Z+4	; 0x04
    16dc:	75 81       	ldd	r23, Z+5	; 0x05
    16de:	db 01       	movw	r26, r22
    16e0:	8d 91       	ld	r24, X+
    16e2:	9c 91       	ld	r25, X
    16e4:	11 97       	sbiw	r26, 0x01	; 1
    16e6:	95 83       	std	Z+5, r25	; 0x05
    16e8:	84 83       	std	Z+4, r24	; 0x04
    16ea:	1d 92       	st	X+, r1
    16ec:	1c 92       	st	X, r1
    16ee:	c3 01       	movw	r24, r6
    16f0:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <osEE_scheduler_rq_insert>
    16f4:	bf ef       	ldi	r27, 0xFF	; 255
    16f6:	cb 1a       	sub	r12, r27
    16f8:	db 0a       	sbc	r13, r27
    16fa:	98 cf       	rjmp	.-208    	; 0x162c <StartOS+0xbc>
    16fc:	9f bf       	out	0x3f, r25	; 63
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	bf 90       	pop	r11
    1718:	af 90       	pop	r10
    171a:	9f 90       	pop	r9
    171c:	8f 90       	pop	r8
    171e:	7f 90       	pop	r7
    1720:	6f 90       	pop	r6
    1722:	5f 90       	pop	r5
    1724:	4f 90       	pop	r4
    1726:	08 95       	ret

00001728 <GetActiveApplicationMode>:
    1728:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <CDB>
    172c:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <CDB+0x1>
    1730:	80 85       	ldd	r24, Z+8	; 0x08
    1732:	91 85       	ldd	r25, Z+9	; 0x09
    1734:	89 2b       	or	r24, r25
    1736:	11 f0       	breq	.+4      	; 0x173c <GetActiveApplicationMode+0x14>
    1738:	82 85       	ldd	r24, Z+10	; 0x0a
    173a:	08 95       	ret
    173c:	8f ef       	ldi	r24, 0xFF	; 255
    173e:	08 95       	ret

00001740 <WaitEvent>:
FUNC(StatusType, OS_CODE)
  WaitEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
    1740:	9f 92       	push	r9
    1742:	af 92       	push	r10
    1744:	bf 92       	push	r11
    1746:	cf 92       	push	r12
    1748:	df 92       	push	r13
    174a:	ef 92       	push	r14
    174c:	ff 92       	push	r15
    174e:	0f 93       	push	r16
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	00 d0       	rcall	.+0      	; 0x1758 <WaitEvent+0x18>
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	5c 01       	movw	r10, r24
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
    175e:	e0 90 ca 01 	lds	r14, 0x01CA	; 0x8001ca <CDB>
    1762:	f0 90 cb 01 	lds	r15, 0x01CB	; 0x8001cb <CDB+0x1>
   *    context AND is currently not inside a Category 1 ISR the Operating
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    1766:	c7 01       	movw	r24, r14
    1768:	0e 94 a6 0a 	call	0x154c	; 0x154c <osEE_check_disableint>
    176c:	89 2b       	or	r24, r25
    176e:	09 f0       	breq	.+2      	; 0x1772 <WaitEvent+0x32>
    1770:	44 c0       	rjmp	.+136    	; 0x17fa <WaitEvent+0xba>
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
    1772:	d7 01       	movw	r26, r14
    1774:	cd 90       	ld	r12, X+
    1776:	dc 90       	ld	r13, X
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
    1778:	f6 01       	movw	r30, r12
    177a:	87 81       	ldd	r24, Z+7	; 0x07
    177c:	90 85       	ldd	r25, Z+8	; 0x08
    177e:	82 30       	cpi	r24, 0x02	; 2
    1780:	91 05       	cpc	r25, r1
    1782:	08 f0       	brcs	.+2      	; 0x1786 <WaitEvent+0x46>
    1784:	4a c0       	rjmp	.+148    	; 0x181a <WaitEvent+0xda>
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
  CONSTP2VAR(OsEE_TCB, OS_APPL_DATA, AUTOMATIC)
    p_curr_tcb  = p_curr->p_tcb;
    1786:	04 81       	ldd	r16, Z+4	; 0x04
    1788:	15 81       	ldd	r17, Z+5	; 0x05
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
  } else
#if (defined(OSEE_HAS_MUTEX))
  if (p_curr_tcb->p_first_mtx != NULL) {
    178a:	d8 01       	movw	r26, r16
    178c:	14 96       	adiw	r26, 0x04	; 4
    178e:	2d 91       	ld	r18, X+
    1790:	3c 91       	ld	r19, X
    1792:	15 97       	sbiw	r26, 0x05	; 5
    1794:	23 2b       	or	r18, r19
    1796:	09 f0       	breq	.+2      	; 0x179a <WaitEvent+0x5a>
    1798:	43 c0       	rjmp	.+134    	; 0x1820 <WaitEvent+0xe0>
#endif /* !OSEE_SINGLECORE */
    {
      ev = E_OS_RESOURCE;
    }
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	09 f0       	breq	.+2      	; 0x17a0 <WaitEvent+0x60>
    179e:	43 c0       	rjmp	.+134    	; 0x1826 <WaitEvent+0xe6>
    ev = E_OS_ACCESS;
  } else
#endif /* OSEE_HAS_MUTEX */
#endif /* OSEE_HAS_CHECKS */
  /* Check if we have to wait */
  if ((p_curr_tcb->event_mask & Mask) == 0U) {
    17a0:	18 96       	adiw	r26, 0x08	; 8
    17a2:	8d 91       	ld	r24, X+
    17a4:	9c 91       	ld	r25, X
    17a6:	8a 21       	and	r24, r10
    17a8:	9b 21       	and	r25, r11
    17aa:	89 2b       	or	r24, r25
    17ac:	19 f5       	brne	.+70     	; 0x17f4 <WaitEvent+0xb4>
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    17ae:	9f b6       	in	r9, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    17b0:	f8 94       	cli
    P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
    /* Start Critical Section */
    CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();

    /* Set the waiting mask */
    p_curr_tcb->wait_mask = Mask;
    17b2:	f8 01       	movw	r30, r16
    17b4:	b7 82       	std	Z+7, r11	; 0x07
    17b6:	a6 82       	std	Z+6, r10	; 0x06

    /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
    osEE_lock_core(p_cdb);

    p_to =  osEE_scheduler_task_block_current(osEE_get_kernel(),
    17b8:	ae 01       	movw	r20, r28
    17ba:	4f 5f       	subi	r20, 0xFF	; 255
    17bc:	5f 4f       	sbci	r21, 0xFF	; 255
    17be:	6a ec       	ldi	r22, 0xCA	; 202
    17c0:	71 e0       	ldi	r23, 0x01	; 1
    17c2:	84 eb       	ldi	r24, 0xB4	; 180
    17c4:	91 e0       	ldi	r25, 0x01	; 1
    17c6:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <osEE_scheduler_task_block_current>
              p_cdb, &p_blocked_sn);

    /* Release the SN, I will allocate a new one when the TASK will be
     * reinserted into be reinserted in RQ */
    osEE_sn_release(&p_ccb->p_free_sn, p_blocked_sn);
    17ca:	e9 81       	ldd	r30, Y+1	; 0x01
    17cc:	fa 81       	ldd	r31, Y+2	; 0x02
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    17ce:	d7 01       	movw	r26, r14
    17d0:	14 96       	adiw	r26, 0x04	; 4
    17d2:	2d 91       	ld	r18, X+
    17d4:	3c 91       	ld	r19, X
    17d6:	15 97       	sbiw	r26, 0x05	; 5
    17d8:	31 83       	std	Z+1, r19	; 0x01
    17da:	20 83       	st	Z, r18
  (*pp_first)       = p_to_free;
    17dc:	15 96       	adiw	r26, 0x05	; 5
    17de:	fc 93       	st	X, r31
    17e0:	ee 93       	st	-X, r30
    17e2:	14 97       	sbiw	r26, 0x04	; 4

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_curr, p_to);
    17e4:	bc 01       	movw	r22, r24
    17e6:	c6 01       	movw	r24, r12
    17e8:	0e 94 3e 10 	call	0x207c	; 0x207c <osEE_change_context_from_running>

    /* Reset the waiting mask */
    p_curr_tcb->wait_mask = 0U;
    17ec:	f8 01       	movw	r30, r16
    17ee:	17 82       	std	Z+7, r1	; 0x07
    17f0:	16 82       	std	Z+6, r1	; 0x06
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    17f2:	9f be       	out	0x3f, r9	; 63

    osEE_end_primitive(flags);

    ev = E_OK;
  } else {
    ev = E_OK;
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	80 e0       	ldi	r24, 0x00	; 0
  }
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <WaitEvent+0xbe>
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
    17fa:	8c e0       	ldi	r24, 0x0C	; 12
    17fc:	90 e0       	ldi	r25, 0x00	; 0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_WaitEvent);

  return ev;
}
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	ff 90       	pop	r15
    180c:	ef 90       	pop	r14
    180e:	df 90       	pop	r13
    1810:	cf 90       	pop	r12
    1812:	bf 90       	pop	r11
    1814:	af 90       	pop	r10
    1816:	9f 90       	pop	r9
    1818:	08 95       	ret
#else
    || (p_ccb->os_context > OSEE_TASK_CTX)
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    181a:	82 e0       	ldi	r24, 0x02	; 2
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	ef cf       	rjmp	.-34     	; 0x17fe <WaitEvent+0xbe>
    if (p_curr_tcb->p_first_mtx->mtx_type == OSEE_MUTEX_SPINLOCK) {
      ev = E_OS_SPINLOCK
    } else
#endif /* !OSEE_SINGLECORE */
    {
      ev = E_OS_RESOURCE;
    1820:	86 e0       	ldi	r24, 0x06	; 6
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	ec cf       	rjmp	.-40     	; 0x17fe <WaitEvent+0xbe>
    }
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    ev = E_OS_ACCESS;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	e9 cf       	rjmp	.-46     	; 0x17fe <WaitEvent+0xbe>

0000182c <SetEvent>:
  SetEvent
(
  VAR(TaskType,      AUTOMATIC) TaskID,
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
    182c:	df 92       	push	r13
    182e:	ef 92       	push	r14
    1830:	ff 92       	push	r15
    1832:	0f 93       	push	r16
    1834:	1f 93       	push	r17
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	c8 2f       	mov	r28, r24
    183c:	7b 01       	movw	r14, r22
#if (defined(OSEE_HAS_CHECKS)) || (defined(OSEE_HAS_ERRORHOOK)) ||\
    (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_curr_cdb  = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_curr_ccb  = p_curr_cdb->p_ccb;
    183e:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <CDB>
    1842:	10 91 cb 01 	lds	r17, 0x01CB	; 0x8001cb <CDB+0x1>
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
/* SetEvent is callable by Task and ISR2 */
  if (osEE_check_disableint(p_curr_ccb)) {
    1846:	c8 01       	movw	r24, r16
    1848:	0e 94 a6 0a 	call	0x154c	; 0x154c <osEE_check_disableint>
    184c:	89 2b       	or	r24, r25
    184e:	09 f0       	breq	.+2      	; 0x1852 <SetEvent+0x26>
    1850:	6a c0       	rjmp	.+212    	; 0x1926 <SetEvent+0xfa>
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type > OSEE_TASK_TYPE_ISR2)
    1852:	d8 01       	movw	r26, r16
    1854:	ed 91       	ld	r30, X+
    1856:	fc 91       	ld	r31, X
    1858:	87 81       	ldd	r24, Z+7	; 0x07
    185a:	90 85       	ldd	r25, Z+8	; 0x08
    185c:	03 97       	sbiw	r24, 0x03	; 3
    185e:	08 f0       	brcs	.+2      	; 0x1862 <SetEvent+0x36>
    1860:	65 c0       	rjmp	.+202    	; 0x192c <SetEvent+0x100>
{
#if (defined(OSEE_API_DYNAMIC))
  return (tid < p_kdb->p_kcb->free_task_index);
#else
  /* return (tid < p_kdb->tdb_array_size - OSEE_USED_CORES); */
  return (tid < p_kdb->tdb_array_size);
    1862:	8c 2f       	mov	r24, r28
    1864:	90 e0       	ldi	r25, 0x00	; 0
  } else
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    1866:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <KDB+0x6>
    186a:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <KDB+0x7>
    186e:	82 17       	cp	r24, r18
    1870:	93 07       	cpc	r25, r19
    1872:	08 f0       	brcs	.+2      	; 0x1876 <SetEvent+0x4a>
    1874:	5e c0       	rjmp	.+188    	; 0x1932 <SetEvent+0x106>
    ev = E_OS_ID;
  } else {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_waking_up = (*p_kdb->p_tdb_ptr_array)[TaskID];
    1876:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <KDB+0x2>
    187a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <KDB+0x3>
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	82 0f       	add	r24, r18
    1884:	93 1f       	adc	r25, r19
    1886:	ec 01       	movw	r28, r24
    1888:	a8 81       	ld	r26, Y
    188a:	b9 81       	ldd	r27, Y+1	; 0x01
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_waking_up = p_tdb_waking_up->p_tcb;
    188c:	14 96       	adiw	r26, 0x04	; 4
    188e:	ed 91       	ld	r30, X+
    1890:	fc 91       	ld	r31, X
    1892:	15 97       	sbiw	r26, 0x05	; 5
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1894:	df b6       	in	r13, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1896:	f8 94       	cli

    /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
    osEE_lock_core(p_cdb_waking_up);

#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_waking_up->task_type != OSEE_TASK_TYPE_EXTENDED) {
    1898:	17 96       	adiw	r26, 0x07	; 7
    189a:	8d 91       	ld	r24, X+
    189c:	9c 91       	ld	r25, X
    189e:	18 97       	sbiw	r26, 0x08	; 8
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	59 f0       	breq	.+22     	; 0x18ba <SetEvent+0x8e>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    18a4:	df be       	out	0x3f, r13	; 63
      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);
      ev = E_OS_ACCESS;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
    18aa:	df 91       	pop	r29
    18ac:	cf 91       	pop	r28
    18ae:	1f 91       	pop	r17
    18b0:	0f 91       	pop	r16
    18b2:	ff 90       	pop	r15
    18b4:	ef 90       	pop	r14
    18b6:	df 90       	pop	r13
    18b8:	08 95       	ret
    if (p_tdb_waking_up->task_type != OSEE_TASK_TYPE_EXTENDED) {
      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);
      ev = E_OS_ACCESS;
    } else
    if (p_tcb_waking_up->status == OSEE_TASK_SUSPENDED) {
    18ba:	22 81       	ldd	r18, Z+2	; 0x02
    18bc:	33 81       	ldd	r19, Z+3	; 0x03
    18be:	21 15       	cp	r18, r1
    18c0:	31 05       	cpc	r19, r1
    18c2:	21 f4       	brne	.+8      	; 0x18cc <SetEvent+0xa0>
    18c4:	df be       	out	0x3f, r13	; 63
      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);
      ev = E_OS_STATE;
    18c6:	87 e0       	ldi	r24, 0x07	; 7
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	ef cf       	rjmp	.-34     	; 0x18aa <SetEvent+0x7e>
    } else
#endif /* OSEE_HAS_CHECKS */
    {
      /* Set the event mask only if the task is not suspended */
      p_tcb_waking_up->event_mask |= Mask;
    18cc:	80 85       	ldd	r24, Z+8	; 0x08
    18ce:	91 85       	ldd	r25, Z+9	; 0x09
    18d0:	8e 29       	or	r24, r14
    18d2:	9f 29       	or	r25, r15
    18d4:	91 87       	std	Z+9, r25	; 0x09
    18d6:	80 87       	std	Z+8, r24	; 0x08

      if (((p_tcb_waking_up->wait_mask & Mask) != 0U) &&
    18d8:	86 81       	ldd	r24, Z+6	; 0x06
    18da:	97 81       	ldd	r25, Z+7	; 0x07
    18dc:	e8 22       	and	r14, r24
    18de:	f9 22       	and	r15, r25
    18e0:	ef 28       	or	r14, r15
    18e2:	e9 f0       	breq	.+58     	; 0x191e <SetEvent+0xf2>
    18e4:	23 30       	cpi	r18, 0x03	; 3
    18e6:	31 05       	cpc	r19, r1
    18e8:	d1 f4       	brne	.+52     	; 0x191e <SetEvent+0xf2>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    18ea:	e8 01       	movw	r28, r16
    18ec:	ec 81       	ldd	r30, Y+4	; 0x04
    18ee:	fd 81       	ldd	r31, Y+5	; 0x05
  (*pp_fist)              = p_sn_allocated->p_next;
    18f0:	80 81       	ld	r24, Z
    18f2:	91 81       	ldd	r25, Z+1	; 0x01
    18f4:	9d 83       	std	Y+5, r25	; 0x05
    18f6:	8c 83       	std	Y+4, r24	; 0x04
  p_sn_allocated->p_next  = NULL;
    18f8:	11 82       	std	Z+1, r1	; 0x01
    18fa:	10 82       	st	Z, r1
          (p_tcb_waking_up->status == OSEE_TASK_WAITING))
      {
        CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
          p_sn = osEE_sn_alloc(&p_cdb_waking_up->p_ccb->p_free_sn);

        p_sn->p_tdb = p_tdb_waking_up;
    18fc:	b3 83       	std	Z+3, r27	; 0x03
    18fe:	a2 83       	std	Z+2, r26	; 0x02

        /* Release the TASK (and the SN) */
        if (osEE_scheduler_task_unblocked(p_kdb, p_cdb_waking_up, p_sn))
    1900:	af 01       	movw	r20, r30
    1902:	6a ec       	ldi	r22, 0xCA	; 202
    1904:	71 e0       	ldi	r23, 0x01	; 1
    1906:	84 eb       	ldi	r24, 0xB4	; 180
    1908:	91 e0       	ldi	r25, 0x01	; 1
    190a:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <osEE_scheduler_task_unblocked>
    190e:	89 2b       	or	r24, r25
    1910:	31 f0       	breq	.+12     	; 0x191e <SetEvent+0xf2>
        {
          (void)osEE_scheduler_task_preemption_point(p_kdb, p_cdb_waking_up);
    1912:	6a ec       	ldi	r22, 0xCA	; 202
    1914:	71 e0       	ldi	r23, 0x01	; 1
    1916:	84 eb       	ldi	r24, 0xB4	; 180
    1918:	91 e0       	ldi	r25, 0x01	; 1
    191a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <osEE_scheduler_task_preemption_point>
    191e:	df be       	out	0x3f, r13	; 63
      }

      osEE_unlock_core(p_cdb_waking_up);
      osEE_end_primitive(flags);

      ev = E_OK;
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	c2 cf       	rjmp	.-124    	; 0x18aa <SetEvent+0x7e>
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
/* SetEvent is callable by Task and ISR2 */
  if (osEE_check_disableint(p_curr_ccb)) {
    ev = E_OS_DISABLEDINT;
    1926:	8c e0       	ldi	r24, 0x0C	; 12
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	bf cf       	rjmp	.-130    	; 0x18aa <SetEvent+0x7e>
#else
    || (p_curr_ccb->os_context > OSEE_TASK_ISR2_CTX)
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    192c:	82 e0       	ldi	r24, 0x02	; 2
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	bc cf       	rjmp	.-136    	; 0x18aa <SetEvent+0x7e>
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
    1932:	83 e0       	ldi	r24, 0x03	; 3
    1934:	90 e0       	ldi	r25, 0x00	; 0
#endif /* OSEE_HAS_ERRORHOOK */
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_curr_ccb, OSServiceId_SetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
    1936:	b9 cf       	rjmp	.-142    	; 0x18aa <SetEvent+0x7e>

00001938 <GetEvent>:
  GetEvent
(
  VAR(TaskType, AUTOMATIC)          TaskID,
  VAR(EventMaskRefType, AUTOMATIC)  Event
)
{
    1938:	ef 92       	push	r14
    193a:	ff 92       	push	r15
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	c8 2f       	mov	r28, r24
    1944:	8b 01       	movw	r16, r22
#if (defined(OSEE_HAS_CHECKS)) || (defined(OSEE_HAS_ERRORHOOK)) ||\
    (defined(OSEE_HAS_ORTI))
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
    1946:	e0 90 ca 01 	lds	r14, 0x01CA	; 0x8001ca <CDB>
    194a:	f0 90 cb 01 	lds	r15, 0x01CB	; 0x8001cb <CDB+0x1>
   *    context AND is currently not inside a Category 1 ISR the Operating
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    194e:	c7 01       	movw	r24, r14
    1950:	0e 94 a6 0a 	call	0x154c	; 0x154c <osEE_check_disableint>
    1954:	89 2b       	or	r24, r25
    1956:	c1 f5       	brne	.+112    	; 0x19c8 <GetEvent+0x90>
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type > OSEE_TASK_TYPE_ISR2)
    1958:	d7 01       	movw	r26, r14
    195a:	ed 91       	ld	r30, X+
    195c:	fc 91       	ld	r31, X
    195e:	87 81       	ldd	r24, Z+7	; 0x07
    1960:	90 85       	ldd	r25, Z+8	; 0x08
    1962:	03 97       	sbiw	r24, 0x03	; 3
    1964:	a0 f5       	brcc	.+104    	; 0x19ce <GetEvent+0x96>
    1966:	8c 2f       	mov	r24, r28
    1968:	90 e0       	ldi	r25, 0x00	; 0
  } else
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    196a:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <KDB+0x6>
    196e:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <KDB+0x7>
    1972:	82 17       	cp	r24, r18
    1974:	93 07       	cpc	r25, r19
    1976:	70 f5       	brcc	.+92     	; 0x19d4 <GetEvent+0x9c>
    ev = E_OS_ID;
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
    1978:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <KDB+0x2>
    197c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <KDB+0x3>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	82 0f       	add	r24, r18
    1986:	93 1f       	adc	r25, r19
    1988:	dc 01       	movw	r26, r24
    198a:	ed 91       	ld	r30, X+
    198c:	fc 91       	ld	r31, X
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
    /* XXX: We will accept an harmless race condition here for TASKs that want
     *      read events of TASKs allocated in other cores */
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
    198e:	87 81       	ldd	r24, Z+7	; 0x07
    1990:	90 85       	ldd	r25, Z+8	; 0x08
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	11 f5       	brne	.+68     	; 0x19da <GetEvent+0xa2>
  } else
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_event = (*p_kdb->p_tdb_ptr_array)[TaskID];
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_event = p_tdb_event->p_tcb;
    1996:	04 80       	ldd	r0, Z+4	; 0x04
    1998:	f5 81       	ldd	r31, Z+5	; 0x05
    199a:	e0 2d       	mov	r30, r0
     *      read events of TASKs allocated in other cores */
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
      ev = E_OS_ACCESS;
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
    199c:	82 81       	ldd	r24, Z+2	; 0x02
    199e:	93 81       	ldd	r25, Z+3	; 0x03
    19a0:	89 2b       	or	r24, r25
    19a2:	f1 f0       	breq	.+60     	; 0x19e0 <GetEvent+0xa8>
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
      ev = E_OS_PARAM_POINTER;
    19a4:	8e e0       	ldi	r24, 0x0E	; 14
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    } else
#endif /* OSEE_HAS_CHECKS */
    if (Event == NULL) {
    19a8:	01 15       	cp	r16, r1
    19aa:	11 05       	cpc	r17, r1
    19ac:	39 f0       	breq	.+14     	; 0x19bc <GetEvent+0x84>
      ev = E_OS_PARAM_POINTER;
    } else
    {
      (*Event) = p_tcb_event->event_mask;
    19ae:	80 85       	ldd	r24, Z+8	; 0x08
    19b0:	91 85       	ldd	r25, Z+9	; 0x09
    19b2:	f8 01       	movw	r30, r16
    19b4:	91 83       	std	Z+1, r25	; 0x01
    19b6:	80 83       	st	Z, r24

      ev = E_OK;
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	80 e0       	ldi	r24, 0x00	; 0
#if (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_exit(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_ORTI */

  return ev;
}
    19bc:	cf 91       	pop	r28
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	ff 90       	pop	r15
    19c4:	ef 90       	pop	r14
    19c6:	08 95       	ret
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
    19c8:	8c e0       	ldi	r24, 0x0C	; 12
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	f7 cf       	rjmp	.-18     	; 0x19bc <GetEvent+0x84>
        (os_context != OSEE_PRETASKHOOK_CTX) &&
        (os_context != OSEE_POSTTASKHOOK_CTX))
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    19ce:	82 e0       	ldi	r24, 0x02	; 2
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	f4 cf       	rjmp	.-24     	; 0x19bc <GetEvent+0x84>
#elif (defined(OSEE_HAS_ORTI))
  osEE_orti_trace_service_entry(p_ccb, OSServiceId_GetEvent);
#endif /* OSEE_HAS_CHECKS elif OSEE_HAS_ORTI */
#endif /* OSEE_HAS_CHECKS || OSEE_HAS_ERRORHOOK || OSEE_HAS_ORTI */
  if (!osEE_is_valid_tid(p_kdb, TaskID)) {
    ev = E_OS_ID;
    19d4:	83 e0       	ldi	r24, 0x03	; 3
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	f1 cf       	rjmp	.-30     	; 0x19bc <GetEvent+0x84>
      p_tcb_event = p_tdb_event->p_tcb;
    /* XXX: We will accept an harmless race condition here for TASKs that want
     *      read events of TASKs allocated in other cores */
#if (defined(OSEE_HAS_CHECKS))
    if (p_tdb_event->task_type != OSEE_TASK_TYPE_EXTENDED) {
      ev = E_OS_ACCESS;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	ee cf       	rjmp	.-36     	; 0x19bc <GetEvent+0x84>
    } else
    if (p_tcb_event->status == OSEE_TASK_SUSPENDED) {
      ev = E_OS_STATE;
    19e0:	87 e0       	ldi	r24, 0x07	; 7
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	eb cf       	rjmp	.-42     	; 0x19bc <GetEvent+0x84>

000019e6 <ClearEvent>:
FUNC(StatusType, OS_CODE)
  ClearEvent
(
  VAR(EventMaskType, AUTOMATIC) Mask
)
{
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	ec 01       	movw	r28, r24
  VAR(StatusType, AUTOMATIC)  ev;
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
    19f0:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <CDB>
    19f4:	10 91 cb 01 	lds	r17, 0x01CB	; 0x8001cb <CDB+0x1>
   *    context AND is currently not inside a Category 1 ISR the Operating
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    19f8:	c8 01       	movw	r24, r16
    19fa:	0e 94 a6 0a 	call	0x154c	; 0x154c <osEE_check_disableint>
    19fe:	89 2b       	or	r24, r25
    1a00:	e1 f4       	brne	.+56     	; 0x1a3a <ClearEvent+0x54>
  CONSTP2VAR(OsEE_CDB, OS_APPL_DATA, AUTOMATIC)
    p_cdb       = osEE_get_curr_core();
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
    1a02:	d8 01       	movw	r26, r16
    1a04:	ed 91       	ld	r30, X+
    1a06:	fc 91       	ld	r31, X
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
  } else
  if ((p_curr->task_type >= OSEE_TASK_TYPE_ISR2)
    1a08:	87 81       	ldd	r24, Z+7	; 0x07
    1a0a:	90 85       	ldd	r25, Z+8	; 0x08
    1a0c:	82 30       	cpi	r24, 0x02	; 2
    1a0e:	91 05       	cpc	r25, r1
    1a10:	b8 f4       	brcc	.+46     	; 0x1a40 <ClearEvent+0x5a>
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    1a12:	01 97       	sbiw	r24, 0x01	; 1
    1a14:	c1 f4       	brne	.+48     	; 0x1a46 <ClearEvent+0x60>
  CONSTP2VAR(OsEE_CCB, OS_APPL_DATA, AUTOMATIC)
    p_ccb       = p_cdb->p_ccb;
  CONSTP2VAR(OsEE_TDB, OS_APPL_DATA, AUTOMATIC)
    p_curr      = p_ccb->p_curr;
  CONSTP2VAR(OsEE_TCB, OS_APPL_DATA, AUTOMATIC)
    p_curr_tcb  = p_curr->p_tcb;
    1a16:	04 80       	ldd	r0, Z+4	; 0x04
    1a18:	f5 81       	ldd	r31, Z+5	; 0x05
    1a1a:	e0 2d       	mov	r30, r0
    ev = E_OS_ACCESS;
  } else
#endif /* OSEE_HAS_CHECKS */
  {
    /* clear the event */
    p_curr_tcb->event_mask &= ~Mask;
    1a1c:	c0 95       	com	r28
    1a1e:	d0 95       	com	r29
    1a20:	80 85       	ldd	r24, Z+8	; 0x08
    1a22:	91 85       	ldd	r25, Z+9	; 0x09
    1a24:	8c 23       	and	r24, r28
    1a26:	9d 23       	and	r25, r29
    1a28:	91 87       	std	Z+9, r25	; 0x09
    1a2a:	80 87       	std	Z+8, r24	; 0x08

    ev = E_OK;
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
}
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	08 95       	ret
   *    System module shall not perform the requested action
   *    (the service call shall have no effect), and return E_OS_CALLEVEL
   *    (see [12], section 13.1) or the "invalid value" of  the service.
   *    (BSW11009, BSW11013) */
  if (osEE_check_disableint(p_ccb)) {
    ev = E_OS_DISABLEDINT;
    1a3a:	8c e0       	ldi	r24, 0x0C	; 12
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	f8 cf       	rjmp	.-16     	; 0x1a30 <ClearEvent+0x4a>
#else
    || (p_ccb->os_context > OSEE_TASK_CTX)
  )
#endif /* OSEE_SERVICE_PROTECTION */
  {
    ev = E_OS_CALLEVEL;
    1a40:	82 e0       	ldi	r24, 0x02	; 2
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	f5 cf       	rjmp	.-22     	; 0x1a30 <ClearEvent+0x4a>
  } else
  if (p_curr->task_type != OSEE_TASK_TYPE_EXTENDED) {
    ev = E_OS_ACCESS;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
  }
#endif /* OSEE_HAS_ERRORHOOK */

  osEE_orti_trace_service_exit(p_ccb, OSServiceId_ClearEvent);

  return ev;
    1a4a:	f2 cf       	rjmp	.-28     	; 0x1a30 <ClearEvent+0x4a>

00001a4c <osEE_scheduler_task_end>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_end
(
  void
)
{
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <osEE_scheduler_task_end+0x6>
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_to;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_from;

  p_to = osEE_scheduler_task_terminated(osEE_get_kernel(), osEE_get_curr_core(),
    1a56:	ae 01       	movw	r20, r28
    1a58:	4f 5f       	subi	r20, 0xFF	; 255
    1a5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a5c:	6a ec       	ldi	r22, 0xCA	; 202
    1a5e:	71 e0       	ldi	r23, 0x01	; 1
    1a60:	84 eb       	ldi	r24, 0xB4	; 180
    1a62:	91 e0       	ldi	r25, 0x01	; 1
    1a64:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <osEE_scheduler_task_terminated>
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
  osEE_change_context_from_task_end(p_from, p_to);
    1a68:	bc 01       	movw	r22, r24
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6e:	0e 94 59 10 	call	0x20b2	; 0x20b2 <osEE_change_context_from_task_end>
  if (p_from->task_type != OSEE_TASK_TYPE_ISR2) {
    osEE_change_context_from_task_end(p_from, p_to);
  } else {
    osEE_change_context_from_isr2_end(p_from, p_to);
  }
}
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	08 95       	ret

00001a7c <osEE_scheduler_task_wrapper_restore>:
    p_ccb->p_lock_to_be_released = NULL;
  }
#endif /* OSEE_SCHEDULER_GLOBAL */

  return;
}
    1a7c:	08 95       	ret

00001a7e <osEE_scheduler_task_wrapper_run>:
FUNC(void, OS_CODE)
  osEE_scheduler_task_wrapper_run
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_to
)
{
    1a7e:	ec 01       	movw	r28, r24
  CONST(TaskPrio, AUTOMATIC) task_prio = p_tdb_to->p_tcb->current_prio;
    1a80:	ec 81       	ldd	r30, Y+4	; 0x04
    1a82:	fd 81       	ldd	r31, Y+5	; 0x05
  osEE_scheduler_task_wrapper_restore(p_tdb_to);

  if (task_prio < OSEE_ISR_ALL_PRIO) {
    1a84:	81 81       	ldd	r24, Z+1	; 0x01
    1a86:	8f 3f       	cpi	r24, 0xFF	; 255
    1a88:	09 f0       	breq	.+2      	; 0x1a8c <osEE_scheduler_task_wrapper_run+0xe>
  cli();
}

OSEE_STATIC_INLINE void osEE_hal_enableIRQ( void )
{
  sei();
    1a8a:	78 94       	sei
    /* Set-up IPL at current TASK level in addition to enable IRQ */
    osEE_hal_set_ipl(task_prio);
    osEE_hal_enableIRQ();
  }
  p_tdb_to->task_func();
    1a8c:	e9 85       	ldd	r30, Y+9	; 0x09
    1a8e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a90:	09 95       	icall
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1a92:	8f b7       	in	r24, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1a94:	f8 94       	cli
(
  P2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA)  p_to_term,
  VAR(OsEE_kernel_cb, AUTOMATIC)            kernel_cb
)
{
  osEE_hal_terminate_ctx(p_to_term->p_scb, kernel_cb);
    1a96:	66 e2       	ldi	r22, 0x26	; 38
    1a98:	7d e0       	ldi	r23, 0x0D	; 13
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <osEE_hal_terminate_ctx>

00001aa2 <osEE_idle_hook_wrapper>:
FUNC(void, OS_CODE)
  osEE_idle_hook_wrapper
(
  void
)
{
    1aa2:	0f 93       	push	r16
    1aa4:	1f 93       	push	r17
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
}

/* Suspend/Resume Interrupts */
OSEE_STATIC_INLINE OsEE_reg osEE_hal_suspendIRQ ( void )
{
  register OsEE_reg sr = SREG;
    1aaa:	cf b7       	in	r28, 0x3f	; 63
 =============================================================================*/

/* Disable/Enable Interrupts */
OSEE_STATIC_INLINE void osEE_hal_disableIRQ( void )
{
  cli();
    1aac:	f8 94       	cli
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
    p_cdb = osEE_get_curr_core();
#if (defined(OSEE_HAS_AUTOSTART_TASK))
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
    1aae:	6a ec       	ldi	r22, 0xCA	; 202
    1ab0:	71 e0       	ldi	r23, 0x01	; 1
    1ab2:	84 eb       	ldi	r24, 0xB4	; 180
    1ab4:	91 e0       	ldi	r25, 0x01	; 1
    1ab6:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <osEE_scheduler_task_preemption_point>
}

OSEE_STATIC_INLINE void osEE_hal_resumeIRQ ( OsEE_reg flags )
{
  OSEE_BARRIER();
  SREG = flags;
    1aba:	cf bf       	out	0x3f, r28	; 63
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    1abc:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <CDB>
    1ac0:	10 91 cb 01 	lds	r17, 0x01CB	; 0x8001cb <CDB+0x1>
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    1ac4:	c0 91 cc 01 	lds	r28, 0x01CC	; 0x8001cc <CDB+0x2>
    1ac8:	d0 91 cd 01 	lds	r29, 0x01CD	; 0x8001cd <CDB+0x3>
  /* Schedule Here: Autostart TASKs */
  CONST(OsEE_reg, AUTOMATIC) flags = osEE_begin_primitive();
  (void)osEE_scheduler_task_preemption_point(osEE_get_kernel(), p_cdb);
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
    1acc:	f8 01       	movw	r30, r16
    1ace:	80 85       	ldd	r24, Z+8	; 0x08
    1ad0:	91 85       	ldd	r25, Z+9	; 0x09
    1ad2:	82 30       	cpi	r24, 0x02	; 2
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	51 f0       	breq	.+20     	; 0x1aec <osEE_idle_hook_wrapper+0x4a>
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    1ad8:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <CDB+0x4>
    1adc:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <CDB+0x5>
}
    1ae0:	df 91       	pop	r29
    1ae2:	cf 91       	pop	r28
    1ae4:	1f 91       	pop	r17
    1ae6:	0f 91       	pop	r16
    }
#else
    ; /* Empty Endless Loop */
#endif /* OSEE_HAS_IDLEHOOK || OSEE_API_DYNAMIC */
  }
  osEE_idle_task_terminate(p_cdb->p_idle_task);
    1ae8:	0c 94 6f 10 	jmp	0x20de	; 0x20de <osEE_idle_task_terminate>
  osEE_end_primitive(flags);
#endif /* !OSEE_STARTOS_RETURN && !OSEE_API_DYNAMIC && !OSEE_HAS_AUTOSTART_TASK */
  while (p_cdb->p_ccb->os_status == OSEE_KERNEL_STARTED) {
#if (defined(OSEE_HAS_IDLEHOOK)) || (defined(OSEE_API_DYNAMIC))
    CONST(TaskFunc, AUTOMATIC) p_idle_hook = p_cdb->p_idle_hook;
    if (p_idle_hook != NULL) {
    1aec:	20 97       	sbiw	r28, 0x00	; 0
    1aee:	89 f3       	breq	.-30     	; 0x1ad2 <osEE_idle_hook_wrapper+0x30>
      p_idle_hook();
    1af0:	fe 01       	movw	r30, r28
    1af2:	09 95       	icall
    1af4:	eb cf       	rjmp	.-42     	; 0x1acc <osEE_idle_hook_wrapper+0x2a>

00001af6 <osEE_scheduler_core_rq_preempt_stk>:
  osEE_scheduler_core_rq_preempt_stk
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1afe:	ec 01       	movw	r28, r24
    1b00:	a8 81       	ld	r26, Y
    1b02:	b9 81       	ldd	r27, Y+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn  = (*p_rq);
    1b04:	eb 01       	movw	r28, r22
    1b06:	e8 81       	ld	r30, Y
    1b08:	f9 81       	ldd	r31, Y+1	; 0x01
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_ret_sn = p_ccb->p_stk_sn;
    1b0a:	16 96       	adiw	r26, 0x06	; 6
    1b0c:	cd 91       	ld	r28, X+
    1b0e:	dc 91       	ld	r29, X
    1b10:	17 97       	sbiw	r26, 0x07	; 7

  VAR(OsEE_bool, AUTOMATIC)                     is_rq_preemption = OSEE_FALSE;
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)      p_ret_tdb;

  if (p_ret_sn != NULL) {
    1b12:	20 97       	sbiw	r28, 0x00	; 0
    1b14:	c1 f1       	breq	.+112    	; 0x1b86 <osEE_scheduler_core_rq_preempt_stk+0x90>
    p_ret_tdb = p_ret_sn->p_tdb;
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	9b 81       	ldd	r25, Y+3	; 0x03
    if (p_rq_sn != NULL) {
    1b1a:	30 97       	sbiw	r30, 0x00	; 0
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <osEE_scheduler_core_rq_preempt_stk+0x2a>
    1b1e:	3f c0       	rjmp	.+126    	; 0x1b9e <osEE_scheduler_core_rq_preempt_stk+0xa8>
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
    1b20:	ec 01       	movw	r28, r24
    1b22:	0c 81       	ldd	r16, Y+4	; 0x04
    1b24:	1d 81       	ldd	r17, Y+5	; 0x05
      if (p_ret_tcb->current_prio <
        p_rq_sn->p_tdb->p_tcb->current_prio)
    1b26:	22 81       	ldd	r18, Z+2	; 0x02
    1b28:	33 81       	ldd	r19, Z+3	; 0x03
    1b2a:	e9 01       	movw	r28, r18
    1b2c:	4c 81       	ldd	r20, Y+4	; 0x04
    1b2e:	5d 81       	ldd	r21, Y+5	; 0x05
  if (p_ret_sn != NULL) {
    p_ret_tdb = p_ret_sn->p_tdb;
    if (p_rq_sn != NULL) {
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_ret_tcb = p_ret_tdb->p_tcb;
      if (p_ret_tcb->current_prio <
    1b30:	e8 01       	movw	r28, r16
    1b32:	39 81       	ldd	r19, Y+1	; 0x01
    1b34:	ea 01       	movw	r28, r20
    1b36:	29 81       	ldd	r18, Y+1	; 0x01
    1b38:	32 17       	cp	r19, r18
    1b3a:	88 f5       	brcc	.+98     	; 0x1b9e <osEE_scheduler_core_rq_preempt_stk+0xa8>
      {
        /* RQ preempt STK */
        /* Call PostTaskHook before switching active TASK */
        osEE_call_post_task_hook(p_ccb);

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
    1b3c:	22 e0       	ldi	r18, 0x02	; 2
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	e8 01       	movw	r28, r16
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    1b42:	3b 83       	std	Y+3, r19	; 0x03
    1b44:	2a 83       	std	Y+2, r18	; 0x02
    is_rq_preemption          = OSEE_TRUE;
  }

  if (is_rq_preemption) {
    /* Extract from ready queue */
    (*p_rq)       = p_rq_sn->p_next;
    1b46:	20 81       	ld	r18, Z
    1b48:	31 81       	ldd	r19, Z+1	; 0x01
    1b4a:	eb 01       	movw	r28, r22
    1b4c:	39 83       	std	Y+1, r19	; 0x01
    1b4e:	28 83       	st	Y, r18
(
  P2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_rq_sn
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb = p_rq_sn->p_tdb;
    1b50:	c2 81       	ldd	r28, Z+2	; 0x02
    1b52:	d3 81       	ldd	r29, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    1b54:	2c 81       	ldd	r18, Y+4	; 0x04
    1b56:	3d 81       	ldd	r19, Y+5	; 0x05
  /* N.B. The Handling of the preempted SN as Stacked or re-inserted in RQ
   * is done by the calling function */
  p_rq_sn->p_next               = NULL;
  p_tcb->current_core_id        = osEE_get_curr_core_id();
#else
  p_rq_sn->p_next               = p_ccb->p_stk_sn;
    1b58:	16 96       	adiw	r26, 0x06	; 6
    1b5a:	4d 91       	ld	r20, X+
    1b5c:	5c 91       	ld	r21, X
    1b5e:	17 97       	sbiw	r26, 0x07	; 7
    1b60:	51 83       	std	Z+1, r21	; 0x01
    1b62:	40 83       	st	Z, r20
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  p_ccb->p_stk_sn               = p_rq_sn;
    1b64:	17 96       	adiw	r26, 0x07	; 7
    1b66:	fc 93       	st	X, r31
    1b68:	ee 93       	st	-X, r30
    1b6a:	16 97       	sbiw	r26, 0x06	; 6
  p_ccb->p_curr                 = p_tdb;
    1b6c:	cd 93       	st	X+, r28
    1b6e:	dc 93       	st	X, r29

  /* Adjust actual priority with dispatch priority: if needed */
  {
    CONST(TaskPrio, AUTOMATIC)
      dispatch_prio = p_tdb->dispatch_prio;
    1b70:	4c 85       	ldd	r20, Y+12	; 0x0c
    if (p_tcb->current_prio < dispatch_prio) {
    1b72:	f9 01       	movw	r30, r18
    1b74:	51 81       	ldd	r21, Z+1	; 0x01
    1b76:	54 17       	cp	r21, r20
    1b78:	08 f4       	brcc	.+2      	; 0x1b7c <osEE_scheduler_core_rq_preempt_stk+0x86>
      p_tcb->current_prio = dispatch_prio;
    1b7a:	41 83       	std	Z+1, r20	; 0x01
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
#endif /* OSEE_ALLOW_TASK_MIGRATION */
}
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	1f 91       	pop	r17
    1b82:	0f 91       	pop	r16
    1b84:	08 95       	ret

        p_ret_tcb->status = OSEE_TASK_READY_STACKED;
        is_rq_preemption  = OSEE_TRUE;
      }
    }
  } else if (p_rq_sn != NULL) {
    1b86:	30 97       	sbiw	r30, 0x00	; 0
    1b88:	51 f0       	breq	.+20     	; 0x1b9e <osEE_scheduler_core_rq_preempt_stk+0xa8>
    /* Don't use p_ccb->p_curr, is not reliable here,
     * It points to the terminated TASK, we are still evaluating
     * the next one. */
    /* Call PostTaskHook before switching active TASK */
    osEE_call_post_task_hook(p_ccb);
    p_ret_tdb                 = p_cdb->p_idle_task;
    1b8a:	ec 01       	movw	r28, r24
    1b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    p_ret_tdb->p_tcb->status  = OSEE_TASK_READY_STACKED;
    1b90:	ec 01       	movw	r28, r24
    1b92:	4c 81       	ldd	r20, Y+4	; 0x04
    1b94:	5d 81       	ldd	r21, Y+5	; 0x05
    1b96:	22 e0       	ldi	r18, 0x02	; 2
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	ea 01       	movw	r28, r20
    1b9c:	d2 cf       	rjmp	.-92     	; 0x1b42 <osEE_scheduler_core_rq_preempt_stk+0x4c>
    (*p_rq)       = p_rq_sn->p_next;

    /* Set as current on top of STK */
    osEE_scheduler_stk_next(p_ccb, p_rq_sn);
  } else {
    p_ret_tdb = NULL;
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    p_ret_sn  = NULL;
  }
#if (defined(OSEE_ALLOW_TASK_MIGRATION))
  return p_ret_sn;
#else
  return p_ret_tdb;
    1ba2:	ec cf       	rjmp	.-40     	; 0x1b7c <osEE_scheduler_core_rq_preempt_stk+0x86>

00001ba4 <osEE_sn_priority_insert>:
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA)     pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA)     p_sn_new,
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
    1ba4:	cf 92       	push	r12
    1ba6:	df 92       	push	r13
    1ba8:	ef 92       	push	r14
    1baa:	ff 92       	push	r15
    1bac:	0f 93       	push	r16
    1bae:	1f 93       	push	r17
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
    1bb4:	eb 01       	movw	r28, r22
    1bb6:	aa 81       	ldd	r26, Y+2	; 0x02
    1bb8:	bb 81       	ldd	r27, Y+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
    1bba:	14 96       	adiw	r26, 0x04	; 4
    1bbc:	ed 91       	ld	r30, X+
    1bbe:	fc 91       	ld	r31, X
    1bc0:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    1bc2:	41 15       	cp	r20, r1
    1bc4:	51 05       	cpc	r21, r1
    1bc6:	01 f1       	breq	.+64     	; 0x1c08 <osEE_sn_priority_insert+0x64>
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
    1bc8:	22 81       	ldd	r18, Z+2	; 0x02
    1bca:	33 81       	ldd	r19, Z+3	; 0x03
    1bcc:	22 30       	cpi	r18, 0x02	; 2
    1bce:	31 05       	cpc	r19, r1
    1bd0:	d8 f0       	brcs	.+54     	; 0x1c08 <osEE_sn_priority_insert+0x64>
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    1bd2:	1b 96       	adiw	r26, 0x0b	; 11
    1bd4:	2c 91       	ld	r18, X
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	ed 91       	ld	r30, X+
    1bda:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	a0 e0       	ldi	r26, 0x00	; 0
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    1be0:	30 97       	sbiw	r30, 0x00	; 0
    1be2:	a1 f4       	brne	.+40     	; 0x1c0c <osEE_sn_priority_insert+0x68>
    } else {
      break;
    }
  }

  if (p_prev != NULL) {
    1be4:	10 97       	sbiw	r26, 0x00	; 0
    1be6:	69 f1       	breq	.+90     	; 0x1c42 <osEE_sn_priority_insert+0x9e>
    p_prev->p_next = p_sn_new;
    1be8:	6d 93       	st	X+, r22
    1bea:	7c 93       	st	X, r23
    ((hnd_act) && osEE_is_active_task(p_tcb_new))?
      p_tdb_new->ready_prio:
      p_tcb_new->current_prio;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_prev          = NULL;
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_curr          = (*pp_first);
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    (*pp_first)   = p_sn_new;
    head_changed  = OSEE_TRUE;
  }

  p_sn_new->p_next = p_curr;
    1bf0:	eb 01       	movw	r28, r22
    1bf2:	f9 83       	std	Y+1, r31	; 0x01
    1bf4:	e8 83       	st	Y, r30

  return head_changed;
}
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	df 90       	pop	r13
    1c04:	cf 90       	pop	r12
    1c06:	08 95       	ret
  CONST(OsEE_bool, AUTOMATIC)                   hnd_act
)
{
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new = p_sn_new->p_tdb;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb_new = p_tdb_new->p_tcb;
  CONST(TaskPrio, AUTOMATIC)                new_task_prio =
    1c08:	21 81       	ldd	r18, Z+1	; 0x01
    1c0a:	e5 cf       	rjmp	.-54     	; 0x1bd6 <osEE_sn_priority_insert+0x32>
  VAR(OsEE_bool, AUTOMATIC)               head_changed    = OSEE_FALSE;

  /* Traverse the queue until needed */
  while (p_curr != NULL) {
    VAR(TaskPrio, AUTOMATIC)                      prio_to_check;
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_cur_tdb = p_curr->p_tdb;
    1c0c:	02 81       	ldd	r16, Z+2	; 0x02
    1c0e:	13 81       	ldd	r17, Z+3	; 0x03
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;
    1c10:	e8 01       	movw	r28, r16
    1c12:	cc 80       	ldd	r12, Y+4	; 0x04
    1c14:	dd 80       	ldd	r13, Y+5	; 0x05

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
    1c16:	41 15       	cp	r20, r1
    1c18:	51 05       	cpc	r21, r1
    1c1a:	81 f0       	breq	.+32     	; 0x1c3c <osEE_sn_priority_insert+0x98>
    1c1c:	e6 01       	movw	r28, r12
    1c1e:	ea 80       	ldd	r14, Y+2	; 0x02
    1c20:	fb 80       	ldd	r15, Y+3	; 0x03
    1c22:	d2 e0       	ldi	r29, 0x02	; 2
    1c24:	ed 16       	cp	r14, r29
    1c26:	f1 04       	cpc	r15, r1
    1c28:	48 f0       	brcs	.+18     	; 0x1c3c <osEE_sn_priority_insert+0x98>
      prio_to_check = p_cur_tdb->ready_prio;
    1c2a:	e8 01       	movw	r28, r16
    1c2c:	3b 85       	ldd	r19, Y+11	; 0x0b
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    }

    if (new_task_prio <= prio_to_check)
    1c2e:	32 17       	cp	r19, r18
    1c30:	c8 f2       	brcs	.-78     	; 0x1be4 <osEE_sn_priority_insert+0x40>
    {
      p_prev = p_curr;
      p_curr = p_curr->p_next;
    1c32:	df 01       	movw	r26, r30
    1c34:	01 90       	ld	r0, Z+
    1c36:	f0 81       	ld	r31, Z
    1c38:	e0 2d       	mov	r30, r0
    1c3a:	d2 cf       	rjmp	.-92     	; 0x1be0 <osEE_sn_priority_insert+0x3c>
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_cur_tcb = p_cur_tdb->p_tcb;

    if (hnd_act && osEE_is_active_task(p_cur_tcb)) {
      prio_to_check = p_cur_tdb->ready_prio;
    } else {
      prio_to_check = p_cur_tcb->current_prio;
    1c3c:	e6 01       	movw	r28, r12
    1c3e:	39 81       	ldd	r19, Y+1	; 0x01
    1c40:	f6 cf       	rjmp	.-20     	; 0x1c2e <osEE_sn_priority_insert+0x8a>
  }

  if (p_prev != NULL) {
    p_prev->p_next = p_sn_new;
  } else {
    (*pp_first)   = p_sn_new;
    1c42:	dc 01       	movw	r26, r24
    1c44:	6d 93       	st	X+, r22
    1c46:	7c 93       	st	X, r23
    head_changed  = OSEE_TRUE;
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	d1 cf       	rjmp	.-94     	; 0x1bf0 <osEE_sn_priority_insert+0x4c>

00001c4e <osEE_scheduler_rq_insert>:
  P2VAR(OsEE_RQ, AUTOMATIC, OS_APPL_DATA)       p_rq,
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)       p_sn_new,
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_new
)
{
  p_sn_new->p_tdb = p_tdb_new;
    1c4e:	fb 01       	movw	r30, r22
    1c50:	53 83       	std	Z+3, r21	; 0x03
    1c52:	42 83       	std	Z+2, r20	; 0x02

#if (!defined(OSEE_SCHEDULER_GLOBAL))
  return osEE_sn_priority_insert(p_rq, p_sn_new, OSEE_TRUE);
    1c54:	41 e0       	ldi	r20, 0x01	; 1
    1c56:	50 e0       	ldi	r21, 0x00	; 0
    1c58:	0c 94 d2 0d 	jmp	0x1ba4	; 0x1ba4 <osEE_sn_priority_insert>

00001c5c <osEE_scheduler_core_pop_running>:
  osEE_scheduler_core_pop_running
(
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_RQ,  AUTOMATIC, OS_APPL_DATA)  p_rq
)
{
    1c5c:	ef 92       	push	r14
    1c5e:	ff 92       	push	r15
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	8c 01       	movw	r16, r24
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    1c6a:	fc 01       	movw	r30, r24
    1c6c:	c0 81       	ld	r28, Z
    1c6e:	d1 81       	ldd	r29, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)  p_prev_stk_sn = p_ccb->p_stk_sn;
    1c70:	ee 80       	ldd	r14, Y+6	; 0x06
    1c72:	ff 80       	ldd	r15, Y+7	; 0x07
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_next_stk_sn = p_prev_stk_sn->p_next;

  /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
   * called inside IDLE TASK. */
  p_ccb->p_stk_sn = p_next_stk_sn;
    1c74:	f7 01       	movw	r30, r14
    1c76:	80 81       	ld	r24, Z
    1c78:	91 81       	ldd	r25, Z+1	; 0x01
    1c7a:	9f 83       	std	Y+7, r25	; 0x07
    1c7c:	8e 83       	std	Y+6, r24	; 0x06
   * */

  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    1c7e:	c8 01       	movw	r24, r16
    1c80:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <osEE_scheduler_core_rq_preempt_stk>
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;

    /* If not, resume current STK first */
    if (p_preempt == NULL) {
    1c84:	89 2b       	or	r24, r25
    1c86:	41 f4       	brne	.+16     	; 0x1c98 <osEE_scheduler_core_pop_running+0x3c>
  {
    /* Handle if RQ preempt STK (It manipulate the core data structures) */
    CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
      p_preempt = osEE_scheduler_core_rq_preempt_stk(p_cdb, p_rq);
    CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
      p_curr_stk_sn = p_ccb->p_stk_sn;
    1c88:	ee 81       	ldd	r30, Y+6	; 0x06
    1c8a:	ff 81       	ldd	r31, Y+7	; 0x07
      if (p_ccb->p_curr->task_type <= OSEE_TASK_TYPE_EXTENDED) {
        osEE_call_post_task_hook(p_ccb);
      }
#endif /* OSEE_HAS_POSTTASKHOOK */

      if ( p_curr_stk_sn != NULL ) {
    1c8c:	30 97       	sbiw	r30, 0x00	; 0
    1c8e:	61 f0       	breq	.+24     	; 0x1ca8 <osEE_scheduler_core_pop_running+0x4c>
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
      }

      p_ccb->p_curr            = p_tdb_stk;
    1c94:	99 83       	std	Y+1, r25	; 0x01
    1c96:	88 83       	st	Y, r24
    }
#endif /* OSEE_ALLOW_TASK_MIGRATION */
  }

  return p_prev_stk_sn;
}
    1c98:	c7 01       	movw	r24, r14
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	ff 90       	pop	r15
    1ca4:	ef 90       	pop	r14
    1ca6:	08 95       	ret
      if ( p_curr_stk_sn != NULL ) {
        /* Resume STK TASK */
        p_tdb_stk = p_curr_stk_sn->p_tdb;
      } else {
        /* Resume IDLE TASK */
        p_tdb_stk = p_cdb->p_idle_task;
    1ca8:	f8 01       	movw	r30, r16
    1caa:	84 81       	ldd	r24, Z+4	; 0x04
    1cac:	95 81       	ldd	r25, Z+5	; 0x05
    1cae:	f2 cf       	rjmp	.-28     	; 0x1c94 <osEE_scheduler_core_pop_running+0x38>

00001cb0 <osEE_scheduler_task_activated>:
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb_act,
  CONST(OsEE_bool, AUTOMATIC)               is_preemption_point
)
{
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
  VAR(StatusType, AUTOMATIC)                    ev;
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_act  = p_tdb_act->p_tcb;
    1cc0:	da 01       	movw	r26, r20
    1cc2:	14 96       	adiw	r26, 0x04	; 4
    1cc4:	cd 91       	ld	r28, X+
    1cc6:	dc 91       	ld	r29, X
    1cc8:	15 97       	sbiw	r26, 0x05	; 5

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  if (p_tcb_act->current_num_of_act < p_tdb_act->max_num_of_act)
    1cca:	98 81       	ld	r25, Y
    1ccc:	1d 96       	adiw	r26, 0x0d	; 13
    1cce:	8c 91       	ld	r24, X
    1cd0:	98 17       	cp	r25, r24
    1cd2:	08 f0       	brcs	.+2      	; 0x1cd6 <osEE_scheduler_task_activated+0x26>
    1cd4:	54 c0       	rjmp	.+168    	; 0x1d7e <osEE_scheduler_task_activated+0xce>
  {
    CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb       = p_cdb->p_ccb;
    1cd6:	db 01       	movw	r26, r22
    1cd8:	ed 91       	ld	r30, X+
    1cda:	fc 91       	ld	r31, X
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr      = p_ccb->p_curr;
    1cdc:	00 81       	ld	r16, Z
    1cde:	11 81       	ldd	r17, Z+1	; 0x01
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_curr_tcb  = p_curr->p_tcb;
    1ce0:	d8 01       	movw	r26, r16
    1ce2:	14 96       	adiw	r26, 0x04	; 4
    1ce4:	ed 90       	ld	r14, X+
    1ce6:	fc 90       	ld	r15, X

    ++p_tcb_act->current_num_of_act;
    1ce8:	9f 5f       	subi	r25, 0xFF	; 255
    1cea:	98 83       	st	Y, r25
    1cec:	c4 80       	ldd	r12, Z+4	; 0x04
    1cee:	d5 80       	ldd	r13, Z+5	; 0x05
    1cf0:	d6 01       	movw	r26, r12
    1cf2:	6d 91       	ld	r22, X+
    1cf4:	7c 91       	ld	r23, X
        osEE_hal_signal_core(p_tdb_act->orig_core_id);
      }
    } else
#endif /* !OSEE_SINGLECORE */
    /* Preemption Check */
    if ((is_preemption_point) &&
    1cf6:	23 2b       	or	r18, r19
    1cf8:	69 f1       	breq	.+90     	; 0x1d54 <osEE_scheduler_task_activated+0xa4>
    1cfa:	d7 01       	movw	r26, r14
    1cfc:	11 96       	adiw	r26, 0x01	; 1
    1cfe:	9c 91       	ld	r25, X
    1d00:	11 97       	sbiw	r26, 0x01	; 1
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	98 17       	cp	r25, r24
    1d06:	30 f5       	brcc	.+76     	; 0x1d54 <osEE_scheduler_task_activated+0xa4>
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
  (*pp_fist)              = p_sn_allocated->p_next;
    1d08:	75 83       	std	Z+5, r23	; 0x05
    1d0a:	64 83       	std	Z+4, r22	; 0x04

      /* Call PostTaskHook before switching active TASK */
      osEE_call_post_task_hook(p_ccb);

      /* Set Previous TASK status as Ready but stacked */
      p_curr_tcb->status = OSEE_TASK_READY_STACKED;
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	13 96       	adiw	r26, 0x03	; 3
    1d12:	9c 93       	st	X, r25
    1d14:	8e 93       	st	-X, r24
    1d16:	12 97       	sbiw	r26, 0x02	; 2

      /* Set the activated TASK as current */
      p_new_stk->p_tdb            = p_tdb_act;
    1d18:	d6 01       	movw	r26, r12
    1d1a:	13 96       	adiw	r26, 0x03	; 3
    1d1c:	5c 93       	st	X, r21
    1d1e:	4e 93       	st	-X, r20
    1d20:	12 97       	sbiw	r26, 0x02	; 2
      p_new_stk->p_next           = p_ccb->p_stk_sn;
    1d22:	86 81       	ldd	r24, Z+6	; 0x06
    1d24:	97 81       	ldd	r25, Z+7	; 0x07
    1d26:	8d 93       	st	X+, r24
    1d28:	9c 93       	st	X, r25
      p_ccb->p_stk_sn             = p_new_stk;
    1d2a:	d7 82       	std	Z+7, r13	; 0x07
    1d2c:	c6 82       	std	Z+6, r12	; 0x06
      p_ccb->p_curr               = p_tdb_act;
    1d2e:	51 83       	std	Z+1, r21	; 0x01
    1d30:	40 83       	st	Z, r20
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
#if (defined(OSEE_HAS_EVENTS))
  p_tcb->event_mask = 0U;
    1d32:	19 86       	std	Y+9, r1	; 0x09
    1d34:	18 86       	std	Y+8, r1	; 0x08
      osEE_unlock_core(p_cdb);

#if (defined(OSEE_HAS_EVENTS))
      osEE_event_reset_mask(p_tdb_act->p_tcb);
#endif /* OSEE_HAS_EVENTS */
      osEE_change_context_from_running(p_curr, p_tdb_act);
    1d36:	ba 01       	movw	r22, r20
    1d38:	c8 01       	movw	r24, r16
    1d3a:	0e 94 3e 10 	call	0x207c	; 0x207c <osEE_change_context_from_running>
    } else {
      /* Actually Insert the activated in READY Queue */
      osEE_scheduler_task_activated_insert_rq(p_cdb, p_ccb, p_tdb_act,
        p_tcb_act);
    }
    ev = E_OK;
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    osEE_unlock_kernel();
    ev = E_OS_LIMIT;
  }
  return ev;
}
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	1f 91       	pop	r17
    1d48:	0f 91       	pop	r16
    1d4a:	ff 90       	pop	r15
    1d4c:	ef 90       	pop	r14
    1d4e:	df 90       	pop	r13
    1d50:	cf 90       	pop	r12
    1d52:	08 95       	ret
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;

  /* Actually Insert the activated in Ready Queue.
   * Change Status only if is not active yet. */
  if (p_tcb_act->status == OSEE_TASK_SUSPENDED) {
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	9b 81       	ldd	r25, Y+3	; 0x03
    1d58:	89 2b       	or	r24, r25
    1d5a:	31 f4       	brne	.+12     	; 0x1d68 <osEE_scheduler_task_activated+0xb8>
    p_tcb_act->status = OSEE_TASK_READY;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	9b 83       	std	Y+3, r25	; 0x03
    1d62:	8a 83       	std	Y+2, r24	; 0x02
    1d64:	19 86       	std	Y+9, r1	; 0x09
    1d66:	18 86       	std	Y+8, r1	; 0x08
    1d68:	75 83       	std	Z+5, r23	; 0x05
    1d6a:	64 83       	std	Z+4, r22	; 0x04
  p_sn_allocated->p_next  = NULL;
    1d6c:	d6 01       	movw	r26, r12
    1d6e:	1d 92       	st	X+, r1
    1d70:	1c 92       	st	X, r1
    osEE_event_reset_mask(p_tcb_act);
  }

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    1d72:	b6 01       	movw	r22, r12
    1d74:	cf 01       	movw	r24, r30
    1d76:	02 96       	adiw	r24, 0x02	; 2
    1d78:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <osEE_scheduler_rq_insert>
    1d7c:	e0 cf       	rjmp	.-64     	; 0x1d3e <osEE_scheduler_task_activated+0x8e>
        p_tcb_act);
    }
    ev = E_OK;
  } else {
    osEE_unlock_kernel();
    ev = E_OS_LIMIT;
    1d7e:	84 e0       	ldi	r24, 0x04	; 4
    1d80:	90 e0       	ldi	r25, 0x00	; 0
  }
  return ev;
    1d82:	df cf       	rjmp	.-66     	; 0x1d42 <osEE_scheduler_task_activated+0x92>

00001d84 <osEE_scheduler_task_block_current>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_SN *,  AUTOMATIC, OS_APPL_DATA)  p_sn_blocked
)
{
    1d84:	ef 92       	push	r14
    1d86:	ff 92       	push	r15
    1d88:	0f 93       	push	r16
    1d8a:	1f 93       	push	r17
    1d8c:	cf 93       	push	r28
    1d8e:	df 93       	push	r29
    1d90:	cb 01       	movw	r24, r22
    1d92:	7a 01       	movw	r14, r20
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb         = p_cdb->p_ccb;
    1d94:	db 01       	movw	r26, r22
    1d96:	cd 91       	ld	r28, X+
    1d98:	dc 91       	ld	r29, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb_blocked = p_ccb->p_curr;
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	01 91       	ld	r16, Z+
    1d9e:	11 91       	ld	r17, Z+
    1da0:	bf 01       	movw	r22, r30

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  (*p_sn_blocked) = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    1da2:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <osEE_scheduler_core_pop_running>
    1da6:	d7 01       	movw	r26, r14
    1da8:	8d 93       	st	X+, r24
    1daa:	9c 93       	st	X, r25

  p_tdb_blocked->p_tcb->status = OSEE_TASK_WAITING;
    1dac:	d8 01       	movw	r26, r16
    1dae:	14 96       	adiw	r26, 0x04	; 4
    1db0:	ed 91       	ld	r30, X+
    1db2:	fc 91       	ld	r31, X
    1db4:	83 e0       	ldi	r24, 0x03	; 3
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	93 83       	std	Z+3, r25	; 0x03
    1dba:	82 83       	std	Z+2, r24	; 0x02

  osEE_unlock_core(p_cdb);

  return p_ccb->p_curr;
}
    1dbc:	88 81       	ld	r24, Y
    1dbe:	99 81       	ldd	r25, Y+1	; 0x01
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	1f 91       	pop	r17
    1dc6:	0f 91       	pop	r16
    1dc8:	ff 90       	pop	r15
    1dca:	ef 90       	pop	r14
    1dcc:	08 95       	ret

00001dce <osEE_scheduler_task_unblocked>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
    1dce:	0f 93       	push	r16
    1dd0:	1f 93       	push	r17
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	fa 01       	movw	r30, r20
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA)
    p_ccb = p_cdb->p_ccb;
    1dd8:	db 01       	movw	r26, r22
    1dda:	0d 91       	ld	r16, X+
    1ddc:	1c 91       	ld	r17, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_tdb_released = p_sn_released->p_tdb;
    1dde:	42 81       	ldd	r20, Z+2	; 0x02
    1de0:	53 81       	ldd	r21, Z+3	; 0x03
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
    p_tcb_released = p_tdb_released->p_tcb;
    1de2:	da 01       	movw	r26, r20
    1de4:	14 96       	adiw	r26, 0x04	; 4
    1de6:	cd 91       	ld	r28, X+
    1de8:	dc 91       	ld	r29, X
    1dea:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb_released->status       = OSEE_TASK_READY_STACKED;
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	9b 83       	std	Y+3, r25	; 0x03
    1df2:	8a 83       	std	Y+2, r24	; 0x02
  p_tcb_released->current_prio = p_tdb_released->ready_prio;
    1df4:	1b 96       	adiw	r26, 0x0b	; 11
    1df6:	8c 91       	ld	r24, X
    1df8:	89 83       	std	Y+1, r24	; 0x01

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    1dfa:	bf 01       	movw	r22, r30
    1dfc:	c8 01       	movw	r24, r16
    1dfe:	02 96       	adiw	r24, 0x02	; 2
    1e00:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <osEE_scheduler_rq_insert>
    p_sn_released, p_tdb_released);

  if ( rq_head_changed == OSEE_TRUE ) {
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	91 f4       	brne	.+36     	; 0x1e2c <osEE_scheduler_task_unblocked+0x5e>
    is_preemption = (p_tcb_released->current_prio >
      p_ccb->p_curr->p_tcb->current_prio);
    1e08:	d8 01       	movw	r26, r16
    1e0a:	ed 91       	ld	r30, X+
    1e0c:	fc 91       	ld	r31, X
    1e0e:	04 80       	ldd	r0, Z+4	; 0x04
    1e10:	f5 81       	ldd	r31, Z+5	; 0x05
    1e12:	e0 2d       	mov	r30, r0

  rq_head_changed = osEE_scheduler_rq_insert(&p_ccb->rq,
    p_sn_released, p_tdb_released);

  if ( rq_head_changed == OSEE_TRUE ) {
    is_preemption = (p_tcb_released->current_prio >
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	39 81       	ldd	r19, Y+1	; 0x01
    1e1a:	21 81       	ldd	r18, Z+1	; 0x01
    1e1c:	23 17       	cp	r18, r19
    1e1e:	08 f0       	brcs	.+2      	; 0x1e22 <osEE_scheduler_task_unblocked+0x54>
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
}
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	1f 91       	pop	r17
    1e28:	0f 91       	pop	r16
    1e2a:	08 95       	ret
  P2VAR(OsEE_SN,  AUTOMATIC, OS_APPL_DATA)  p_sn_released
)
{
  VAR(OsEE_bool, AUTOMATIC) rq_head_changed;
  VAR(OsEE_bool, AUTOMATIC)
    is_preemption = OSEE_FALSE;
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
      }
    }
  }
#endif /* !OSEE_SINGLECORE */

  return is_preemption;
    1e30:	f8 cf       	rjmp	.-16     	; 0x1e22 <osEE_scheduler_task_unblocked+0x54>

00001e32 <osEE_scheduler_task_terminated>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)    p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)    p_cdb,
  P2VAR(OsEE_TDB *, AUTOMATIC, OS_APPL_DATA)  pp_tdb_from
)
{
    1e32:	af 92       	push	r10
    1e34:	bf 92       	push	r11
    1e36:	cf 92       	push	r12
    1e38:	df 92       	push	r13
    1e3a:	ef 92       	push	r14
    1e3c:	ff 92       	push	r15
    1e3e:	0f 93       	push	r16
    1e40:	1f 93       	push	r17
    1e42:	cf 93       	push	r28
    1e44:	df 93       	push	r29
    1e46:	5b 01       	movw	r10, r22
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1e48:	db 01       	movw	r26, r22
    1e4a:	cd 91       	ld	r28, X+
    1e4c:	dc 91       	ld	r29, X
  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  {
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
      p_tdb_term  = p_ccb->p_curr;
    1e4e:	fe 01       	movw	r30, r28
    1e50:	01 91       	ld	r16, Z+
    1e52:	11 91       	ld	r17, Z+
    1e54:	6f 01       	movw	r12, r30
    CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
      p_tcb_term  = p_tdb_term->p_tcb;
    1e56:	d8 01       	movw	r26, r16
    1e58:	14 96       	adiw	r26, 0x04	; 4
    1e5a:	ed 90       	ld	r14, X+
    1e5c:	fc 90       	ld	r15, X

    /* Prepare the TDB from return value */
    (*pp_tdb_from) = p_tdb_term;
    1e5e:	fa 01       	movw	r30, r20
    1e60:	11 83       	std	Z+1, r17	; 0x01
    1e62:	00 83       	st	Z, r16

    if (p_tcb_term->status == OSEE_TASK_RUNNING) {
    1e64:	d7 01       	movw	r26, r14
    1e66:	12 96       	adiw	r26, 0x02	; 2
    1e68:	8d 91       	ld	r24, X+
    1e6a:	9c 91       	ld	r25, X
    1e6c:	04 97       	sbiw	r24, 0x04	; 4
    1e6e:	a9 f5       	brne	.+106    	; 0x1eda <osEE_scheduler_task_terminated+0xa8>
      /* Normal Termination */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = osEE_scheduler_core_pop_running(p_cdb, &p_ccb->rq);
    1e70:	b6 01       	movw	r22, r12
    1e72:	c5 01       	movw	r24, r10
    1e74:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <osEE_scheduler_core_pop_running>
    1e78:	ac 01       	movw	r20, r24

      p_tdb_to = p_ccb->p_curr;
    1e7a:	88 81       	ld	r24, Y
    1e7c:	99 81       	ldd	r25, Y+1	; 0x01

      /* Handle if there was another activation of the same TASK already
       * as Head of RQ */
      if (p_tdb_term != p_tdb_to) {
    1e7e:	08 17       	cp	r16, r24
    1e80:	19 07       	cpc	r17, r25
    1e82:	31 f1       	breq	.+76     	; 0x1ed0 <osEE_scheduler_task_terminated+0x9e>
  osEE_task_end
(
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_tdb
)
{
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_tcb = p_tdb->p_tcb;
    1e84:	d8 01       	movw	r26, r16
    1e86:	14 96       	adiw	r26, 0x04	; 4
    1e88:	ed 91       	ld	r30, X+
    1e8a:	fc 91       	ld	r31, X
    1e8c:	15 97       	sbiw	r26, 0x05	; 5

  p_tcb->current_prio = p_tdb->ready_prio;
    1e8e:	1b 96       	adiw	r26, 0x0b	; 11
    1e90:	2c 91       	ld	r18, X
    1e92:	21 83       	std	Z+1, r18	; 0x01

  --p_tcb->current_num_of_act;
    1e94:	20 81       	ld	r18, Z
    1e96:	21 50       	subi	r18, 0x01	; 1
    1e98:	20 83       	st	Z, r18

  if (p_tcb->current_num_of_act == 0U) {
    1e9a:	21 11       	cpse	r18, r1
    1e9c:	14 c0       	rjmp	.+40     	; 0x1ec6 <osEE_scheduler_task_terminated+0x94>
    p_tcb->status = OSEE_TASK_SUSPENDED;
    1e9e:	13 82       	std	Z+3, r1	; 0x03
    1ea0:	12 82       	std	Z+2, r1	; 0x02
(
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_first,
  P2VAR(OsEE_SN  , AUTOMATIC, OS_APPL_DATA) p_to_free
)
{
  p_to_free->p_next = (*pp_first);
    1ea2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ea4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ea6:	da 01       	movw	r26, r20
    1ea8:	2d 93       	st	X+, r18
    1eaa:	3c 93       	st	X, r19
  (*pp_first)       = p_to_free;
    1eac:	5d 83       	std	Y+5, r21	; 0x05
    1eae:	4c 83       	std	Y+4, r20	; 0x04
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
}
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	1f 91       	pop	r17
    1eb6:	0f 91       	pop	r16
    1eb8:	ff 90       	pop	r15
    1eba:	ef 90       	pop	r14
    1ebc:	df 90       	pop	r13
    1ebe:	cf 90       	pop	r12
    1ec0:	bf 90       	pop	r11
    1ec2:	af 90       	pop	r10
    1ec4:	08 95       	ret
  } else {
    p_tcb->status = OSEE_TASK_READY;
    1ec6:	21 e0       	ldi	r18, 0x01	; 1
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	33 83       	std	Z+3, r19	; 0x03
    1ecc:	22 83       	std	Z+2, r18	; 0x02
    1ece:	e9 cf       	rjmp	.-46     	; 0x1ea2 <osEE_scheduler_task_terminated+0x70>
#if (defined(OSEE_HAS_PRETASKHOOK))
        /* If TDB_TERM is equal to TDB_TO, the following assure that
         * PreTaskHook will be called */
        p_ccb->p_last_tdb_hook = NULL;
#endif /* OSEE_HAS_PRETASKHOOK */
        --p_tcb_term->current_num_of_act;
    1ed0:	f7 01       	movw	r30, r14
    1ed2:	20 81       	ld	r18, Z
    1ed4:	21 50       	subi	r18, 0x01	; 1
    1ed6:	20 83       	st	Z, r18
    1ed8:	e4 cf       	rjmp	.-56     	; 0x1ea2 <osEE_scheduler_task_terminated+0x70>
      /* In Normal Termination => SN released */
      osEE_sn_release(&p_ccb->p_free_sn, p_sn_term);
    } else {
      /* Handle ChainTask */
      CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
        p_sn_term = p_ccb->p_stk_sn;
    1eda:	6e 81       	ldd	r22, Y+6	; 0x06
    1edc:	7f 81       	ldd	r23, Y+7	; 0x07

      /* Pop the current STK SN, if not IDLE TASK. This function MUST not be
       * called inside IDLE TASK. */
      p_ccb->p_stk_sn = p_sn_term->p_next;
    1ede:	fb 01       	movw	r30, r22
    1ee0:	80 81       	ld	r24, Z
    1ee2:	91 81       	ldd	r25, Z+1	; 0x01
    1ee4:	9f 83       	std	Y+7, r25	; 0x07
    1ee6:	8e 83       	std	Y+6, r24	; 0x06
      /* Wait to see p_ccb->p_curr until you are completely sure to what set */

      /* I need to release internal resource for Chained TASK
       * (set ready prio instead of dispatch prio) to let RQ Tasks 'preempt'
       * the Chained. */
      p_tcb_term->current_prio = p_tdb_term->ready_prio;
    1ee8:	d8 01       	movw	r26, r16
    1eea:	1b 96       	adiw	r26, 0x0b	; 11
    1eec:	8c 91       	ld	r24, X
    1eee:	f7 01       	movw	r30, r14
    1ef0:	81 83       	std	Z+1, r24	; 0x01
      p_tcb_term->status = OSEE_TASK_READY;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	93 83       	std	Z+3, r25	; 0x03
    1ef8:	82 83       	std	Z+2, r24	; 0x02
#if (defined(OSEE_HAS_EVENTS))
      /* If this activation is the last of a TASK, a chaining is
       * a transiction from SUSPENDED to READY so I need to reset Events. */
      if (p_tcb_term->current_num_of_act == 1U) {
    1efa:	80 81       	ld	r24, Z
    1efc:	81 30       	cpi	r24, 0x01	; 1
    1efe:	11 f4       	brne	.+4      	; 0x1f04 <osEE_scheduler_task_terminated+0xd2>
(
  P2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)  p_tcb
)
{
#if (defined(OSEE_HAS_EVENTS))
  p_tcb->event_mask = 0U;
    1f00:	11 86       	std	Z+9, r1	; 0x09
    1f02:	10 86       	std	Z+8, r1	; 0x08
        osEE_event_reset_mask(p_tcb_term);
      }
#endif /* OSEE_HAS_EVENTS */

      (void)osEE_scheduler_rq_insert(&p_ccb->rq, p_sn_term, p_tdb_term);
    1f04:	a8 01       	movw	r20, r16
    1f06:	c6 01       	movw	r24, r12
    1f08:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <osEE_scheduler_rq_insert>

      {
        CONSTP2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)
          p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    1f0c:	b6 01       	movw	r22, r12
    1f0e:	c5 01       	movw	r24, r10
    1f10:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <osEE_scheduler_core_rq_preempt_stk>

        if (p_prev == NULL) {
    1f14:	89 2b       	or	r24, r25
    1f16:	39 f4       	brne	.+14     	; 0x1f26 <osEE_scheduler_task_terminated+0xf4>
          /* Restore Stacked.
           * Not Needed to Check Idle TASK since just reinserted the chained
           * in RQ */
          p_tdb_to                = p_ccb->p_stk_sn->p_tdb;
    1f18:	ee 81       	ldd	r30, Y+6	; 0x06
    1f1a:	ff 81       	ldd	r31, Y+7	; 0x07
    1f1c:	82 81       	ldd	r24, Z+2	; 0x02
    1f1e:	93 81       	ldd	r25, Z+3	; 0x03
          p_ccb->p_curr           = p_tdb_to;
    1f20:	99 83       	std	Y+1, r25	; 0x01
    1f22:	88 83       	st	Y, r24
    1f24:	c5 cf       	rjmp	.-118    	; 0x1eb0 <osEE_scheduler_task_terminated+0x7e>
        } else {
          p_tdb_to = p_ccb->p_curr;
    1f26:	88 81       	ld	r24, Y
    1f28:	99 81       	ldd	r25, Y+1	; 0x01
      /* Chained Termination => SN reused - NO Release */
    }
  }
  osEE_unlock_core(p_cdb);

  return p_tdb_to;
    1f2a:	c2 cf       	rjmp	.-124    	; 0x1eb0 <osEE_scheduler_task_terminated+0x7e>

00001f2c <osEE_scheduler_task_preemption_point>:
  osEE_scheduler_task_preemption_point
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb
)
{
    1f2c:	cf 93       	push	r28
    1f2e:	df 93       	push	r29
    1f30:	cb 01       	movw	r24, r22
  VAR(OsEE_bool, AUTOMATIC)                     is_preemption;
  P2VAR(OsEE_preempt, AUTOMATIC, OS_APPL_DATA)  p_prev;
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb = p_cdb->p_ccb;
    1f32:	fb 01       	movw	r30, r22
    1f34:	c0 81       	ld	r28, Z
    1f36:	d1 81       	ldd	r29, Z+1	; 0x01
  /* Touch unused parameters */
  (void)p_kdb;
  /* Lock the Scheduler */
  osEE_lock_core(p_cdb);

  p_prev = osEE_scheduler_core_rq_preempt_stk(p_cdb, &p_ccb->rq);
    1f38:	be 01       	movw	r22, r28
    1f3a:	6e 5f       	subi	r22, 0xFE	; 254
    1f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3e:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <osEE_scheduler_core_rq_preempt_stk>

  if (p_prev != NULL) {
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	49 f0       	breq	.+18     	; 0x1f58 <osEE_scheduler_task_preemption_point+0x2c>
    CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_curr = p_ccb->p_curr;

    osEE_unlock_core(p_cdb);

    osEE_change_context_from_running(p_prev, p_curr);
    1f46:	68 81       	ld	r22, Y
    1f48:	79 81       	ldd	r23, Y+1	; 0x01
    1f4a:	0e 94 3e 10 	call	0x207c	; 0x207c <osEE_change_context_from_running>

    is_preemption = OSEE_TRUE;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
  }
  return is_preemption;
}
    1f52:	df 91       	pop	r29
    1f54:	cf 91       	pop	r28
    1f56:	08 95       	ret
    osEE_change_context_from_running(p_prev, p_curr);

    is_preemption = OSEE_TRUE;
  } else {
    osEE_unlock_core(p_cdb);
    is_preemption = OSEE_FALSE;
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
  }
  return is_preemption;
    1f5c:	fa cf       	rjmp	.-12     	; 0x1f52 <osEE_scheduler_task_preemption_point+0x26>

00001f5e <osEE_scheduler_task_set_running>:
(
  P2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA)  p_kdb,
  P2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)  p_cdb,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)  p_tdb
)
{
    1f5e:	cf 93       	push	r28
    1f60:	df 93       	push	r29
  CONSTP2VAR(OsEE_CCB, AUTOMATIC, OS_APPL_DATA) p_ccb  = p_cdb->p_ccb;
    1f62:	db 01       	movw	r26, r22
    1f64:	ed 91       	ld	r30, X+
    1f66:	fc 91       	ld	r31, X
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA) p_preempted = p_ccb->p_curr;
    1f68:	80 81       	ld	r24, Z
    1f6a:	91 81       	ldd	r25, Z+1	; 0x01
  CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
    p_preempted_sn = p_ccb->p_stk_sn;
    1f6c:	26 81       	ldd	r18, Z+6	; 0x06
    1f6e:	37 81       	ldd	r19, Z+7	; 0x07

  p_preempted->p_tcb->status    = OSEE_TASK_READY_STACKED;
    1f70:	ec 01       	movw	r28, r24
    1f72:	ac 81       	ldd	r26, Y+4	; 0x04
    1f74:	bd 81       	ldd	r27, Y+5	; 0x05
    1f76:	62 e0       	ldi	r22, 0x02	; 2
    1f78:	70 e0       	ldi	r23, 0x00	; 0
    1f7a:	13 96       	adiw	r26, 0x03	; 3
    1f7c:	7c 93       	st	X, r23
    1f7e:	6e 93       	st	-X, r22
    1f80:	12 97       	sbiw	r26, 0x02	; 2
  p_ccb->p_curr                 = p_tdb;
    1f82:	51 83       	std	Z+1, r21	; 0x01
    1f84:	40 83       	st	Z, r20
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    1f86:	a4 81       	ldd	r26, Z+4	; 0x04
    1f88:	b5 81       	ldd	r27, Z+5	; 0x05
  (*pp_fist)              = p_sn_allocated->p_next;
    1f8a:	6d 91       	ld	r22, X+
    1f8c:	7c 91       	ld	r23, X
    1f8e:	11 97       	sbiw	r26, 0x01	; 1
    1f90:	75 83       	std	Z+5, r23	; 0x05
    1f92:	64 83       	std	Z+4, r22	; 0x04

  /* Touch unused parameters */
  (void)p_kdb;
  osEE_lock_core(p_cdb);
  /* Alloc the SN for the new Running TASK */
  p_ccb->p_stk_sn               = osEE_sn_alloc(&p_ccb->p_free_sn);
    1f94:	b7 83       	std	Z+7, r27	; 0x07
    1f96:	a6 83       	std	Z+6, r26	; 0x06
  osEE_unlock_core(p_cdb);

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
    1f98:	13 96       	adiw	r26, 0x03	; 3
    1f9a:	5c 93       	st	X, r21
    1f9c:	4e 93       	st	-X, r20
    1f9e:	12 97       	sbiw	r26, 0x02	; 2
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;
    1fa0:	2d 93       	st	X+, r18
    1fa2:	3c 93       	st	X, r19

  osEE_change_context_from_running(p_preempted, p_tdb);
    1fa4:	ba 01       	movw	r22, r20
}
    1fa6:	df 91       	pop	r29
    1fa8:	cf 91       	pop	r28

  /* In Scheduler partitioned the TASK are stacked */
  p_ccb->p_stk_sn->p_tdb        = p_tdb;
  p_ccb->p_stk_sn->p_next       = p_preempted_sn;

  osEE_change_context_from_running(p_preempted, p_tdb);
    1faa:	0c 94 3e 10 	jmp	0x207c	; 0x207c <osEE_change_context_from_running>

00001fae <osEE_alarm_set_rel>:
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA)  p_counter_db,
  P2VAR(OsEE_AlarmDB, AUTOMATIC, OS_APPL_DATA)    p_alarm_db,
  VAR(TickType,   AUTOMATIC)                      increment,
  VAR(TickType,   AUTOMATIC)                      cycle
)
{
    1fae:	db 01       	movw	r26, r22
    1fb0:	ed 91       	ld	r30, X+
    1fb2:	fc 91       	ld	r31, X
    counter_core_id = p_counter_db->core_id;
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->active) {
    1fb4:	a4 81       	ldd	r26, Z+4	; 0x04
    1fb6:	b5 81       	ldd	r27, Z+5	; 0x05
    1fb8:	ab 2b       	or	r26, r27
    1fba:	39 f4       	brne	.+14     	; 0x1fca <osEE_alarm_set_rel+0x1c>
    ev = E_OS_STATE;
  } else {
    p_alarm_cb->cycle = cycle;
    1fbc:	37 83       	std	Z+7, r19	; 0x07
    1fbe:	26 83       	std	Z+6, r18	; 0x06

    osEE_counter_insert_rel_trigger(
    1fc0:	0e 94 d5 10 	call	0x21aa	; 0x21aa <osEE_counter_insert_rel_trigger>
      p_counter_db, p_trigger_db, increment
    );
    ev = E_OK;
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	08 95       	ret
  /* Lock the Core Lock witch the counter is tied */
  osEE_lock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */

  if (p_trigger_cb->active) {
    ev = E_OS_STATE;
    1fca:	87 e0       	ldi	r24, 0x07	; 7
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
  }
#if (!defined(OSEE_SINGLECORE))
  osEE_unlock_core_id(counter_core_id);
#endif /* OSEE_SINGLECORE */
  return ev;
}
    1fce:	08 95       	ret

00001fd0 <__vector_default>:
#include "ee_avr8_irqstub.h"

/* Erika Interrupt Vector Definition */

/* DUMMY interrupt vector */
OSEE_AVR8_ISR_NOT_DEFINED(BADISR_vect)
    1fd0:	f8 94       	cli
    1fd2:	ff cf       	rjmp	.-2      	; 0x1fd2 <__vector_default+0x2>

00001fd4 <osEE_atmega_intvect>:

/* Interrupt Vector Table Recall. */
void osEE_atmega_intvect(void) {
  OSEE_AVR8_REQUEST_IRQ_ENTRY(BADISR_vect);
    1fd4:	e0 ed       	ldi	r30, 0xD0	; 208
}
    1fd6:	08 95       	ret

00001fd8 <__vector_1>:

#else  /* OSEE_API_DYNAMIC */

/* INT0 interrupt vector */
#if (defined(OSEE_AVR8_INT0_ISR_TID)) && (OSEE_AVR8_INT0_ISR_CAT == 2)
OSEE_AVR8_ISR2_DEFINITION(INT0_vect, OSEE_AVR8_INT0_ISR_TID)
    1fd8:	8f 93       	push	r24
    1fda:	9f 93       	push	r25
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <osEE_avr8_isr2_stub>
    1fe2:	9f 91       	pop	r25
    1fe4:	8f 91       	pop	r24
    1fe6:	18 95       	reti

00001fe8 <__vector_11>:
OSEE_AVR8_ISR_NOT_DEFINED(TIMER1_CAPT_vect)
#endif /* OSEE_AVR8_TIMER1_CAPT_ISR */

/* TIMER1_COMPA interrupt vector */
#if (defined(OSEE_AVR8_TIMER1_COMPA_ISR_TID)) && (OSEE_AVR8_TIMER1_COMPA_ISR_CAT == 2)
OSEE_AVR8_ISR2_DEFINITION(TIMER1_COMPA_vect, OSEE_AVR8_TIMER1_COMPA_ISR_TID)
    1fe8:	8f 93       	push	r24
    1fea:	9f 93       	push	r25
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <osEE_avr8_isr2_stub>
    1ff2:	9f 91       	pop	r25
    1ff4:	8f 91       	pop	r24
    1ff6:	18 95       	reti

00001ff8 <osEE_avr8_isr2_stub>:
 * ISR Type 2 stub.
 */
void OSEE_COMPILER_KEEP OSEE_NAKED osEE_avr8_isr2_stub(TaskType t)
{

  OSEE_AVR8_ISR_PREINSTUB();
    1ff8:	1f 92       	push	r1
    1ffa:	0f 92       	push	r0
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	0f 92       	push	r0
    2000:	11 24       	eor	r1, r1
    2002:	2f 93       	push	r18
    2004:	3f 93       	push	r19
    2006:	4f 93       	push	r20
    2008:	5f 93       	push	r21
    200a:	6f 93       	push	r22
    200c:	7f 93       	push	r23
    200e:	af 93       	push	r26
    2010:	bf 93       	push	r27
    2012:	ef 93       	push	r30
    2014:	ff 93       	push	r31
{
  VAR(StatusType, AUTOMATIC) ret_val  = E_OK;
  CONSTP2VAR(OsEE_KDB, AUTOMATIC, OS_APPL_DATA) p_kdb = osEE_get_kernel();
  CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA) p_cdb = osEE_get_curr_core();
  CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
    p_act_tdb = (*p_kdb->p_tdb_ptr_array)[isr2_id];
    2016:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <KDB+0x2>
    201a:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <KDB+0x3>
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	e8 0f       	add	r30, r24
    2026:	f9 1f       	adc	r31, r25
    2028:	40 81       	ld	r20, Z
    202a:	51 81       	ldd	r21, Z+1	; 0x01

  /* Mark the TASK as Activated */
  ++p_act_tdb->p_tcb->current_num_of_act;
    202c:	da 01       	movw	r26, r20
    202e:	14 96       	adiw	r26, 0x04	; 4
    2030:	ed 91       	ld	r30, X+
    2032:	fc 91       	ld	r31, X
    2034:	80 81       	ld	r24, Z
    2036:	8f 5f       	subi	r24, 0xFF	; 255
    2038:	80 83       	st	Z, r24

  osEE_scheduler_task_set_running(p_kdb, p_cdb, p_act_tdb);
    203a:	6a ec       	ldi	r22, 0xCA	; 202
    203c:	71 e0       	ldi	r23, 0x01	; 1
    203e:	84 eb       	ldi	r24, 0xB4	; 180
    2040:	91 e0       	ldi	r25, 0x01	; 1
    2042:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <osEE_scheduler_task_set_running>
#endif /* __ATXMEGA__ */

  /* Activate ISR2 */
  osEE_activate_isr2(t);

  OSEE_AVR8_ISR_POSTINSTUB();
    2046:	ff 91       	pop	r31
    2048:	ef 91       	pop	r30
    204a:	bf 91       	pop	r27
    204c:	af 91       	pop	r26
    204e:	7f 91       	pop	r23
    2050:	6f 91       	pop	r22
    2052:	5f 91       	pop	r21
    2054:	4f 91       	pop	r20
    2056:	3f 91       	pop	r19
    2058:	2f 91       	pop	r18
    205a:	0f 90       	pop	r0
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	0f 90       	pop	r0
    2060:	1f 90       	pop	r1

  OSEE_RETURN();
    2062:	08 95       	ret

00002064 <osEE_avr8_system_timer_init>:

#if (defined(OSEE_SYSTEM_TIMER_DEVICE))
#if (OSEE_SYSTEM_TIMER_DEVICE == OSEE_AVR8_TIMER1_COMPA)

void osEE_avr8_system_timer_init(void) {
  OsEE_atmega_startTimer1(OSTICKDURATION / OSEE_KILO);
    2064:	68 ee       	ldi	r22, 0xE8	; 232
    2066:	73 e0       	ldi	r23, 0x03	; 3
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <OsEE_atmega_startTimer1>

00002070 <osEE_avr8_system_timer_handler>:
}

ISR2(osEE_avr8_system_timer_handler) {
  OsEE_CDB * p_cdb = osEE_get_curr_core();
  osEE_counter_increment(p_cdb->p_sys_counter_db);
    2070:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <CDB+0x6>
    2074:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <CDB+0x7>
    2078:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <osEE_counter_increment>

0000207c <osEE_change_context_from_running>:
  osEE_change_context_from_running
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    207c:	fb 01       	movw	r30, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    207e:	a4 81       	ldd	r26, Z+4	; 0x04
    2080:	b5 81       	ldd	r27, Z+5	; 0x05
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    2082:	12 96       	adiw	r26, 0x02	; 2
    2084:	2d 91       	ld	r18, X+
    2086:	3c 91       	ld	r19, X
    2088:	13 97       	sbiw	r26, 0x03	; 3

  p_to_tcb->status = OSEE_TASK_RUNNING;
    208a:	44 e0       	ldi	r20, 0x04	; 4
    208c:	50 e0       	ldi	r21, 0x00	; 0
    208e:	13 96       	adiw	r26, 0x03	; 3
    2090:	5c 93       	st	X, r21
    2092:	4e 93       	st	-X, r20
    2094:	12 97       	sbiw	r26, 0x02	; 2
    2096:	dc 01       	movw	r26, r24
    2098:	12 96       	adiw	r26, 0x02	; 2
    209a:	4d 91       	ld	r20, X+
    209c:	5c 91       	ld	r21, X
    209e:	62 81       	ldd	r22, Z+2	; 0x02
    20a0:	73 81       	ldd	r23, Z+3	; 0x03

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    20a2:	cf 01       	movw	r24, r30
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;

  p_to_tcb->status = OSEE_TASK_RUNNING;

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    20a4:	22 30       	cpi	r18, 0x02	; 2
    20a6:	31 05       	cpc	r19, r1
    20a8:	11 f4       	brne	.+4      	; 0x20ae <osEE_change_context_from_running+0x32>
    osEE_hal_save_ctx_and_restore_ctx(p_to, p_to->hdb.p_scb,
    20aa:	0c 94 8c 00 	jmp	0x118	; 0x118 <osEE_hal_save_ctx_and_restore_ctx>
      p_from->hdb.p_scb);
  } else {
    osEE_hal_save_ctx_and_ready2stacked(p_to, p_to->hdb.p_scb,
    20ae:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <osEE_hal_save_ctx_and_ready2stacked>

000020b2 <osEE_change_context_from_task_end>:
  osEE_change_context_from_task_end
(
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_from,
  P2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_CONST) p_to
)
{
    20b2:	cb 01       	movw	r24, r22
  CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA) p_to_tcb  = p_to->p_tcb;
    20b4:	db 01       	movw	r26, r22
    20b6:	14 96       	adiw	r26, 0x04	; 4
    20b8:	ed 91       	ld	r30, X+
    20ba:	fc 91       	ld	r31, X
    20bc:	15 97       	sbiw	r26, 0x05	; 5
  CONST(TaskStateType, AUTOMATIC)     status_prev_running = p_to_tcb->status;
    20be:	22 81       	ldd	r18, Z+2	; 0x02
    20c0:	33 81       	ldd	r19, Z+3	; 0x03

  p_to_tcb->status = OSEE_TASK_RUNNING;
    20c2:	44 e0       	ldi	r20, 0x04	; 4
    20c4:	50 e0       	ldi	r21, 0x00	; 0
    20c6:	53 83       	std	Z+3, r21	; 0x03
    20c8:	42 83       	std	Z+2, r20	; 0x02
    20ca:	12 96       	adiw	r26, 0x02	; 2
    20cc:	6d 91       	ld	r22, X+
    20ce:	7c 91       	ld	r23, X

  if (status_prev_running == OSEE_TASK_READY_STACKED) {
    20d0:	22 30       	cpi	r18, 0x02	; 2
    20d2:	31 05       	cpc	r19, r1
    20d4:	11 f4       	brne	.+4      	; 0x20da <osEE_change_context_from_task_end+0x28>
    osEE_hal_restore_ctx(p_to, p_to->hdb.p_scb);
    20d6:	0c 94 ac 00 	jmp	0x158	; 0x158 <osEE_hal_restore_ctx>
  } else {
    osEE_hal_ready2stacked(p_to, p_to->hdb.p_scb);
    20da:	0c 94 cc 00 	jmp	0x198	; 0x198 <osEE_hal_ready2stacked>

000020de <osEE_idle_task_terminate>:
{
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_ctx;

  CONSTP2VAR(OsEE_HDB, AUTOMATIC, OS_APPL_DATA) p_idle_hdb  = &p_idle_tdb->hdb;
  CONSTP2VAR(OsEE_SDB, AUTOMATIC, OS_APPL_DATA) p_sdb       = p_idle_hdb->p_sdb;
  CONSTP2VAR(OsEE_SCB, AUTOMATIC, OS_APPL_DATA) p_scb       = p_idle_hdb->p_scb;
    20de:	dc 01       	movw	r26, r24
    20e0:	12 96       	adiw	r26, 0x02	; 2
    20e2:	6d 91       	ld	r22, X+
    20e4:	7c 91       	ld	r23, X
    20e6:	13 97       	sbiw	r26, 0x03	; 3
  CONSTP2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA) p_bos       = p_sdb->p_bos;
    20e8:	ed 91       	ld	r30, X+
    20ea:	fc 91       	ld	r31, X
    20ec:	40 81       	ld	r20, Z
    20ee:	51 81       	ldd	r21, Z+1	; 0x01
  P2VAR(OsEE_CTX, AUTOMATIC, OS_APPL_DATA)      p_tos       = p_scb->p_tos;
    20f0:	db 01       	movw	r26, r22
    20f2:	ed 91       	ld	r30, X+
    20f4:	fc 91       	ld	r31, X

  do {
    p_ctx = p_tos;
    p_tos = p_tos->p_ctx;
    20f6:	22 89       	ldd	r18, Z+18	; 0x12
    20f8:	33 89       	ldd	r19, Z+19	; 0x13
  } while ((p_tos != NULL) && (p_tos != p_bos));
    20fa:	21 15       	cp	r18, r1
    20fc:	31 05       	cpc	r19, r1
    20fe:	19 f0       	breq	.+6      	; 0x2106 <osEE_idle_task_terminate+0x28>
    2100:	42 17       	cp	r20, r18
    2102:	53 07       	cpc	r21, r19
    2104:	29 f4       	brne	.+10     	; 0x2110 <osEE_idle_task_terminate+0x32>

  /* Unwind the stack until the last context*/
  p_scb->p_tos = p_ctx;
    2106:	db 01       	movw	r26, r22
    2108:	ed 93       	st	X+, r30
    210a:	fc 93       	st	X, r31

  osEE_hal_restore_ctx(p_idle_tdb, p_scb);
    210c:	0c 94 ac 00 	jmp	0x158	; 0x158 <osEE_hal_restore_ctx>
    2110:	f9 01       	movw	r30, r18
    2112:	f1 cf       	rjmp	.-30     	; 0x20f6 <osEE_idle_task_terminate+0x18>

00002114 <osEE_counter_insert_abs_trigger>:
    }
  }

  /* Turn Off the Trigger */
  p_trigger_cb->active = OSEE_FALSE;
}
    2114:	ef 92       	push	r14
    2116:	ff 92       	push	r15
    2118:	0f 93       	push	r16
    211a:	1f 93       	push	r17
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	dc 01       	movw	r26, r24
    2122:	8d 91       	ld	r24, X+
    2124:	9c 91       	ld	r25, X
    2126:	dc 01       	movw	r26, r24
    2128:	ed 91       	ld	r30, X+
    212a:	fc 91       	ld	r31, X
    212c:	11 97       	sbiw	r26, 0x01	; 1
    212e:	12 96       	adiw	r26, 0x02	; 2
    2130:	0d 91       	ld	r16, X+
    2132:	1c 91       	ld	r17, X
    2134:	db 01       	movw	r26, r22
    2136:	cd 91       	ld	r28, X+
    2138:	dc 91       	ld	r29, X
    213a:	21 e0       	ldi	r18, 0x01	; 1
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	3d 83       	std	Y+5, r19	; 0x05
    2140:	2c 83       	std	Y+4, r18	; 0x04
    2142:	5b 83       	std	Y+3, r21	; 0x03
    2144:	4a 83       	std	Y+2, r20	; 0x02
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 97       	sbiw	r30, 0x00	; 0
    214c:	e1 f0       	breq	.+56     	; 0x2186 <osEE_counter_insert_abs_trigger+0x72>
    214e:	a0 81       	ld	r26, Z
    2150:	b1 81       	ldd	r27, Z+1	; 0x01
    2152:	12 96       	adiw	r26, 0x02	; 2
    2154:	ed 90       	ld	r14, X+
    2156:	fc 90       	ld	r15, X
    2158:	13 97       	sbiw	r26, 0x03	; 3
    215a:	0e 15       	cp	r16, r14
    215c:	1f 05       	cpc	r17, r15
    215e:	68 f4       	brcc	.+26     	; 0x217a <osEE_counter_insert_abs_trigger+0x66>
    2160:	4e 15       	cp	r20, r14
    2162:	5f 05       	cpc	r21, r15
    2164:	18 f4       	brcc	.+6      	; 0x216c <osEE_counter_insert_abs_trigger+0x58>
    2166:	04 17       	cp	r16, r20
    2168:	15 07       	cpc	r17, r21
    216a:	68 f0       	brcs	.+26     	; 0x2186 <osEE_counter_insert_abs_trigger+0x72>
    216c:	fc 90       	ld	r15, X
    216e:	11 96       	adiw	r26, 0x01	; 1
    2170:	ac 91       	ld	r26, X
    2172:	9f 01       	movw	r18, r30
    2174:	ef 2d       	mov	r30, r15
    2176:	fa 2f       	mov	r31, r26
    2178:	e8 cf       	rjmp	.-48     	; 0x214a <osEE_counter_insert_abs_trigger+0x36>
    217a:	04 17       	cp	r16, r20
    217c:	15 07       	cpc	r17, r21
    217e:	18 f0       	brcs	.+6      	; 0x2186 <osEE_counter_insert_abs_trigger+0x72>
    2180:	4e 15       	cp	r20, r14
    2182:	5f 05       	cpc	r21, r15
    2184:	98 f7       	brcc	.-26     	; 0x216c <osEE_counter_insert_abs_trigger+0x58>
    2186:	21 15       	cp	r18, r1
    2188:	31 05       	cpc	r19, r1
    218a:	19 f0       	breq	.+6      	; 0x2192 <osEE_counter_insert_abs_trigger+0x7e>
    218c:	d9 01       	movw	r26, r18
    218e:	8d 91       	ld	r24, X+
    2190:	9c 91       	ld	r25, X
    2192:	dc 01       	movw	r26, r24
    2194:	6d 93       	st	X+, r22
    2196:	7c 93       	st	X, r23
    2198:	f9 83       	std	Y+1, r31	; 0x01
    219a:	e8 83       	st	Y, r30
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	1f 91       	pop	r17
    21a2:	0f 91       	pop	r16
    21a4:	ff 90       	pop	r15
    21a6:	ef 90       	pop	r14
    21a8:	08 95       	ret

000021aa <osEE_counter_insert_rel_trigger>:
    21aa:	cf 93       	push	r28
    21ac:	df 93       	push	r29
    21ae:	dc 01       	movw	r26, r24
    21b0:	12 96       	adiw	r26, 0x02	; 2
    21b2:	ed 91       	ld	r30, X+
    21b4:	fc 91       	ld	r31, X
    21b6:	13 97       	sbiw	r26, 0x03	; 3
    21b8:	0d 90       	ld	r0, X+
    21ba:	bc 91       	ld	r27, X
    21bc:	a0 2d       	mov	r26, r0
    21be:	12 96       	adiw	r26, 0x02	; 2
    21c0:	2d 91       	ld	r18, X+
    21c2:	3c 91       	ld	r19, X
    21c4:	df 01       	movw	r26, r30
    21c6:	a4 1b       	sub	r26, r20
    21c8:	b5 0b       	sbc	r27, r21
    21ca:	a2 17       	cp	r26, r18
    21cc:	b3 07       	cpc	r27, r19
    21ce:	30 f0       	brcs	.+12     	; 0x21dc <osEE_counter_insert_rel_trigger+0x32>
    21d0:	42 0f       	add	r20, r18
    21d2:	53 1f       	adc	r21, r19
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <osEE_counter_insert_abs_trigger>
    21dc:	41 50       	subi	r20, 0x01	; 1
    21de:	51 09       	sbc	r21, r1
    21e0:	42 0f       	add	r20, r18
    21e2:	53 1f       	adc	r21, r19
    21e4:	4e 1b       	sub	r20, r30
    21e6:	5f 0b       	sbc	r21, r31
    21e8:	f5 cf       	rjmp	.-22     	; 0x21d4 <osEE_counter_insert_rel_trigger+0x2a>

000021ea <osEE_counter_increment>:
FUNC(void, OS_CODE)
  osEE_counter_increment
(
  P2VAR(OsEE_CounterDB, AUTOMATIC, OS_APPL_DATA) p_counter_db
)
{
    21ea:	8f 92       	push	r8
    21ec:	9f 92       	push	r9
    21ee:	af 92       	push	r10
    21f0:	bf 92       	push	r11
    21f2:	cf 92       	push	r12
    21f4:	df 92       	push	r13
    21f6:	ef 92       	push	r14
    21f8:	ff 92       	push	r15
    21fa:	0f 93       	push	r16
    21fc:	1f 93       	push	r17
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
  CONSTP2VAR(OsEE_CounterCB, AUTOMATIC, OS_APPL_DATA)
    p_counter_cb = p_counter_db->p_counter_cb;
    2202:	dc 01       	movw	r26, r24
    2204:	ed 90       	ld	r14, X+
    2206:	fc 90       	ld	r15, X
    2208:	11 97       	sbiw	r26, 0x01	; 1
       This because is more efficient to read SFR than mamory. */
    CONST(CoreIdType, AUTOMATIC) counter_core_id = osEE_get_curr_core_id();

    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
    220a:	f7 01       	movw	r30, r14
    220c:	22 81       	ldd	r18, Z+2	; 0x02
    220e:	33 81       	ldd	r19, Z+3	; 0x03
    2210:	12 96       	adiw	r26, 0x02	; 2
    2212:	4d 91       	ld	r20, X+
    2214:	5c 91       	ld	r21, X
    2216:	24 17       	cp	r18, r20
    2218:	35 07       	cpc	r19, r21
    221a:	08 f4       	brcc	.+2      	; 0x221e <osEE_counter_increment+0x34>
    221c:	60 c0       	rjmp	.+192    	; 0x22de <osEE_counter_increment+0xf4>
      counter_value = (p_counter_cb->value = 0U);
    221e:	13 82       	std	Z+3, r1	; 0x03
    2220:	12 82       	std	Z+2, r1	; 0x02
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	20 e0       	ldi	r18, 0x00	; 0
            the counters, whenever the locks are not limited resources for the
            HW and falling back to use core locks only for those architectures
            where this is not true. TBD. */
    osEE_lock_core_id(counter_core_id);

    p_triggered_db = p_counter_cb->trigger_queue;
    2226:	f7 01       	movw	r30, r14
    2228:	c0 81       	ld	r28, Z
    222a:	d1 81       	ldd	r29, Z+1	; 0x01

    if (p_triggered_db != NULL) {
    222c:	20 97       	sbiw	r28, 0x00	; 0
    222e:	09 f4       	brne	.+2      	; 0x2232 <osEE_counter_increment+0x48>
    2230:	49 c0       	rjmp	.+146    	; 0x22c4 <osEE_counter_increment+0xda>
      P2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
        p_triggered_cb = p_triggered_db->p_trigger_cb;

      if (p_triggered_cb->when == counter_value) {
    2232:	a8 81       	ld	r26, Y
    2234:	b9 81       	ldd	r27, Y+1	; 0x01
    2236:	12 96       	adiw	r26, 0x02	; 2
    2238:	4d 91       	ld	r20, X+
    223a:	5c 91       	ld	r21, X
    223c:	42 17       	cp	r20, r18
    223e:	53 07       	cpc	r21, r19
    2240:	09 f0       	breq	.+2      	; 0x2244 <osEE_counter_increment+0x5a>
    2242:	40 c0       	rjmp	.+128    	; 0x22c4 <osEE_counter_increment+0xda>
    2244:	de 01       	movw	r26, r28
          p_previous;

        do {
          /* Now I will use previous to hold the previous checked alarm */
          p_previous = p_current;
          p_current = p_current->p_trigger_cb->p_next;
    2246:	2d 91       	ld	r18, X+
    2248:	3c 91       	ld	r19, X
    224a:	f9 01       	movw	r30, r18
    224c:	a0 81       	ld	r26, Z
    224e:	b1 81       	ldd	r27, Z+1	; 0x01
        } while ((p_current != NULL) &&
          (p_current->p_trigger_cb->when == counter_value));
    2250:	10 97       	sbiw	r26, 0x00	; 0
    2252:	49 f0       	breq	.+18     	; 0x2266 <osEE_counter_increment+0x7c>
    2254:	6d 91       	ld	r22, X+
    2256:	7c 91       	ld	r23, X
    2258:	11 97       	sbiw	r26, 0x01	; 1

        do {
          /* Now I will use previous to hold the previous checked alarm */
          p_previous = p_current;
          p_current = p_current->p_trigger_cb->p_next;
        } while ((p_current != NULL) &&
    225a:	fb 01       	movw	r30, r22
    225c:	62 81       	ldd	r22, Z+2	; 0x02
    225e:	73 81       	ldd	r23, Z+3	; 0x03
    2260:	46 17       	cp	r20, r22
    2262:	57 07       	cpc	r21, r23
    2264:	81 f3       	breq	.-32     	; 0x2246 <osEE_counter_increment+0x5c>
    2266:	8c 01       	movw	r16, r24
          (p_current->p_trigger_cb->when == counter_value));

        /* I set the end of handled queue */
        p_previous->p_trigger_cb->p_next = NULL;
    2268:	f9 01       	movw	r30, r18
    226a:	11 82       	std	Z+1, r1	; 0x01
    226c:	10 82       	st	Z, r1
        /* I set the head of the trigger queue to the current value
           (maybe NULL) */
        p_counter_cb->trigger_queue = p_current;
    226e:	f7 01       	movw	r30, r14
    2270:	b1 83       	std	Z+1, r27	; 0x01
    2272:	a0 83       	st	Z, r26

        if (((p_tcb->wait_mask & mask) != 0U) &&
            (p_tcb->status == OSEE_TASK_WAITING))
        {
          CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
            p_sn = osEE_sn_alloc(&p_cdb_rel->p_ccb->p_free_sn);
    2274:	c0 90 ca 01 	lds	r12, 0x01CA	; 0x8001ca <CDB>
    2278:	d0 90 cb 01 	lds	r13, 0x01CB	; 0x8001cb <CDB+0x1>
            p_trigger_to_be_handled = p_triggered_db;

          /* Prepare next trigger to be handled here, before actually handle the
           * current one, otherwise cycling triggers will mess with the list of
           * triggers that have to be handled now */
          p_triggered_db = p_triggered_db->p_trigger_cb->p_next;
    227c:	e8 80       	ld	r14, Y
    227e:	f9 80       	ldd	r15, Y+1	; 0x01
    2280:	d7 01       	movw	r26, r14
    2282:	9c 90       	ld	r9, X
    2284:	11 96       	adiw	r26, 0x01	; 1
    2286:	8c 90       	ld	r8, X
    2288:	11 97       	sbiw	r26, 0x01	; 1
  CONSTP2VAR(OsEE_TriggerDB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_db = osEE_alarm_get_trigger_db(p_alarm_db);
  CONSTP2VAR(OsEE_TriggerCB, AUTOMATIC, OS_APPL_DATA)
    p_trigger_cb = p_trigger_db->p_trigger_cb;
  CONST(TickType, AUTOMATIC)
    cycle = p_trigger_cb->cycle;
    228a:	16 96       	adiw	r26, 0x06	; 6
    228c:	ad 90       	ld	r10, X+
    228e:	bc 90       	ld	r11, X
(
  P2CONST(OsEE_action, AUTOMATIC, OS_APPL_DATA) p_action
)
{
  VAR(StatusType, AUTOMATIC) ev;
  switch (p_action->type) {
    2290:	8c 85       	ldd	r24, Y+12	; 0x0c
    2292:	9d 85       	ldd	r25, Y+13	; 0x0d
    2294:	81 30       	cpi	r24, 0x01	; 1
    2296:	91 05       	cpc	r25, r1
    2298:	91 f1       	breq	.+100    	; 0x22fe <osEE_counter_increment+0x114>
    229a:	30 f1       	brcs	.+76     	; 0x22e8 <osEE_counter_increment+0xfe>
    229c:	82 30       	cpi	r24, 0x02	; 2
    229e:	91 05       	cpc	r25, r1
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <osEE_counter_increment+0xba>
    22a2:	62 c0       	rjmp	.+196    	; 0x2368 <osEE_counter_increment+0x17e>
    22a4:	03 97       	sbiw	r24, 0x03	; 3
    22a6:	09 f4       	brne	.+2      	; 0x22aa <osEE_counter_increment+0xc0>
    22a8:	64 c0       	rjmp	.+200    	; 0x2372 <osEE_counter_increment+0x188>
    cycle = p_trigger_cb->cycle;

  ev = osEE_handle_action(&p_alarm_db->action);

  /* TODO: Add active check to let call CancelAlarm from callback... */
  if (cycle > 0U) {
    22aa:	a1 14       	cp	r10, r1
    22ac:	b1 04       	cpc	r11, r1
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <osEE_counter_increment+0xc8>
    22b0:	64 c0       	rjmp	.+200    	; 0x237a <osEE_counter_increment+0x190>
    osEE_counter_insert_rel_trigger(
    22b2:	a5 01       	movw	r20, r10
    22b4:	be 01       	movw	r22, r28
    22b6:	c8 01       	movw	r24, r16
    22b8:	0e 94 d5 10 	call	0x21aa	; 0x21aa <osEE_counter_insert_rel_trigger>
    22bc:	c9 2d       	mov	r28, r9
    22be:	d8 2d       	mov	r29, r8
            osEE_end_primitive(flags);
          }
#else
          (void)ev; /* TODO: Handle ErrorHook */
#endif /* OSEE_HAS_ERRORHOOK */
        } while (p_triggered_db != NULL);
    22c0:	20 97       	sbiw	r28, 0x00	; 0
    22c2:	e1 f6       	brne	.-72     	; 0x227c <osEE_counter_increment+0x92>
    }
    /* XXX: Unlock the core only at the End of The Service, to not incur in
            races when handling cycling triggers. */
    osEE_unlock_core_id(counter_core_id);
  }
}
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	1f 91       	pop	r17
    22ca:	0f 91       	pop	r16
    22cc:	ff 90       	pop	r15
    22ce:	ef 90       	pop	r14
    22d0:	df 90       	pop	r13
    22d2:	cf 90       	pop	r12
    22d4:	bf 90       	pop	r11
    22d6:	af 90       	pop	r10
    22d8:	9f 90       	pop	r9
    22da:	8f 90       	pop	r8
    22dc:	08 95       	ret
    /* Counter Increment can be done outside lock critical section, since only
       a core is allowed to do that */
    if (p_counter_cb->value >= p_counter_db->info.maxallowedvalue) {
      counter_value = (p_counter_cb->value = 0U);
    } else {
      counter_value = ++p_counter_cb->value;
    22de:	2f 5f       	subi	r18, 0xFF	; 255
    22e0:	3f 4f       	sbci	r19, 0xFF	; 255
    22e2:	33 83       	std	Z+3, r19	; 0x03
    22e4:	22 83       	std	Z+2, r18	; 0x02
    22e6:	9f cf       	rjmp	.-194    	; 0x2226 <osEE_counter_increment+0x3c>
    case OSEE_ACTION_TASK:
    {
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;

      ev = osEE_scheduler_task_activated(
    22e8:	4e 81       	ldd	r20, Y+6	; 0x06
    22ea:	5f 81       	ldd	r21, Y+7	; 0x07
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	6a ec       	ldi	r22, 0xCA	; 202
    22f2:	71 e0       	ldi	r23, 0x01	; 1
    22f4:	84 eb       	ldi	r24, 0xB4	; 180
    22f6:	91 e0       	ldi	r25, 0x01	; 1
    22f8:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <osEE_scheduler_task_activated>
    22fc:	d6 cf       	rjmp	.-84     	; 0x22aa <osEE_counter_increment+0xc0>
    break;
#if (defined(OSEE_HAS_EVENTS))
    case OSEE_ACTION_EVENT:
    {
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;
    22fe:	6e 81       	ldd	r22, Y+6	; 0x06
    2300:	7f 81       	ldd	r23, Y+7	; 0x07
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_tcb = p_tdb->p_tcb;
    2302:	db 01       	movw	r26, r22
    2304:	14 96       	adiw	r26, 0x04	; 4
    2306:	ed 91       	ld	r30, X+
    2308:	fc 91       	ld	r31, X
      CONSTP2VAR(OsEE_CDB, AUTOMATIC, OS_APPL_DATA)
        p_cdb_rel = osEE_get_task_curr_core(p_tdb);

      osEE_lock_core(p_cdb_rel);
#if (defined(OSEE_HAS_CHECKS))
      if (p_tcb->status == OSEE_TASK_SUSPENDED) {
    230a:	42 81       	ldd	r20, Z+2	; 0x02
    230c:	53 81       	ldd	r21, Z+3	; 0x03
    230e:	41 15       	cp	r20, r1
    2310:	51 05       	cpc	r21, r1
    2312:	59 f2       	breq	.-106    	; 0x22aa <osEE_counter_increment+0xc0>
      CONSTP2VAR(OsEE_TDB, AUTOMATIC, OS_APPL_DATA)
        p_tdb = p_action->param.p_tdb;
      CONSTP2VAR(OsEE_TCB, AUTOMATIC, OS_APPL_DATA)
        p_tcb = p_tdb->p_tcb;
      CONST(EventMaskType, AUTOMATIC)
        mask = p_action->param.mask;
    2314:	8a 85       	ldd	r24, Y+10	; 0x0a
    2316:	9b 85       	ldd	r25, Y+11	; 0x0b
      } else
#endif /* OSEE_HAS_CHECKS */
      {
        /* Set the event mask only if the task is not suspended */

        p_tcb->event_mask |= mask;
    2318:	20 85       	ldd	r18, Z+8	; 0x08
    231a:	31 85       	ldd	r19, Z+9	; 0x09
    231c:	28 2b       	or	r18, r24
    231e:	39 2b       	or	r19, r25
    2320:	31 87       	std	Z+9, r19	; 0x09
    2322:	20 87       	std	Z+8, r18	; 0x08

        if (((p_tcb->wait_mask & mask) != 0U) &&
    2324:	26 81       	ldd	r18, Z+6	; 0x06
    2326:	37 81       	ldd	r19, Z+7	; 0x07
    2328:	82 23       	and	r24, r18
    232a:	93 23       	and	r25, r19
    232c:	89 2b       	or	r24, r25
    232e:	09 f4       	brne	.+2      	; 0x2332 <osEE_counter_increment+0x148>
    2330:	bc cf       	rjmp	.-136    	; 0x22aa <osEE_counter_increment+0xc0>
    2332:	43 30       	cpi	r20, 0x03	; 3
    2334:	51 05       	cpc	r21, r1
    2336:	09 f0       	breq	.+2      	; 0x233a <osEE_counter_increment+0x150>
    2338:	b8 cf       	rjmp	.-144    	; 0x22aa <osEE_counter_increment+0xc0>
  P2VAR(OsEE_SN *, AUTOMATIC, OS_APPL_DATA) pp_fist
)
{
  P2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA) p_sn_allocated;

  p_sn_allocated          = (*pp_fist);
    233a:	d6 01       	movw	r26, r12
    233c:	14 96       	adiw	r26, 0x04	; 4
    233e:	ed 91       	ld	r30, X+
    2340:	fc 91       	ld	r31, X
    2342:	15 97       	sbiw	r26, 0x05	; 5
  (*pp_fist)              = p_sn_allocated->p_next;
    2344:	80 81       	ld	r24, Z
    2346:	91 81       	ldd	r25, Z+1	; 0x01
    2348:	15 96       	adiw	r26, 0x05	; 5
    234a:	9c 93       	st	X, r25
    234c:	8e 93       	st	-X, r24
    234e:	14 97       	sbiw	r26, 0x04	; 4
  p_sn_allocated->p_next  = NULL;
    2350:	11 82       	std	Z+1, r1	; 0x01
    2352:	10 82       	st	Z, r1
            (p_tcb->status == OSEE_TASK_WAITING))
        {
          CONSTP2VAR(OsEE_SN, AUTOMATIC, OS_APPL_DATA)
            p_sn = osEE_sn_alloc(&p_cdb_rel->p_ccb->p_free_sn);

          p_sn->p_tdb = p_tdb;
    2354:	73 83       	std	Z+3, r23	; 0x03
    2356:	62 83       	std	Z+2, r22	; 0x02

          /* Release the TASK (and the SN) */
          (void)osEE_scheduler_task_unblocked(
    2358:	af 01       	movw	r20, r30
    235a:	6a ec       	ldi	r22, 0xCA	; 202
    235c:	71 e0       	ldi	r23, 0x01	; 1
    235e:	84 eb       	ldi	r24, 0xB4	; 180
    2360:	91 e0       	ldi	r25, 0x01	; 1
    2362:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <osEE_scheduler_task_unblocked>
    2366:	a1 cf       	rjmp	.-190    	; 0x22aa <osEE_counter_increment+0xc0>
    }
    break;
#endif /* OSEE_HAS_EVENTS */
    case OSEE_ACTION_COUNTER:
      /* XXX: In case of multicore, I need at least reentrant spinlocks!!! */
      osEE_counter_increment(p_action->param.p_counter_db);
    2368:	88 85       	ldd	r24, Y+8	; 0x08
    236a:	99 85       	ldd	r25, Y+9	; 0x09
    236c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <osEE_counter_increment>
    2370:	9c cf       	rjmp	.-200    	; 0x22aa <osEE_counter_increment+0xc0>
      CONST(OsEE_os_context, AUTOMATIC)
        prev_os_context = p_ccb->os_context;

      p_ccb->os_context = OSEE_ALARMCALLBACK_CTX;
#endif /* OSEE_HAS_CONTEXT */
      p_action->param.f();
    2372:	ec 81       	ldd	r30, Y+4	; 0x04
    2374:	fd 81       	ldd	r31, Y+5	; 0x05
    2376:	09 95       	icall
    2378:	98 cf       	rjmp	.-208    	; 0x22aa <osEE_counter_increment+0xc0>
  if (cycle > 0U) {
    osEE_counter_insert_rel_trigger(
      p_counter_db, p_trigger_db, cycle
    );
  } else {
    p_trigger_cb->active = OSEE_FALSE;
    237a:	f7 01       	movw	r30, r14
    237c:	15 82       	std	Z+5, r1	; 0x05
    237e:	14 82       	std	Z+4, r1	; 0x04
    2380:	9d cf       	rjmp	.-198    	; 0x22bc <osEE_counter_increment+0xd2>

00002382 <OsEE_atmega_startTimer1>:
 * - x < TIMER_1_PRESCALER_1024_MAX_TICKS = 4194304:	64     us
 */
void OsEE_atmega_startTimer1(uint32_t microsecondsInterval) {
  uint8_t	timer1Prescaler;
  uint16_t	timer1CompareValue;
  TCCR1B = 0;	/* Pause Timer. */
    2382:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
  TCCR1A = 0;
    2386:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
  TCCR1C = 0;
    238a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
  TCNT1  = 0;
    238e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    2392:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
   * 0 1 1 clkIO/64 (From prescaler)
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    2396:	61 15       	cp	r22, r1
    2398:	20 e1       	ldi	r18, 0x10	; 16
    239a:	72 07       	cpc	r23, r18
    239c:	81 05       	cpc	r24, r1
    239e:	91 05       	cpc	r25, r1
    23a0:	a0 f4       	brcc	.+40     	; 0x23ca <OsEE_atmega_startTimer1+0x48>
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
    23a2:	e4 e0       	ldi	r30, 0x04	; 4
    23a4:	66 0f       	add	r22, r22
    23a6:	77 1f       	adc	r23, r23
    23a8:	ea 95       	dec	r30
    23aa:	e1 f7       	brne	.-8      	; 0x23a4 <OsEE_atmega_startTimer1+0x22>
    23ac:	61 50       	subi	r22, 0x01	; 1
    23ae:	71 09       	sbc	r23, r1
   * 1 0 0 clkIO/256 (From prescaler)
   * 1 0 1 clkIO/1024 (From prescaler)
   */
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
  }
#else
  #error("Unsupported CPU frequency")
#endif
  TIFR1  = (1 << OCIE1A);	/* Clear Output Compare A Match Flag. */
    23b2:	92 e0       	ldi	r25, 0x02	; 2
    23b4:	96 bb       	out	0x16, r25	; 22
  TIMSK1 = (1 << OCIE1A);	/* Output Compare A Match Interrupt Enable */
    23b6:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
  OCR1A  = timer1CompareValue;	/* Set Compare A Match Value */
    23ba:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    23be:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  TCCR1B = (1 << WGM12) | timer1Prescaler;	/* Set CTC Mode and Prescaler. */
    23c2:	88 60       	ori	r24, 0x08	; 8
    23c4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
}	/* startTimer1() */
    23c8:	08 95       	ret
#if (F_CPU == 16000000L)
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    23ca:	61 15       	cp	r22, r1
    23cc:	20 e8       	ldi	r18, 0x80	; 128
    23ce:	72 07       	cpc	r23, r18
    23d0:	81 05       	cpc	r24, r1
    23d2:	91 05       	cpc	r25, r1
    23d4:	30 f4       	brcc	.+12     	; 0x23e2 <OsEE_atmega_startTimer1+0x60>
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
    23d6:	66 0f       	add	r22, r22
    23d8:	77 1f       	adc	r23, r23
    23da:	61 50       	subi	r22, 0x01	; 1
    23dc:	71 09       	sbc	r23, r1
  if ( microsecondsInterval < TIMER_1_NO_PRESCALER_MAX_TICKS ) {
    timer1Prescaler = (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 4) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    23de:	82 e0       	ldi	r24, 0x02	; 2
    23e0:	e8 cf       	rjmp	.-48     	; 0x23b2 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    23e2:	6c 3f       	cpi	r22, 0xFC	; 252
    23e4:	2f ef       	ldi	r18, 0xFF	; 255
    23e6:	72 07       	cpc	r23, r18
    23e8:	23 e0       	ldi	r18, 0x03	; 3
    23ea:	82 07       	cpc	r24, r18
    23ec:	91 05       	cpc	r25, r1
    23ee:	58 f4       	brcc	.+22     	; 0x2406 <OsEE_atmega_startTimer1+0x84>
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
    23f0:	42 e0       	ldi	r20, 0x02	; 2
    23f2:	96 95       	lsr	r25
    23f4:	87 95       	ror	r24
    23f6:	77 95       	ror	r23
    23f8:	67 95       	ror	r22
    23fa:	4a 95       	dec	r20
    23fc:	d1 f7       	brne	.-12     	; 0x23f2 <OsEE_atmega_startTimer1+0x70>
    23fe:	61 50       	subi	r22, 0x01	; 1
    2400:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_8_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11);
    timer1CompareValue = ((uint16_t)(microsecondsInterval << 1) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    2402:	83 e0       	ldi	r24, 0x03	; 3
    2404:	d6 cf       	rjmp	.-84     	; 0x23b2 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    2406:	61 15       	cp	r22, r1
    2408:	71 05       	cpc	r23, r1
    240a:	20 e1       	ldi	r18, 0x10	; 16
    240c:	82 07       	cpc	r24, r18
    240e:	91 05       	cpc	r25, r1
    2410:	58 f4       	brcc	.+22     	; 0x2428 <OsEE_atmega_startTimer1+0xa6>
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
    2412:	34 e0       	ldi	r19, 0x04	; 4
    2414:	96 95       	lsr	r25
    2416:	87 95       	ror	r24
    2418:	77 95       	ror	r23
    241a:	67 95       	ror	r22
    241c:	3a 95       	dec	r19
    241e:	d1 f7       	brne	.-12     	; 0x2414 <OsEE_atmega_startTimer1+0x92>
    2420:	61 50       	subi	r22, 0x01	; 1
    2422:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_64_MAX_TICKS ) {
    timer1Prescaler = (1 << CS11) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 2) - 1);
  }
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    2424:	84 e0       	ldi	r24, 0x04	; 4
    2426:	c5 cf       	rjmp	.-118    	; 0x23b2 <OsEE_atmega_startTimer1+0x30>
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 6) - 1);
    2428:	26 e0       	ldi	r18, 0x06	; 6
    242a:	96 95       	lsr	r25
    242c:	87 95       	ror	r24
    242e:	77 95       	ror	r23
    2430:	67 95       	ror	r22
    2432:	2a 95       	dec	r18
    2434:	d1 f7       	brne	.-12     	; 0x242a <OsEE_atmega_startTimer1+0xa8>
    2436:	61 50       	subi	r22, 0x01	; 1
    2438:	71 09       	sbc	r23, r1
  else if ( microsecondsInterval < TIMER_1_PRESCALER_256_MAX_TICKS ) {
    timer1Prescaler = (1 << CS12);
    timer1CompareValue = ((uint16_t)(microsecondsInterval >> 4) - 1);
  }
  else {	/*  microsecondsInterval < TIMER_1_PRESCALER_1024_MAX_TICKS */
    timer1Prescaler = (1 << CS12) | (1 << CS10);
    243a:	85 e0       	ldi	r24, 0x05	; 5
    243c:	ba cf       	rjmp	.-140    	; 0x23b2 <OsEE_atmega_startTimer1+0x30>

0000243e <__subsf3>:
    243e:	50 58       	subi	r21, 0x80	; 128

00002440 <__addsf3>:
    2440:	bb 27       	eor	r27, r27
    2442:	aa 27       	eor	r26, r26
    2444:	0e 94 37 12 	call	0x246e	; 0x246e <__addsf3x>
    2448:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__fp_round>
    244c:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fp_pscA>
    2450:	38 f0       	brcs	.+14     	; 0x2460 <__addsf3+0x20>
    2452:	0e 94 aa 13 	call	0x2754	; 0x2754 <__fp_pscB>
    2456:	20 f0       	brcs	.+8      	; 0x2460 <__addsf3+0x20>
    2458:	39 f4       	brne	.+14     	; 0x2468 <__addsf3+0x28>
    245a:	9f 3f       	cpi	r25, 0xFF	; 255
    245c:	19 f4       	brne	.+6      	; 0x2464 <__addsf3+0x24>
    245e:	26 f4       	brtc	.+8      	; 0x2468 <__addsf3+0x28>
    2460:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <__fp_nan>
    2464:	0e f4       	brtc	.+2      	; 0x2468 <__addsf3+0x28>
    2466:	e0 95       	com	r30
    2468:	e7 fb       	bst	r30, 7
    246a:	0c 94 9a 13 	jmp	0x2734	; 0x2734 <__fp_inf>

0000246e <__addsf3x>:
    246e:	e9 2f       	mov	r30, r25
    2470:	0e 94 c2 13 	call	0x2784	; 0x2784 <__fp_split3>
    2474:	58 f3       	brcs	.-42     	; 0x244c <__addsf3+0xc>
    2476:	ba 17       	cp	r27, r26
    2478:	62 07       	cpc	r22, r18
    247a:	73 07       	cpc	r23, r19
    247c:	84 07       	cpc	r24, r20
    247e:	95 07       	cpc	r25, r21
    2480:	20 f0       	brcs	.+8      	; 0x248a <__addsf3x+0x1c>
    2482:	79 f4       	brne	.+30     	; 0x24a2 <__addsf3x+0x34>
    2484:	a6 f5       	brtc	.+104    	; 0x24ee <__addsf3x+0x80>
    2486:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__fp_zero>
    248a:	0e f4       	brtc	.+2      	; 0x248e <__addsf3x+0x20>
    248c:	e0 95       	com	r30
    248e:	0b 2e       	mov	r0, r27
    2490:	ba 2f       	mov	r27, r26
    2492:	a0 2d       	mov	r26, r0
    2494:	0b 01       	movw	r0, r22
    2496:	b9 01       	movw	r22, r18
    2498:	90 01       	movw	r18, r0
    249a:	0c 01       	movw	r0, r24
    249c:	ca 01       	movw	r24, r20
    249e:	a0 01       	movw	r20, r0
    24a0:	11 24       	eor	r1, r1
    24a2:	ff 27       	eor	r31, r31
    24a4:	59 1b       	sub	r21, r25
    24a6:	99 f0       	breq	.+38     	; 0x24ce <__addsf3x+0x60>
    24a8:	59 3f       	cpi	r21, 0xF9	; 249
    24aa:	50 f4       	brcc	.+20     	; 0x24c0 <__addsf3x+0x52>
    24ac:	50 3e       	cpi	r21, 0xE0	; 224
    24ae:	68 f1       	brcs	.+90     	; 0x250a <__addsf3x+0x9c>
    24b0:	1a 16       	cp	r1, r26
    24b2:	f0 40       	sbci	r31, 0x00	; 0
    24b4:	a2 2f       	mov	r26, r18
    24b6:	23 2f       	mov	r18, r19
    24b8:	34 2f       	mov	r19, r20
    24ba:	44 27       	eor	r20, r20
    24bc:	58 5f       	subi	r21, 0xF8	; 248
    24be:	f3 cf       	rjmp	.-26     	; 0x24a6 <__addsf3x+0x38>
    24c0:	46 95       	lsr	r20
    24c2:	37 95       	ror	r19
    24c4:	27 95       	ror	r18
    24c6:	a7 95       	ror	r26
    24c8:	f0 40       	sbci	r31, 0x00	; 0
    24ca:	53 95       	inc	r21
    24cc:	c9 f7       	brne	.-14     	; 0x24c0 <__addsf3x+0x52>
    24ce:	7e f4       	brtc	.+30     	; 0x24ee <__addsf3x+0x80>
    24d0:	1f 16       	cp	r1, r31
    24d2:	ba 0b       	sbc	r27, r26
    24d4:	62 0b       	sbc	r22, r18
    24d6:	73 0b       	sbc	r23, r19
    24d8:	84 0b       	sbc	r24, r20
    24da:	ba f0       	brmi	.+46     	; 0x250a <__addsf3x+0x9c>
    24dc:	91 50       	subi	r25, 0x01	; 1
    24de:	a1 f0       	breq	.+40     	; 0x2508 <__addsf3x+0x9a>
    24e0:	ff 0f       	add	r31, r31
    24e2:	bb 1f       	adc	r27, r27
    24e4:	66 1f       	adc	r22, r22
    24e6:	77 1f       	adc	r23, r23
    24e8:	88 1f       	adc	r24, r24
    24ea:	c2 f7       	brpl	.-16     	; 0x24dc <__addsf3x+0x6e>
    24ec:	0e c0       	rjmp	.+28     	; 0x250a <__addsf3x+0x9c>
    24ee:	ba 0f       	add	r27, r26
    24f0:	62 1f       	adc	r22, r18
    24f2:	73 1f       	adc	r23, r19
    24f4:	84 1f       	adc	r24, r20
    24f6:	48 f4       	brcc	.+18     	; 0x250a <__addsf3x+0x9c>
    24f8:	87 95       	ror	r24
    24fa:	77 95       	ror	r23
    24fc:	67 95       	ror	r22
    24fe:	b7 95       	ror	r27
    2500:	f7 95       	ror	r31
    2502:	9e 3f       	cpi	r25, 0xFE	; 254
    2504:	08 f0       	brcs	.+2      	; 0x2508 <__addsf3x+0x9a>
    2506:	b0 cf       	rjmp	.-160    	; 0x2468 <__addsf3+0x28>
    2508:	93 95       	inc	r25
    250a:	88 0f       	add	r24, r24
    250c:	08 f0       	brcs	.+2      	; 0x2510 <__addsf3x+0xa2>
    250e:	99 27       	eor	r25, r25
    2510:	ee 0f       	add	r30, r30
    2512:	97 95       	ror	r25
    2514:	87 95       	ror	r24
    2516:	08 95       	ret

00002518 <__cmpsf2>:
    2518:	0e 94 76 13 	call	0x26ec	; 0x26ec <__fp_cmp>
    251c:	08 f4       	brcc	.+2      	; 0x2520 <__cmpsf2+0x8>
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	08 95       	ret

00002522 <__divsf3>:
    2522:	0e 94 a5 12 	call	0x254a	; 0x254a <__divsf3x>
    2526:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__fp_round>
    252a:	0e 94 aa 13 	call	0x2754	; 0x2754 <__fp_pscB>
    252e:	58 f0       	brcs	.+22     	; 0x2546 <__divsf3+0x24>
    2530:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fp_pscA>
    2534:	40 f0       	brcs	.+16     	; 0x2546 <__divsf3+0x24>
    2536:	29 f4       	brne	.+10     	; 0x2542 <__divsf3+0x20>
    2538:	5f 3f       	cpi	r21, 0xFF	; 255
    253a:	29 f0       	breq	.+10     	; 0x2546 <__divsf3+0x24>
    253c:	0c 94 9a 13 	jmp	0x2734	; 0x2734 <__fp_inf>
    2540:	51 11       	cpse	r21, r1
    2542:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__fp_szero>
    2546:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <__fp_nan>

0000254a <__divsf3x>:
    254a:	0e 94 c2 13 	call	0x2784	; 0x2784 <__fp_split3>
    254e:	68 f3       	brcs	.-38     	; 0x252a <__divsf3+0x8>

00002550 <__divsf3_pse>:
    2550:	99 23       	and	r25, r25
    2552:	b1 f3       	breq	.-20     	; 0x2540 <__divsf3+0x1e>
    2554:	55 23       	and	r21, r21
    2556:	91 f3       	breq	.-28     	; 0x253c <__divsf3+0x1a>
    2558:	95 1b       	sub	r25, r21
    255a:	55 0b       	sbc	r21, r21
    255c:	bb 27       	eor	r27, r27
    255e:	aa 27       	eor	r26, r26
    2560:	62 17       	cp	r22, r18
    2562:	73 07       	cpc	r23, r19
    2564:	84 07       	cpc	r24, r20
    2566:	38 f0       	brcs	.+14     	; 0x2576 <__divsf3_pse+0x26>
    2568:	9f 5f       	subi	r25, 0xFF	; 255
    256a:	5f 4f       	sbci	r21, 0xFF	; 255
    256c:	22 0f       	add	r18, r18
    256e:	33 1f       	adc	r19, r19
    2570:	44 1f       	adc	r20, r20
    2572:	aa 1f       	adc	r26, r26
    2574:	a9 f3       	breq	.-22     	; 0x2560 <__divsf3_pse+0x10>
    2576:	35 d0       	rcall	.+106    	; 0x25e2 <__divsf3_pse+0x92>
    2578:	0e 2e       	mov	r0, r30
    257a:	3a f0       	brmi	.+14     	; 0x258a <__divsf3_pse+0x3a>
    257c:	e0 e8       	ldi	r30, 0x80	; 128
    257e:	32 d0       	rcall	.+100    	; 0x25e4 <__divsf3_pse+0x94>
    2580:	91 50       	subi	r25, 0x01	; 1
    2582:	50 40       	sbci	r21, 0x00	; 0
    2584:	e6 95       	lsr	r30
    2586:	00 1c       	adc	r0, r0
    2588:	ca f7       	brpl	.-14     	; 0x257c <__divsf3_pse+0x2c>
    258a:	2b d0       	rcall	.+86     	; 0x25e2 <__divsf3_pse+0x92>
    258c:	fe 2f       	mov	r31, r30
    258e:	29 d0       	rcall	.+82     	; 0x25e2 <__divsf3_pse+0x92>
    2590:	66 0f       	add	r22, r22
    2592:	77 1f       	adc	r23, r23
    2594:	88 1f       	adc	r24, r24
    2596:	bb 1f       	adc	r27, r27
    2598:	26 17       	cp	r18, r22
    259a:	37 07       	cpc	r19, r23
    259c:	48 07       	cpc	r20, r24
    259e:	ab 07       	cpc	r26, r27
    25a0:	b0 e8       	ldi	r27, 0x80	; 128
    25a2:	09 f0       	breq	.+2      	; 0x25a6 <__divsf3_pse+0x56>
    25a4:	bb 0b       	sbc	r27, r27
    25a6:	80 2d       	mov	r24, r0
    25a8:	bf 01       	movw	r22, r30
    25aa:	ff 27       	eor	r31, r31
    25ac:	93 58       	subi	r25, 0x83	; 131
    25ae:	5f 4f       	sbci	r21, 0xFF	; 255
    25b0:	3a f0       	brmi	.+14     	; 0x25c0 <__divsf3_pse+0x70>
    25b2:	9e 3f       	cpi	r25, 0xFE	; 254
    25b4:	51 05       	cpc	r21, r1
    25b6:	78 f0       	brcs	.+30     	; 0x25d6 <__divsf3_pse+0x86>
    25b8:	0c 94 9a 13 	jmp	0x2734	; 0x2734 <__fp_inf>
    25bc:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__fp_szero>
    25c0:	5f 3f       	cpi	r21, 0xFF	; 255
    25c2:	e4 f3       	brlt	.-8      	; 0x25bc <__divsf3_pse+0x6c>
    25c4:	98 3e       	cpi	r25, 0xE8	; 232
    25c6:	d4 f3       	brlt	.-12     	; 0x25bc <__divsf3_pse+0x6c>
    25c8:	86 95       	lsr	r24
    25ca:	77 95       	ror	r23
    25cc:	67 95       	ror	r22
    25ce:	b7 95       	ror	r27
    25d0:	f7 95       	ror	r31
    25d2:	9f 5f       	subi	r25, 0xFF	; 255
    25d4:	c9 f7       	brne	.-14     	; 0x25c8 <__divsf3_pse+0x78>
    25d6:	88 0f       	add	r24, r24
    25d8:	91 1d       	adc	r25, r1
    25da:	96 95       	lsr	r25
    25dc:	87 95       	ror	r24
    25de:	97 f9       	bld	r25, 7
    25e0:	08 95       	ret
    25e2:	e1 e0       	ldi	r30, 0x01	; 1
    25e4:	66 0f       	add	r22, r22
    25e6:	77 1f       	adc	r23, r23
    25e8:	88 1f       	adc	r24, r24
    25ea:	bb 1f       	adc	r27, r27
    25ec:	62 17       	cp	r22, r18
    25ee:	73 07       	cpc	r23, r19
    25f0:	84 07       	cpc	r24, r20
    25f2:	ba 07       	cpc	r27, r26
    25f4:	20 f0       	brcs	.+8      	; 0x25fe <__divsf3_pse+0xae>
    25f6:	62 1b       	sub	r22, r18
    25f8:	73 0b       	sbc	r23, r19
    25fa:	84 0b       	sbc	r24, r20
    25fc:	ba 0b       	sbc	r27, r26
    25fe:	ee 1f       	adc	r30, r30
    2600:	88 f7       	brcc	.-30     	; 0x25e4 <__divsf3_pse+0x94>
    2602:	e0 95       	com	r30
    2604:	08 95       	ret

00002606 <__fixsfsi>:
    2606:	0e 94 0a 13 	call	0x2614	; 0x2614 <__fixunssfsi>
    260a:	68 94       	set
    260c:	b1 11       	cpse	r27, r1
    260e:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__fp_szero>
    2612:	08 95       	ret

00002614 <__fixunssfsi>:
    2614:	0e 94 ca 13 	call	0x2794	; 0x2794 <__fp_splitA>
    2618:	88 f0       	brcs	.+34     	; 0x263c <__fixunssfsi+0x28>
    261a:	9f 57       	subi	r25, 0x7F	; 127
    261c:	98 f0       	brcs	.+38     	; 0x2644 <__fixunssfsi+0x30>
    261e:	b9 2f       	mov	r27, r25
    2620:	99 27       	eor	r25, r25
    2622:	b7 51       	subi	r27, 0x17	; 23
    2624:	b0 f0       	brcs	.+44     	; 0x2652 <__fixunssfsi+0x3e>
    2626:	e1 f0       	breq	.+56     	; 0x2660 <__fixunssfsi+0x4c>
    2628:	66 0f       	add	r22, r22
    262a:	77 1f       	adc	r23, r23
    262c:	88 1f       	adc	r24, r24
    262e:	99 1f       	adc	r25, r25
    2630:	1a f0       	brmi	.+6      	; 0x2638 <__fixunssfsi+0x24>
    2632:	ba 95       	dec	r27
    2634:	c9 f7       	brne	.-14     	; 0x2628 <__fixunssfsi+0x14>
    2636:	14 c0       	rjmp	.+40     	; 0x2660 <__fixunssfsi+0x4c>
    2638:	b1 30       	cpi	r27, 0x01	; 1
    263a:	91 f0       	breq	.+36     	; 0x2660 <__fixunssfsi+0x4c>
    263c:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__fp_zero>
    2640:	b1 e0       	ldi	r27, 0x01	; 1
    2642:	08 95       	ret
    2644:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__fp_zero>
    2648:	67 2f       	mov	r22, r23
    264a:	78 2f       	mov	r23, r24
    264c:	88 27       	eor	r24, r24
    264e:	b8 5f       	subi	r27, 0xF8	; 248
    2650:	39 f0       	breq	.+14     	; 0x2660 <__fixunssfsi+0x4c>
    2652:	b9 3f       	cpi	r27, 0xF9	; 249
    2654:	cc f3       	brlt	.-14     	; 0x2648 <__fixunssfsi+0x34>
    2656:	86 95       	lsr	r24
    2658:	77 95       	ror	r23
    265a:	67 95       	ror	r22
    265c:	b3 95       	inc	r27
    265e:	d9 f7       	brne	.-10     	; 0x2656 <__fixunssfsi+0x42>
    2660:	3e f4       	brtc	.+14     	; 0x2670 <__fixunssfsi+0x5c>
    2662:	90 95       	com	r25
    2664:	80 95       	com	r24
    2666:	70 95       	com	r23
    2668:	61 95       	neg	r22
    266a:	7f 4f       	sbci	r23, 0xFF	; 255
    266c:	8f 4f       	sbci	r24, 0xFF	; 255
    266e:	9f 4f       	sbci	r25, 0xFF	; 255
    2670:	08 95       	ret

00002672 <__floatunsisf>:
    2672:	e8 94       	clt
    2674:	09 c0       	rjmp	.+18     	; 0x2688 <__floatsisf+0x12>

00002676 <__floatsisf>:
    2676:	97 fb       	bst	r25, 7
    2678:	3e f4       	brtc	.+14     	; 0x2688 <__floatsisf+0x12>
    267a:	90 95       	com	r25
    267c:	80 95       	com	r24
    267e:	70 95       	com	r23
    2680:	61 95       	neg	r22
    2682:	7f 4f       	sbci	r23, 0xFF	; 255
    2684:	8f 4f       	sbci	r24, 0xFF	; 255
    2686:	9f 4f       	sbci	r25, 0xFF	; 255
    2688:	99 23       	and	r25, r25
    268a:	a9 f0       	breq	.+42     	; 0x26b6 <__floatsisf+0x40>
    268c:	f9 2f       	mov	r31, r25
    268e:	96 e9       	ldi	r25, 0x96	; 150
    2690:	bb 27       	eor	r27, r27
    2692:	93 95       	inc	r25
    2694:	f6 95       	lsr	r31
    2696:	87 95       	ror	r24
    2698:	77 95       	ror	r23
    269a:	67 95       	ror	r22
    269c:	b7 95       	ror	r27
    269e:	f1 11       	cpse	r31, r1
    26a0:	f8 cf       	rjmp	.-16     	; 0x2692 <__floatsisf+0x1c>
    26a2:	fa f4       	brpl	.+62     	; 0x26e2 <__floatsisf+0x6c>
    26a4:	bb 0f       	add	r27, r27
    26a6:	11 f4       	brne	.+4      	; 0x26ac <__floatsisf+0x36>
    26a8:	60 ff       	sbrs	r22, 0
    26aa:	1b c0       	rjmp	.+54     	; 0x26e2 <__floatsisf+0x6c>
    26ac:	6f 5f       	subi	r22, 0xFF	; 255
    26ae:	7f 4f       	sbci	r23, 0xFF	; 255
    26b0:	8f 4f       	sbci	r24, 0xFF	; 255
    26b2:	9f 4f       	sbci	r25, 0xFF	; 255
    26b4:	16 c0       	rjmp	.+44     	; 0x26e2 <__floatsisf+0x6c>
    26b6:	88 23       	and	r24, r24
    26b8:	11 f0       	breq	.+4      	; 0x26be <__floatsisf+0x48>
    26ba:	96 e9       	ldi	r25, 0x96	; 150
    26bc:	11 c0       	rjmp	.+34     	; 0x26e0 <__floatsisf+0x6a>
    26be:	77 23       	and	r23, r23
    26c0:	21 f0       	breq	.+8      	; 0x26ca <__floatsisf+0x54>
    26c2:	9e e8       	ldi	r25, 0x8E	; 142
    26c4:	87 2f       	mov	r24, r23
    26c6:	76 2f       	mov	r23, r22
    26c8:	05 c0       	rjmp	.+10     	; 0x26d4 <__floatsisf+0x5e>
    26ca:	66 23       	and	r22, r22
    26cc:	71 f0       	breq	.+28     	; 0x26ea <__floatsisf+0x74>
    26ce:	96 e8       	ldi	r25, 0x86	; 134
    26d0:	86 2f       	mov	r24, r22
    26d2:	70 e0       	ldi	r23, 0x00	; 0
    26d4:	60 e0       	ldi	r22, 0x00	; 0
    26d6:	2a f0       	brmi	.+10     	; 0x26e2 <__floatsisf+0x6c>
    26d8:	9a 95       	dec	r25
    26da:	66 0f       	add	r22, r22
    26dc:	77 1f       	adc	r23, r23
    26de:	88 1f       	adc	r24, r24
    26e0:	da f7       	brpl	.-10     	; 0x26d8 <__floatsisf+0x62>
    26e2:	88 0f       	add	r24, r24
    26e4:	96 95       	lsr	r25
    26e6:	87 95       	ror	r24
    26e8:	97 f9       	bld	r25, 7
    26ea:	08 95       	ret

000026ec <__fp_cmp>:
    26ec:	99 0f       	add	r25, r25
    26ee:	00 08       	sbc	r0, r0
    26f0:	55 0f       	add	r21, r21
    26f2:	aa 0b       	sbc	r26, r26
    26f4:	e0 e8       	ldi	r30, 0x80	; 128
    26f6:	fe ef       	ldi	r31, 0xFE	; 254
    26f8:	16 16       	cp	r1, r22
    26fa:	17 06       	cpc	r1, r23
    26fc:	e8 07       	cpc	r30, r24
    26fe:	f9 07       	cpc	r31, r25
    2700:	c0 f0       	brcs	.+48     	; 0x2732 <__fp_cmp+0x46>
    2702:	12 16       	cp	r1, r18
    2704:	13 06       	cpc	r1, r19
    2706:	e4 07       	cpc	r30, r20
    2708:	f5 07       	cpc	r31, r21
    270a:	98 f0       	brcs	.+38     	; 0x2732 <__fp_cmp+0x46>
    270c:	62 1b       	sub	r22, r18
    270e:	73 0b       	sbc	r23, r19
    2710:	84 0b       	sbc	r24, r20
    2712:	95 0b       	sbc	r25, r21
    2714:	39 f4       	brne	.+14     	; 0x2724 <__fp_cmp+0x38>
    2716:	0a 26       	eor	r0, r26
    2718:	61 f0       	breq	.+24     	; 0x2732 <__fp_cmp+0x46>
    271a:	23 2b       	or	r18, r19
    271c:	24 2b       	or	r18, r20
    271e:	25 2b       	or	r18, r21
    2720:	21 f4       	brne	.+8      	; 0x272a <__fp_cmp+0x3e>
    2722:	08 95       	ret
    2724:	0a 26       	eor	r0, r26
    2726:	09 f4       	brne	.+2      	; 0x272a <__fp_cmp+0x3e>
    2728:	a1 40       	sbci	r26, 0x01	; 1
    272a:	a6 95       	lsr	r26
    272c:	8f ef       	ldi	r24, 0xFF	; 255
    272e:	81 1d       	adc	r24, r1
    2730:	81 1d       	adc	r24, r1
    2732:	08 95       	ret

00002734 <__fp_inf>:
    2734:	97 f9       	bld	r25, 7
    2736:	9f 67       	ori	r25, 0x7F	; 127
    2738:	80 e8       	ldi	r24, 0x80	; 128
    273a:	70 e0       	ldi	r23, 0x00	; 0
    273c:	60 e0       	ldi	r22, 0x00	; 0
    273e:	08 95       	ret

00002740 <__fp_nan>:
    2740:	9f ef       	ldi	r25, 0xFF	; 255
    2742:	80 ec       	ldi	r24, 0xC0	; 192
    2744:	08 95       	ret

00002746 <__fp_pscA>:
    2746:	00 24       	eor	r0, r0
    2748:	0a 94       	dec	r0
    274a:	16 16       	cp	r1, r22
    274c:	17 06       	cpc	r1, r23
    274e:	18 06       	cpc	r1, r24
    2750:	09 06       	cpc	r0, r25
    2752:	08 95       	ret

00002754 <__fp_pscB>:
    2754:	00 24       	eor	r0, r0
    2756:	0a 94       	dec	r0
    2758:	12 16       	cp	r1, r18
    275a:	13 06       	cpc	r1, r19
    275c:	14 06       	cpc	r1, r20
    275e:	05 06       	cpc	r0, r21
    2760:	08 95       	ret

00002762 <__fp_round>:
    2762:	09 2e       	mov	r0, r25
    2764:	03 94       	inc	r0
    2766:	00 0c       	add	r0, r0
    2768:	11 f4       	brne	.+4      	; 0x276e <__fp_round+0xc>
    276a:	88 23       	and	r24, r24
    276c:	52 f0       	brmi	.+20     	; 0x2782 <__fp_round+0x20>
    276e:	bb 0f       	add	r27, r27
    2770:	40 f4       	brcc	.+16     	; 0x2782 <__fp_round+0x20>
    2772:	bf 2b       	or	r27, r31
    2774:	11 f4       	brne	.+4      	; 0x277a <__fp_round+0x18>
    2776:	60 ff       	sbrs	r22, 0
    2778:	04 c0       	rjmp	.+8      	; 0x2782 <__fp_round+0x20>
    277a:	6f 5f       	subi	r22, 0xFF	; 255
    277c:	7f 4f       	sbci	r23, 0xFF	; 255
    277e:	8f 4f       	sbci	r24, 0xFF	; 255
    2780:	9f 4f       	sbci	r25, 0xFF	; 255
    2782:	08 95       	ret

00002784 <__fp_split3>:
    2784:	57 fd       	sbrc	r21, 7
    2786:	90 58       	subi	r25, 0x80	; 128
    2788:	44 0f       	add	r20, r20
    278a:	55 1f       	adc	r21, r21
    278c:	59 f0       	breq	.+22     	; 0x27a4 <__fp_splitA+0x10>
    278e:	5f 3f       	cpi	r21, 0xFF	; 255
    2790:	71 f0       	breq	.+28     	; 0x27ae <__fp_splitA+0x1a>
    2792:	47 95       	ror	r20

00002794 <__fp_splitA>:
    2794:	88 0f       	add	r24, r24
    2796:	97 fb       	bst	r25, 7
    2798:	99 1f       	adc	r25, r25
    279a:	61 f0       	breq	.+24     	; 0x27b4 <__fp_splitA+0x20>
    279c:	9f 3f       	cpi	r25, 0xFF	; 255
    279e:	79 f0       	breq	.+30     	; 0x27be <__fp_splitA+0x2a>
    27a0:	87 95       	ror	r24
    27a2:	08 95       	ret
    27a4:	12 16       	cp	r1, r18
    27a6:	13 06       	cpc	r1, r19
    27a8:	14 06       	cpc	r1, r20
    27aa:	55 1f       	adc	r21, r21
    27ac:	f2 cf       	rjmp	.-28     	; 0x2792 <__fp_split3+0xe>
    27ae:	46 95       	lsr	r20
    27b0:	f1 df       	rcall	.-30     	; 0x2794 <__fp_splitA>
    27b2:	08 c0       	rjmp	.+16     	; 0x27c4 <__fp_splitA+0x30>
    27b4:	16 16       	cp	r1, r22
    27b6:	17 06       	cpc	r1, r23
    27b8:	18 06       	cpc	r1, r24
    27ba:	99 1f       	adc	r25, r25
    27bc:	f1 cf       	rjmp	.-30     	; 0x27a0 <__fp_splitA+0xc>
    27be:	86 95       	lsr	r24
    27c0:	71 05       	cpc	r23, r1
    27c2:	61 05       	cpc	r22, r1
    27c4:	08 94       	sec
    27c6:	08 95       	ret

000027c8 <__fp_zero>:
    27c8:	e8 94       	clt

000027ca <__fp_szero>:
    27ca:	bb 27       	eor	r27, r27
    27cc:	66 27       	eor	r22, r22
    27ce:	77 27       	eor	r23, r23
    27d0:	cb 01       	movw	r24, r22
    27d2:	97 f9       	bld	r25, 7
    27d4:	08 95       	ret

000027d6 <__mulsf3>:
    27d6:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__mulsf3x>
    27da:	0c 94 b1 13 	jmp	0x2762	; 0x2762 <__fp_round>
    27de:	0e 94 a3 13 	call	0x2746	; 0x2746 <__fp_pscA>
    27e2:	38 f0       	brcs	.+14     	; 0x27f2 <__mulsf3+0x1c>
    27e4:	0e 94 aa 13 	call	0x2754	; 0x2754 <__fp_pscB>
    27e8:	20 f0       	brcs	.+8      	; 0x27f2 <__mulsf3+0x1c>
    27ea:	95 23       	and	r25, r21
    27ec:	11 f0       	breq	.+4      	; 0x27f2 <__mulsf3+0x1c>
    27ee:	0c 94 9a 13 	jmp	0x2734	; 0x2734 <__fp_inf>
    27f2:	0c 94 a0 13 	jmp	0x2740	; 0x2740 <__fp_nan>
    27f6:	11 24       	eor	r1, r1
    27f8:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__fp_szero>

000027fc <__mulsf3x>:
    27fc:	0e 94 c2 13 	call	0x2784	; 0x2784 <__fp_split3>
    2800:	70 f3       	brcs	.-36     	; 0x27de <__mulsf3+0x8>

00002802 <__mulsf3_pse>:
    2802:	95 9f       	mul	r25, r21
    2804:	c1 f3       	breq	.-16     	; 0x27f6 <__mulsf3+0x20>
    2806:	95 0f       	add	r25, r21
    2808:	50 e0       	ldi	r21, 0x00	; 0
    280a:	55 1f       	adc	r21, r21
    280c:	62 9f       	mul	r22, r18
    280e:	f0 01       	movw	r30, r0
    2810:	72 9f       	mul	r23, r18
    2812:	bb 27       	eor	r27, r27
    2814:	f0 0d       	add	r31, r0
    2816:	b1 1d       	adc	r27, r1
    2818:	63 9f       	mul	r22, r19
    281a:	aa 27       	eor	r26, r26
    281c:	f0 0d       	add	r31, r0
    281e:	b1 1d       	adc	r27, r1
    2820:	aa 1f       	adc	r26, r26
    2822:	64 9f       	mul	r22, r20
    2824:	66 27       	eor	r22, r22
    2826:	b0 0d       	add	r27, r0
    2828:	a1 1d       	adc	r26, r1
    282a:	66 1f       	adc	r22, r22
    282c:	82 9f       	mul	r24, r18
    282e:	22 27       	eor	r18, r18
    2830:	b0 0d       	add	r27, r0
    2832:	a1 1d       	adc	r26, r1
    2834:	62 1f       	adc	r22, r18
    2836:	73 9f       	mul	r23, r19
    2838:	b0 0d       	add	r27, r0
    283a:	a1 1d       	adc	r26, r1
    283c:	62 1f       	adc	r22, r18
    283e:	83 9f       	mul	r24, r19
    2840:	a0 0d       	add	r26, r0
    2842:	61 1d       	adc	r22, r1
    2844:	22 1f       	adc	r18, r18
    2846:	74 9f       	mul	r23, r20
    2848:	33 27       	eor	r19, r19
    284a:	a0 0d       	add	r26, r0
    284c:	61 1d       	adc	r22, r1
    284e:	23 1f       	adc	r18, r19
    2850:	84 9f       	mul	r24, r20
    2852:	60 0d       	add	r22, r0
    2854:	21 1d       	adc	r18, r1
    2856:	82 2f       	mov	r24, r18
    2858:	76 2f       	mov	r23, r22
    285a:	6a 2f       	mov	r22, r26
    285c:	11 24       	eor	r1, r1
    285e:	9f 57       	subi	r25, 0x7F	; 127
    2860:	50 40       	sbci	r21, 0x00	; 0
    2862:	9a f0       	brmi	.+38     	; 0x288a <__mulsf3_pse+0x88>
    2864:	f1 f0       	breq	.+60     	; 0x28a2 <__mulsf3_pse+0xa0>
    2866:	88 23       	and	r24, r24
    2868:	4a f0       	brmi	.+18     	; 0x287c <__mulsf3_pse+0x7a>
    286a:	ee 0f       	add	r30, r30
    286c:	ff 1f       	adc	r31, r31
    286e:	bb 1f       	adc	r27, r27
    2870:	66 1f       	adc	r22, r22
    2872:	77 1f       	adc	r23, r23
    2874:	88 1f       	adc	r24, r24
    2876:	91 50       	subi	r25, 0x01	; 1
    2878:	50 40       	sbci	r21, 0x00	; 0
    287a:	a9 f7       	brne	.-22     	; 0x2866 <__mulsf3_pse+0x64>
    287c:	9e 3f       	cpi	r25, 0xFE	; 254
    287e:	51 05       	cpc	r21, r1
    2880:	80 f0       	brcs	.+32     	; 0x28a2 <__mulsf3_pse+0xa0>
    2882:	0c 94 9a 13 	jmp	0x2734	; 0x2734 <__fp_inf>
    2886:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__fp_szero>
    288a:	5f 3f       	cpi	r21, 0xFF	; 255
    288c:	e4 f3       	brlt	.-8      	; 0x2886 <__mulsf3_pse+0x84>
    288e:	98 3e       	cpi	r25, 0xE8	; 232
    2890:	d4 f3       	brlt	.-12     	; 0x2886 <__mulsf3_pse+0x84>
    2892:	86 95       	lsr	r24
    2894:	77 95       	ror	r23
    2896:	67 95       	ror	r22
    2898:	b7 95       	ror	r27
    289a:	f7 95       	ror	r31
    289c:	e7 95       	ror	r30
    289e:	9f 5f       	subi	r25, 0xFF	; 255
    28a0:	c1 f7       	brne	.-16     	; 0x2892 <__mulsf3_pse+0x90>
    28a2:	fe 2b       	or	r31, r30
    28a4:	88 0f       	add	r24, r24
    28a6:	91 1d       	adc	r25, r1
    28a8:	96 95       	lsr	r25
    28aa:	87 95       	ror	r24
    28ac:	97 f9       	bld	r25, 7
    28ae:	08 95       	ret

000028b0 <__divmodhi4>:
    28b0:	97 fb       	bst	r25, 7
    28b2:	07 2e       	mov	r0, r23
    28b4:	16 f4       	brtc	.+4      	; 0x28ba <__divmodhi4+0xa>
    28b6:	00 94       	com	r0
    28b8:	07 d0       	rcall	.+14     	; 0x28c8 <__divmodhi4_neg1>
    28ba:	77 fd       	sbrc	r23, 7
    28bc:	09 d0       	rcall	.+18     	; 0x28d0 <__divmodhi4_neg2>
    28be:	0e 94 8e 14 	call	0x291c	; 0x291c <__udivmodhi4>
    28c2:	07 fc       	sbrc	r0, 7
    28c4:	05 d0       	rcall	.+10     	; 0x28d0 <__divmodhi4_neg2>
    28c6:	3e f4       	brtc	.+14     	; 0x28d6 <__divmodhi4_exit>

000028c8 <__divmodhi4_neg1>:
    28c8:	90 95       	com	r25
    28ca:	81 95       	neg	r24
    28cc:	9f 4f       	sbci	r25, 0xFF	; 255
    28ce:	08 95       	ret

000028d0 <__divmodhi4_neg2>:
    28d0:	70 95       	com	r23
    28d2:	61 95       	neg	r22
    28d4:	7f 4f       	sbci	r23, 0xFF	; 255

000028d6 <__divmodhi4_exit>:
    28d6:	08 95       	ret

000028d8 <__udivmodsi4>:
    28d8:	a1 e2       	ldi	r26, 0x21	; 33
    28da:	1a 2e       	mov	r1, r26
    28dc:	aa 1b       	sub	r26, r26
    28de:	bb 1b       	sub	r27, r27
    28e0:	fd 01       	movw	r30, r26
    28e2:	0d c0       	rjmp	.+26     	; 0x28fe <__udivmodsi4_ep>

000028e4 <__udivmodsi4_loop>:
    28e4:	aa 1f       	adc	r26, r26
    28e6:	bb 1f       	adc	r27, r27
    28e8:	ee 1f       	adc	r30, r30
    28ea:	ff 1f       	adc	r31, r31
    28ec:	a2 17       	cp	r26, r18
    28ee:	b3 07       	cpc	r27, r19
    28f0:	e4 07       	cpc	r30, r20
    28f2:	f5 07       	cpc	r31, r21
    28f4:	20 f0       	brcs	.+8      	; 0x28fe <__udivmodsi4_ep>
    28f6:	a2 1b       	sub	r26, r18
    28f8:	b3 0b       	sbc	r27, r19
    28fa:	e4 0b       	sbc	r30, r20
    28fc:	f5 0b       	sbc	r31, r21

000028fe <__udivmodsi4_ep>:
    28fe:	66 1f       	adc	r22, r22
    2900:	77 1f       	adc	r23, r23
    2902:	88 1f       	adc	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	1a 94       	dec	r1
    2908:	69 f7       	brne	.-38     	; 0x28e4 <__udivmodsi4_loop>
    290a:	60 95       	com	r22
    290c:	70 95       	com	r23
    290e:	80 95       	com	r24
    2910:	90 95       	com	r25
    2912:	9b 01       	movw	r18, r22
    2914:	ac 01       	movw	r20, r24
    2916:	bd 01       	movw	r22, r26
    2918:	cf 01       	movw	r24, r30
    291a:	08 95       	ret

0000291c <__udivmodhi4>:
    291c:	aa 1b       	sub	r26, r26
    291e:	bb 1b       	sub	r27, r27
    2920:	51 e1       	ldi	r21, 0x11	; 17
    2922:	07 c0       	rjmp	.+14     	; 0x2932 <__udivmodhi4_ep>

00002924 <__udivmodhi4_loop>:
    2924:	aa 1f       	adc	r26, r26
    2926:	bb 1f       	adc	r27, r27
    2928:	a6 17       	cp	r26, r22
    292a:	b7 07       	cpc	r27, r23
    292c:	10 f0       	brcs	.+4      	; 0x2932 <__udivmodhi4_ep>
    292e:	a6 1b       	sub	r26, r22
    2930:	b7 0b       	sbc	r27, r23

00002932 <__udivmodhi4_ep>:
    2932:	88 1f       	adc	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	5a 95       	dec	r21
    2938:	a9 f7       	brne	.-22     	; 0x2924 <__udivmodhi4_loop>
    293a:	80 95       	com	r24
    293c:	90 95       	com	r25
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	08 95       	ret

00002944 <__tablejump2__>:
    2944:	ee 0f       	add	r30, r30
    2946:	ff 1f       	adc	r31, r31
    2948:	05 90       	lpm	r0, Z+
    294a:	f4 91       	lpm	r31, Z
    294c:	e0 2d       	mov	r30, r0
    294e:	09 94       	ijmp

00002950 <vsnprintf>:
    2950:	ae e0       	ldi	r26, 0x0E	; 14
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	ee ea       	ldi	r30, 0xAE	; 174
    2956:	f4 e1       	ldi	r31, 0x14	; 20
    2958:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__prologue_saves__+0x1c>
    295c:	8c 01       	movw	r16, r24
    295e:	fa 01       	movw	r30, r20
    2960:	86 e0       	ldi	r24, 0x06	; 6
    2962:	8c 83       	std	Y+4, r24	; 0x04
    2964:	1a 83       	std	Y+2, r17	; 0x02
    2966:	09 83       	std	Y+1, r16	; 0x01
    2968:	77 ff       	sbrs	r23, 7
    296a:	02 c0       	rjmp	.+4      	; 0x2970 <vsnprintf+0x20>
    296c:	60 e0       	ldi	r22, 0x00	; 0
    296e:	70 e8       	ldi	r23, 0x80	; 128
    2970:	61 50       	subi	r22, 0x01	; 1
    2972:	71 09       	sbc	r23, r1
    2974:	7e 83       	std	Y+6, r23	; 0x06
    2976:	6d 83       	std	Y+5, r22	; 0x05
    2978:	a9 01       	movw	r20, r18
    297a:	bf 01       	movw	r22, r30
    297c:	ce 01       	movw	r24, r28
    297e:	01 96       	adiw	r24, 0x01	; 1
    2980:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <vfprintf>
    2984:	4d 81       	ldd	r20, Y+5	; 0x05
    2986:	5e 81       	ldd	r21, Y+6	; 0x06
    2988:	57 fd       	sbrc	r21, 7
    298a:	0a c0       	rjmp	.+20     	; 0x29a0 <vsnprintf+0x50>
    298c:	2f 81       	ldd	r18, Y+7	; 0x07
    298e:	38 85       	ldd	r19, Y+8	; 0x08
    2990:	42 17       	cp	r20, r18
    2992:	53 07       	cpc	r21, r19
    2994:	0c f4       	brge	.+2      	; 0x2998 <vsnprintf+0x48>
    2996:	9a 01       	movw	r18, r20
    2998:	02 0f       	add	r16, r18
    299a:	13 1f       	adc	r17, r19
    299c:	f8 01       	movw	r30, r16
    299e:	10 82       	st	Z, r1
    29a0:	2e 96       	adiw	r28, 0x0e	; 14
    29a2:	e4 e0       	ldi	r30, 0x04	; 4
    29a4:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__epilogue_restores__+0x1c>

000029a8 <vfprintf>:
    29a8:	ab e0       	ldi	r26, 0x0B	; 11
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	ea ed       	ldi	r30, 0xDA	; 218
    29ae:	f4 e1       	ldi	r31, 0x14	; 20
    29b0:	0c 94 52 17 	jmp	0x2ea4	; 0x2ea4 <__prologue_saves__>
    29b4:	7c 01       	movw	r14, r24
    29b6:	3b 01       	movw	r6, r22
    29b8:	8a 01       	movw	r16, r20
    29ba:	fc 01       	movw	r30, r24
    29bc:	17 82       	std	Z+7, r1	; 0x07
    29be:	16 82       	std	Z+6, r1	; 0x06
    29c0:	83 81       	ldd	r24, Z+3	; 0x03
    29c2:	81 ff       	sbrs	r24, 1
    29c4:	c8 c1       	rjmp	.+912    	; 0x2d56 <vfprintf+0x3ae>
    29c6:	ce 01       	movw	r24, r28
    29c8:	01 96       	adiw	r24, 0x01	; 1
    29ca:	5c 01       	movw	r10, r24
    29cc:	f7 01       	movw	r30, r14
    29ce:	93 81       	ldd	r25, Z+3	; 0x03
    29d0:	f3 01       	movw	r30, r6
    29d2:	93 fd       	sbrc	r25, 3
    29d4:	85 91       	lpm	r24, Z+
    29d6:	93 ff       	sbrs	r25, 3
    29d8:	81 91       	ld	r24, Z+
    29da:	3f 01       	movw	r6, r30
    29dc:	88 23       	and	r24, r24
    29de:	09 f4       	brne	.+2      	; 0x29e2 <vfprintf+0x3a>
    29e0:	53 c1       	rjmp	.+678    	; 0x2c88 <vfprintf+0x2e0>
    29e2:	85 32       	cpi	r24, 0x25	; 37
    29e4:	39 f4       	brne	.+14     	; 0x29f4 <vfprintf+0x4c>
    29e6:	93 fd       	sbrc	r25, 3
    29e8:	85 91       	lpm	r24, Z+
    29ea:	93 ff       	sbrs	r25, 3
    29ec:	81 91       	ld	r24, Z+
    29ee:	3f 01       	movw	r6, r30
    29f0:	85 32       	cpi	r24, 0x25	; 37
    29f2:	29 f4       	brne	.+10     	; 0x29fe <vfprintf+0x56>
    29f4:	b7 01       	movw	r22, r14
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <fputc>
    29fc:	e7 cf       	rjmp	.-50     	; 0x29cc <vfprintf+0x24>
    29fe:	91 2c       	mov	r9, r1
    2a00:	21 2c       	mov	r2, r1
    2a02:	31 2c       	mov	r3, r1
    2a04:	ff e1       	ldi	r31, 0x1F	; 31
    2a06:	f3 15       	cp	r31, r3
    2a08:	38 f0       	brcs	.+14     	; 0x2a18 <vfprintf+0x70>
    2a0a:	8b 32       	cpi	r24, 0x2B	; 43
    2a0c:	11 f1       	breq	.+68     	; 0x2a52 <vfprintf+0xaa>
    2a0e:	90 f4       	brcc	.+36     	; 0x2a34 <vfprintf+0x8c>
    2a10:	80 32       	cpi	r24, 0x20	; 32
    2a12:	09 f1       	breq	.+66     	; 0x2a56 <vfprintf+0xae>
    2a14:	83 32       	cpi	r24, 0x23	; 35
    2a16:	29 f1       	breq	.+74     	; 0x2a62 <vfprintf+0xba>
    2a18:	37 fc       	sbrc	r3, 7
    2a1a:	3c c0       	rjmp	.+120    	; 0x2a94 <vfprintf+0xec>
    2a1c:	20 ed       	ldi	r18, 0xD0	; 208
    2a1e:	28 0f       	add	r18, r24
    2a20:	2a 30       	cpi	r18, 0x0A	; 10
    2a22:	50 f5       	brcc	.+84     	; 0x2a78 <vfprintf+0xd0>
    2a24:	36 fe       	sbrs	r3, 6
    2a26:	20 c0       	rjmp	.+64     	; 0x2a68 <vfprintf+0xc0>
    2a28:	8a e0       	ldi	r24, 0x0A	; 10
    2a2a:	98 9e       	mul	r9, r24
    2a2c:	20 0d       	add	r18, r0
    2a2e:	11 24       	eor	r1, r1
    2a30:	92 2e       	mov	r9, r18
    2a32:	06 c0       	rjmp	.+12     	; 0x2a40 <vfprintf+0x98>
    2a34:	8d 32       	cpi	r24, 0x2D	; 45
    2a36:	91 f0       	breq	.+36     	; 0x2a5c <vfprintf+0xb4>
    2a38:	80 33       	cpi	r24, 0x30	; 48
    2a3a:	71 f7       	brne	.-36     	; 0x2a18 <vfprintf+0x70>
    2a3c:	68 94       	set
    2a3e:	30 f8       	bld	r3, 0
    2a40:	f3 01       	movw	r30, r6
    2a42:	93 fd       	sbrc	r25, 3
    2a44:	85 91       	lpm	r24, Z+
    2a46:	93 ff       	sbrs	r25, 3
    2a48:	81 91       	ld	r24, Z+
    2a4a:	3f 01       	movw	r6, r30
    2a4c:	81 11       	cpse	r24, r1
    2a4e:	da cf       	rjmp	.-76     	; 0x2a04 <vfprintf+0x5c>
    2a50:	21 c0       	rjmp	.+66     	; 0x2a94 <vfprintf+0xec>
    2a52:	68 94       	set
    2a54:	31 f8       	bld	r3, 1
    2a56:	68 94       	set
    2a58:	32 f8       	bld	r3, 2
    2a5a:	f2 cf       	rjmp	.-28     	; 0x2a40 <vfprintf+0x98>
    2a5c:	68 94       	set
    2a5e:	33 f8       	bld	r3, 3
    2a60:	ef cf       	rjmp	.-34     	; 0x2a40 <vfprintf+0x98>
    2a62:	68 94       	set
    2a64:	34 f8       	bld	r3, 4
    2a66:	ec cf       	rjmp	.-40     	; 0x2a40 <vfprintf+0x98>
    2a68:	ea e0       	ldi	r30, 0x0A	; 10
    2a6a:	2e 9e       	mul	r2, r30
    2a6c:	20 0d       	add	r18, r0
    2a6e:	11 24       	eor	r1, r1
    2a70:	22 2e       	mov	r2, r18
    2a72:	68 94       	set
    2a74:	35 f8       	bld	r3, 5
    2a76:	e4 cf       	rjmp	.-56     	; 0x2a40 <vfprintf+0x98>
    2a78:	8e 32       	cpi	r24, 0x2E	; 46
    2a7a:	29 f4       	brne	.+10     	; 0x2a86 <vfprintf+0xde>
    2a7c:	36 fc       	sbrc	r3, 6
    2a7e:	04 c1       	rjmp	.+520    	; 0x2c88 <vfprintf+0x2e0>
    2a80:	68 94       	set
    2a82:	36 f8       	bld	r3, 6
    2a84:	dd cf       	rjmp	.-70     	; 0x2a40 <vfprintf+0x98>
    2a86:	8c 36       	cpi	r24, 0x6C	; 108
    2a88:	19 f4       	brne	.+6      	; 0x2a90 <vfprintf+0xe8>
    2a8a:	68 94       	set
    2a8c:	37 f8       	bld	r3, 7
    2a8e:	d8 cf       	rjmp	.-80     	; 0x2a40 <vfprintf+0x98>
    2a90:	88 36       	cpi	r24, 0x68	; 104
    2a92:	b1 f2       	breq	.-84     	; 0x2a40 <vfprintf+0x98>
    2a94:	98 2f       	mov	r25, r24
    2a96:	9f 7d       	andi	r25, 0xDF	; 223
    2a98:	95 54       	subi	r25, 0x45	; 69
    2a9a:	93 30       	cpi	r25, 0x03	; 3
    2a9c:	e0 f0       	brcs	.+56     	; 0x2ad6 <vfprintf+0x12e>
    2a9e:	83 36       	cpi	r24, 0x63	; 99
    2aa0:	a1 f1       	breq	.+104    	; 0x2b0a <vfprintf+0x162>
    2aa2:	83 37       	cpi	r24, 0x73	; 115
    2aa4:	c1 f1       	breq	.+112    	; 0x2b16 <vfprintf+0x16e>
    2aa6:	83 35       	cpi	r24, 0x53	; 83
    2aa8:	09 f0       	breq	.+2      	; 0x2aac <vfprintf+0x104>
    2aaa:	63 c0       	rjmp	.+198    	; 0x2b72 <vfprintf+0x1ca>
    2aac:	28 01       	movw	r4, r16
    2aae:	f2 e0       	ldi	r31, 0x02	; 2
    2ab0:	4f 0e       	add	r4, r31
    2ab2:	51 1c       	adc	r5, r1
    2ab4:	f8 01       	movw	r30, r16
    2ab6:	c0 80       	ld	r12, Z
    2ab8:	d1 80       	ldd	r13, Z+1	; 0x01
    2aba:	69 2d       	mov	r22, r9
    2abc:	70 e0       	ldi	r23, 0x00	; 0
    2abe:	36 fc       	sbrc	r3, 6
    2ac0:	02 c0       	rjmp	.+4      	; 0x2ac6 <vfprintf+0x11e>
    2ac2:	6f ef       	ldi	r22, 0xFF	; 255
    2ac4:	7f ef       	ldi	r23, 0xFF	; 255
    2ac6:	c6 01       	movw	r24, r12
    2ac8:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <strnlen_P>
    2acc:	4c 01       	movw	r8, r24
    2ace:	68 94       	set
    2ad0:	37 f8       	bld	r3, 7
    2ad2:	82 01       	movw	r16, r4
    2ad4:	0a c0       	rjmp	.+20     	; 0x2aea <vfprintf+0x142>
    2ad6:	0c 5f       	subi	r16, 0xFC	; 252
    2ad8:	1f 4f       	sbci	r17, 0xFF	; 255
    2ada:	ff e3       	ldi	r31, 0x3F	; 63
    2adc:	f9 83       	std	Y+1, r31	; 0x01
    2ade:	88 24       	eor	r8, r8
    2ae0:	83 94       	inc	r8
    2ae2:	91 2c       	mov	r9, r1
    2ae4:	65 01       	movw	r12, r10
    2ae6:	e8 94       	clt
    2ae8:	37 f8       	bld	r3, 7
    2aea:	33 fe       	sbrs	r3, 3
    2aec:	2d c0       	rjmp	.+90     	; 0x2b48 <vfprintf+0x1a0>
    2aee:	52 2c       	mov	r5, r2
    2af0:	81 14       	cp	r8, r1
    2af2:	91 04       	cpc	r9, r1
    2af4:	71 f5       	brne	.+92     	; 0x2b52 <vfprintf+0x1aa>
    2af6:	55 20       	and	r5, r5
    2af8:	09 f4       	brne	.+2      	; 0x2afc <vfprintf+0x154>
    2afa:	68 cf       	rjmp	.-304    	; 0x29cc <vfprintf+0x24>
    2afc:	b7 01       	movw	r22, r14
    2afe:	80 e2       	ldi	r24, 0x20	; 32
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <fputc>
    2b06:	5a 94       	dec	r5
    2b08:	f6 cf       	rjmp	.-20     	; 0x2af6 <vfprintf+0x14e>
    2b0a:	f8 01       	movw	r30, r16
    2b0c:	80 81       	ld	r24, Z
    2b0e:	89 83       	std	Y+1, r24	; 0x01
    2b10:	0e 5f       	subi	r16, 0xFE	; 254
    2b12:	1f 4f       	sbci	r17, 0xFF	; 255
    2b14:	e4 cf       	rjmp	.-56     	; 0x2ade <vfprintf+0x136>
    2b16:	28 01       	movw	r4, r16
    2b18:	f2 e0       	ldi	r31, 0x02	; 2
    2b1a:	4f 0e       	add	r4, r31
    2b1c:	51 1c       	adc	r5, r1
    2b1e:	f8 01       	movw	r30, r16
    2b20:	c0 80       	ld	r12, Z
    2b22:	d1 80       	ldd	r13, Z+1	; 0x01
    2b24:	69 2d       	mov	r22, r9
    2b26:	70 e0       	ldi	r23, 0x00	; 0
    2b28:	36 fc       	sbrc	r3, 6
    2b2a:	02 c0       	rjmp	.+4      	; 0x2b30 <vfprintf+0x188>
    2b2c:	6f ef       	ldi	r22, 0xFF	; 255
    2b2e:	7f ef       	ldi	r23, 0xFF	; 255
    2b30:	c6 01       	movw	r24, r12
    2b32:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <strnlen>
    2b36:	4c 01       	movw	r8, r24
    2b38:	82 01       	movw	r16, r4
    2b3a:	d5 cf       	rjmp	.-86     	; 0x2ae6 <vfprintf+0x13e>
    2b3c:	b7 01       	movw	r22, r14
    2b3e:	80 e2       	ldi	r24, 0x20	; 32
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <fputc>
    2b46:	2a 94       	dec	r2
    2b48:	28 14       	cp	r2, r8
    2b4a:	19 04       	cpc	r1, r9
    2b4c:	09 f0       	breq	.+2      	; 0x2b50 <vfprintf+0x1a8>
    2b4e:	b0 f7       	brcc	.-20     	; 0x2b3c <vfprintf+0x194>
    2b50:	ce cf       	rjmp	.-100    	; 0x2aee <vfprintf+0x146>
    2b52:	f6 01       	movw	r30, r12
    2b54:	37 fc       	sbrc	r3, 7
    2b56:	85 91       	lpm	r24, Z+
    2b58:	37 fe       	sbrs	r3, 7
    2b5a:	81 91       	ld	r24, Z+
    2b5c:	6f 01       	movw	r12, r30
    2b5e:	b7 01       	movw	r22, r14
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <fputc>
    2b66:	51 10       	cpse	r5, r1
    2b68:	5a 94       	dec	r5
    2b6a:	f1 e0       	ldi	r31, 0x01	; 1
    2b6c:	8f 1a       	sub	r8, r31
    2b6e:	91 08       	sbc	r9, r1
    2b70:	bf cf       	rjmp	.-130    	; 0x2af0 <vfprintf+0x148>
    2b72:	84 36       	cpi	r24, 0x64	; 100
    2b74:	19 f0       	breq	.+6      	; 0x2b7c <vfprintf+0x1d4>
    2b76:	89 36       	cpi	r24, 0x69	; 105
    2b78:	09 f0       	breq	.+2      	; 0x2b7c <vfprintf+0x1d4>
    2b7a:	77 c0       	rjmp	.+238    	; 0x2c6a <vfprintf+0x2c2>
    2b7c:	f8 01       	movw	r30, r16
    2b7e:	37 fe       	sbrs	r3, 7
    2b80:	6b c0       	rjmp	.+214    	; 0x2c58 <vfprintf+0x2b0>
    2b82:	60 81       	ld	r22, Z
    2b84:	71 81       	ldd	r23, Z+1	; 0x01
    2b86:	82 81       	ldd	r24, Z+2	; 0x02
    2b88:	93 81       	ldd	r25, Z+3	; 0x03
    2b8a:	0c 5f       	subi	r16, 0xFC	; 252
    2b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b8e:	f3 2d       	mov	r31, r3
    2b90:	ff 76       	andi	r31, 0x6F	; 111
    2b92:	3f 2e       	mov	r3, r31
    2b94:	97 ff       	sbrs	r25, 7
    2b96:	09 c0       	rjmp	.+18     	; 0x2baa <vfprintf+0x202>
    2b98:	90 95       	com	r25
    2b9a:	80 95       	com	r24
    2b9c:	70 95       	com	r23
    2b9e:	61 95       	neg	r22
    2ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba6:	68 94       	set
    2ba8:	37 f8       	bld	r3, 7
    2baa:	2a e0       	ldi	r18, 0x0A	; 10
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	a5 01       	movw	r20, r10
    2bb0:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <__ultoa_invert>
    2bb4:	c8 2e       	mov	r12, r24
    2bb6:	ca 18       	sub	r12, r10
    2bb8:	8c 2c       	mov	r8, r12
    2bba:	43 2c       	mov	r4, r3
    2bbc:	36 fe       	sbrs	r3, 6
    2bbe:	0c c0       	rjmp	.+24     	; 0x2bd8 <vfprintf+0x230>
    2bc0:	e8 94       	clt
    2bc2:	40 f8       	bld	r4, 0
    2bc4:	c9 14       	cp	r12, r9
    2bc6:	40 f4       	brcc	.+16     	; 0x2bd8 <vfprintf+0x230>
    2bc8:	34 fe       	sbrs	r3, 4
    2bca:	05 c0       	rjmp	.+10     	; 0x2bd6 <vfprintf+0x22e>
    2bcc:	32 fc       	sbrc	r3, 2
    2bce:	03 c0       	rjmp	.+6      	; 0x2bd6 <vfprintf+0x22e>
    2bd0:	f3 2d       	mov	r31, r3
    2bd2:	fe 7e       	andi	r31, 0xEE	; 238
    2bd4:	4f 2e       	mov	r4, r31
    2bd6:	89 2c       	mov	r8, r9
    2bd8:	44 fe       	sbrs	r4, 4
    2bda:	95 c0       	rjmp	.+298    	; 0x2d06 <vfprintf+0x35e>
    2bdc:	fe 01       	movw	r30, r28
    2bde:	ec 0d       	add	r30, r12
    2be0:	f1 1d       	adc	r31, r1
    2be2:	80 81       	ld	r24, Z
    2be4:	80 33       	cpi	r24, 0x30	; 48
    2be6:	09 f0       	breq	.+2      	; 0x2bea <vfprintf+0x242>
    2be8:	87 c0       	rjmp	.+270    	; 0x2cf8 <vfprintf+0x350>
    2bea:	24 2d       	mov	r18, r4
    2bec:	29 7e       	andi	r18, 0xE9	; 233
    2bee:	42 2e       	mov	r4, r18
    2bf0:	84 2d       	mov	r24, r4
    2bf2:	88 70       	andi	r24, 0x08	; 8
    2bf4:	58 2e       	mov	r5, r24
    2bf6:	43 fc       	sbrc	r4, 3
    2bf8:	95 c0       	rjmp	.+298    	; 0x2d24 <vfprintf+0x37c>
    2bfa:	40 fe       	sbrs	r4, 0
    2bfc:	8f c0       	rjmp	.+286    	; 0x2d1c <vfprintf+0x374>
    2bfe:	9c 2c       	mov	r9, r12
    2c00:	82 14       	cp	r8, r2
    2c02:	18 f4       	brcc	.+6      	; 0x2c0a <vfprintf+0x262>
    2c04:	2c 0c       	add	r2, r12
    2c06:	92 2c       	mov	r9, r2
    2c08:	98 18       	sub	r9, r8
    2c0a:	44 fe       	sbrs	r4, 4
    2c0c:	91 c0       	rjmp	.+290    	; 0x2d30 <vfprintf+0x388>
    2c0e:	b7 01       	movw	r22, r14
    2c10:	80 e3       	ldi	r24, 0x30	; 48
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <fputc>
    2c18:	42 fe       	sbrs	r4, 2
    2c1a:	09 c0       	rjmp	.+18     	; 0x2c2e <vfprintf+0x286>
    2c1c:	88 e7       	ldi	r24, 0x78	; 120
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	41 fe       	sbrs	r4, 1
    2c22:	02 c0       	rjmp	.+4      	; 0x2c28 <vfprintf+0x280>
    2c24:	88 e5       	ldi	r24, 0x58	; 88
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	b7 01       	movw	r22, r14
    2c2a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <fputc>
    2c2e:	c9 14       	cp	r12, r9
    2c30:	08 f4       	brcc	.+2      	; 0x2c34 <vfprintf+0x28c>
    2c32:	8a c0       	rjmp	.+276    	; 0x2d48 <vfprintf+0x3a0>
    2c34:	ca 94       	dec	r12
    2c36:	d1 2c       	mov	r13, r1
    2c38:	9f ef       	ldi	r25, 0xFF	; 255
    2c3a:	c9 1a       	sub	r12, r25
    2c3c:	d9 0a       	sbc	r13, r25
    2c3e:	ca 0c       	add	r12, r10
    2c40:	db 1c       	adc	r13, r11
    2c42:	f6 01       	movw	r30, r12
    2c44:	82 91       	ld	r24, -Z
    2c46:	6f 01       	movw	r12, r30
    2c48:	b7 01       	movw	r22, r14
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <fputc>
    2c50:	ac 14       	cp	r10, r12
    2c52:	bd 04       	cpc	r11, r13
    2c54:	b1 f7       	brne	.-20     	; 0x2c42 <vfprintf+0x29a>
    2c56:	4f cf       	rjmp	.-354    	; 0x2af6 <vfprintf+0x14e>
    2c58:	60 81       	ld	r22, Z
    2c5a:	71 81       	ldd	r23, Z+1	; 0x01
    2c5c:	07 2e       	mov	r0, r23
    2c5e:	00 0c       	add	r0, r0
    2c60:	88 0b       	sbc	r24, r24
    2c62:	99 0b       	sbc	r25, r25
    2c64:	0e 5f       	subi	r16, 0xFE	; 254
    2c66:	1f 4f       	sbci	r17, 0xFF	; 255
    2c68:	92 cf       	rjmp	.-220    	; 0x2b8e <vfprintf+0x1e6>
    2c6a:	d3 2c       	mov	r13, r3
    2c6c:	e8 94       	clt
    2c6e:	d4 f8       	bld	r13, 4
    2c70:	2a e0       	ldi	r18, 0x0A	; 10
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	85 37       	cpi	r24, 0x75	; 117
    2c76:	39 f1       	breq	.+78     	; 0x2cc6 <vfprintf+0x31e>
    2c78:	23 2d       	mov	r18, r3
    2c7a:	29 7f       	andi	r18, 0xF9	; 249
    2c7c:	d2 2e       	mov	r13, r18
    2c7e:	8f 36       	cpi	r24, 0x6F	; 111
    2c80:	01 f1       	breq	.+64     	; 0x2cc2 <vfprintf+0x31a>
    2c82:	48 f4       	brcc	.+18     	; 0x2c96 <vfprintf+0x2ee>
    2c84:	88 35       	cpi	r24, 0x58	; 88
    2c86:	a9 f0       	breq	.+42     	; 0x2cb2 <vfprintf+0x30a>
    2c88:	f7 01       	movw	r30, r14
    2c8a:	86 81       	ldd	r24, Z+6	; 0x06
    2c8c:	97 81       	ldd	r25, Z+7	; 0x07
    2c8e:	2b 96       	adiw	r28, 0x0b	; 11
    2c90:	e2 e1       	ldi	r30, 0x12	; 18
    2c92:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <__epilogue_restores__>
    2c96:	80 37       	cpi	r24, 0x70	; 112
    2c98:	49 f0       	breq	.+18     	; 0x2cac <vfprintf+0x304>
    2c9a:	88 37       	cpi	r24, 0x78	; 120
    2c9c:	a9 f7       	brne	.-22     	; 0x2c88 <vfprintf+0x2e0>
    2c9e:	d4 fe       	sbrs	r13, 4
    2ca0:	02 c0       	rjmp	.+4      	; 0x2ca6 <vfprintf+0x2fe>
    2ca2:	68 94       	set
    2ca4:	d2 f8       	bld	r13, 2
    2ca6:	20 e1       	ldi	r18, 0x10	; 16
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	0d c0       	rjmp	.+26     	; 0x2cc6 <vfprintf+0x31e>
    2cac:	68 94       	set
    2cae:	d4 f8       	bld	r13, 4
    2cb0:	f6 cf       	rjmp	.-20     	; 0x2c9e <vfprintf+0x2f6>
    2cb2:	34 fe       	sbrs	r3, 4
    2cb4:	03 c0       	rjmp	.+6      	; 0x2cbc <vfprintf+0x314>
    2cb6:	82 2f       	mov	r24, r18
    2cb8:	86 60       	ori	r24, 0x06	; 6
    2cba:	d8 2e       	mov	r13, r24
    2cbc:	20 e1       	ldi	r18, 0x10	; 16
    2cbe:	32 e0       	ldi	r19, 0x02	; 2
    2cc0:	02 c0       	rjmp	.+4      	; 0x2cc6 <vfprintf+0x31e>
    2cc2:	28 e0       	ldi	r18, 0x08	; 8
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	f8 01       	movw	r30, r16
    2cc8:	d7 fe       	sbrs	r13, 7
    2cca:	0f c0       	rjmp	.+30     	; 0x2cea <vfprintf+0x342>
    2ccc:	60 81       	ld	r22, Z
    2cce:	71 81       	ldd	r23, Z+1	; 0x01
    2cd0:	82 81       	ldd	r24, Z+2	; 0x02
    2cd2:	93 81       	ldd	r25, Z+3	; 0x03
    2cd4:	0c 5f       	subi	r16, 0xFC	; 252
    2cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd8:	a5 01       	movw	r20, r10
    2cda:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <__ultoa_invert>
    2cde:	c8 2e       	mov	r12, r24
    2ce0:	ca 18       	sub	r12, r10
    2ce2:	3d 2c       	mov	r3, r13
    2ce4:	e8 94       	clt
    2ce6:	37 f8       	bld	r3, 7
    2ce8:	67 cf       	rjmp	.-306    	; 0x2bb8 <vfprintf+0x210>
    2cea:	60 81       	ld	r22, Z
    2cec:	71 81       	ldd	r23, Z+1	; 0x01
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	0e 5f       	subi	r16, 0xFE	; 254
    2cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf6:	f0 cf       	rjmp	.-32     	; 0x2cd8 <vfprintf+0x330>
    2cf8:	42 fc       	sbrc	r4, 2
    2cfa:	02 c0       	rjmp	.+4      	; 0x2d00 <vfprintf+0x358>
    2cfc:	83 94       	inc	r8
    2cfe:	78 cf       	rjmp	.-272    	; 0x2bf0 <vfprintf+0x248>
    2d00:	83 94       	inc	r8
    2d02:	83 94       	inc	r8
    2d04:	75 cf       	rjmp	.-278    	; 0x2bf0 <vfprintf+0x248>
    2d06:	84 2d       	mov	r24, r4
    2d08:	86 78       	andi	r24, 0x86	; 134
    2d0a:	09 f4       	brne	.+2      	; 0x2d0e <vfprintf+0x366>
    2d0c:	71 cf       	rjmp	.-286    	; 0x2bf0 <vfprintf+0x248>
    2d0e:	f6 cf       	rjmp	.-20     	; 0x2cfc <vfprintf+0x354>
    2d10:	b7 01       	movw	r22, r14
    2d12:	80 e2       	ldi	r24, 0x20	; 32
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <fputc>
    2d1a:	83 94       	inc	r8
    2d1c:	82 14       	cp	r8, r2
    2d1e:	c0 f3       	brcs	.-16     	; 0x2d10 <vfprintf+0x368>
    2d20:	51 2c       	mov	r5, r1
    2d22:	73 cf       	rjmp	.-282    	; 0x2c0a <vfprintf+0x262>
    2d24:	52 2c       	mov	r5, r2
    2d26:	58 18       	sub	r5, r8
    2d28:	82 14       	cp	r8, r2
    2d2a:	08 f4       	brcc	.+2      	; 0x2d2e <vfprintf+0x386>
    2d2c:	6e cf       	rjmp	.-292    	; 0x2c0a <vfprintf+0x262>
    2d2e:	f8 cf       	rjmp	.-16     	; 0x2d20 <vfprintf+0x378>
    2d30:	84 2d       	mov	r24, r4
    2d32:	86 78       	andi	r24, 0x86	; 134
    2d34:	09 f4       	brne	.+2      	; 0x2d38 <vfprintf+0x390>
    2d36:	7b cf       	rjmp	.-266    	; 0x2c2e <vfprintf+0x286>
    2d38:	8b e2       	ldi	r24, 0x2B	; 43
    2d3a:	41 fe       	sbrs	r4, 1
    2d3c:	80 e2       	ldi	r24, 0x20	; 32
    2d3e:	47 fc       	sbrc	r4, 7
    2d40:	8d e2       	ldi	r24, 0x2D	; 45
    2d42:	b7 01       	movw	r22, r14
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	71 cf       	rjmp	.-286    	; 0x2c2a <vfprintf+0x282>
    2d48:	b7 01       	movw	r22, r14
    2d4a:	80 e3       	ldi	r24, 0x30	; 48
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <fputc>
    2d52:	9a 94       	dec	r9
    2d54:	6c cf       	rjmp	.-296    	; 0x2c2e <vfprintf+0x286>
    2d56:	8f ef       	ldi	r24, 0xFF	; 255
    2d58:	9f ef       	ldi	r25, 0xFF	; 255
    2d5a:	99 cf       	rjmp	.-206    	; 0x2c8e <vfprintf+0x2e6>

00002d5c <strnlen_P>:
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	05 90       	lpm	r0, Z+
    2d60:	61 50       	subi	r22, 0x01	; 1
    2d62:	70 40       	sbci	r23, 0x00	; 0
    2d64:	01 10       	cpse	r0, r1
    2d66:	d8 f7       	brcc	.-10     	; 0x2d5e <strnlen_P+0x2>
    2d68:	80 95       	com	r24
    2d6a:	90 95       	com	r25
    2d6c:	8e 0f       	add	r24, r30
    2d6e:	9f 1f       	adc	r25, r31
    2d70:	08 95       	ret

00002d72 <strnlen>:
    2d72:	fc 01       	movw	r30, r24
    2d74:	61 50       	subi	r22, 0x01	; 1
    2d76:	70 40       	sbci	r23, 0x00	; 0
    2d78:	01 90       	ld	r0, Z+
    2d7a:	01 10       	cpse	r0, r1
    2d7c:	d8 f7       	brcc	.-10     	; 0x2d74 <strnlen+0x2>
    2d7e:	80 95       	com	r24
    2d80:	90 95       	com	r25
    2d82:	8e 0f       	add	r24, r30
    2d84:	9f 1f       	adc	r25, r31
    2d86:	08 95       	ret

00002d88 <fputc>:
    2d88:	0f 93       	push	r16
    2d8a:	1f 93       	push	r17
    2d8c:	cf 93       	push	r28
    2d8e:	df 93       	push	r29
    2d90:	18 2f       	mov	r17, r24
    2d92:	09 2f       	mov	r16, r25
    2d94:	eb 01       	movw	r28, r22
    2d96:	8b 81       	ldd	r24, Y+3	; 0x03
    2d98:	81 fd       	sbrc	r24, 1
    2d9a:	09 c0       	rjmp	.+18     	; 0x2dae <fputc+0x26>
    2d9c:	1f ef       	ldi	r17, 0xFF	; 255
    2d9e:	0f ef       	ldi	r16, 0xFF	; 255
    2da0:	81 2f       	mov	r24, r17
    2da2:	90 2f       	mov	r25, r16
    2da4:	df 91       	pop	r29
    2da6:	cf 91       	pop	r28
    2da8:	1f 91       	pop	r17
    2daa:	0f 91       	pop	r16
    2dac:	08 95       	ret
    2dae:	82 ff       	sbrs	r24, 2
    2db0:	14 c0       	rjmp	.+40     	; 0x2dda <fputc+0x52>
    2db2:	2e 81       	ldd	r18, Y+6	; 0x06
    2db4:	3f 81       	ldd	r19, Y+7	; 0x07
    2db6:	8c 81       	ldd	r24, Y+4	; 0x04
    2db8:	9d 81       	ldd	r25, Y+5	; 0x05
    2dba:	28 17       	cp	r18, r24
    2dbc:	39 07       	cpc	r19, r25
    2dbe:	3c f4       	brge	.+14     	; 0x2dce <fputc+0x46>
    2dc0:	e8 81       	ld	r30, Y
    2dc2:	f9 81       	ldd	r31, Y+1	; 0x01
    2dc4:	cf 01       	movw	r24, r30
    2dc6:	01 96       	adiw	r24, 0x01	; 1
    2dc8:	99 83       	std	Y+1, r25	; 0x01
    2dca:	88 83       	st	Y, r24
    2dcc:	10 83       	st	Z, r17
    2dce:	8e 81       	ldd	r24, Y+6	; 0x06
    2dd0:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd2:	01 96       	adiw	r24, 0x01	; 1
    2dd4:	9f 83       	std	Y+7, r25	; 0x07
    2dd6:	8e 83       	std	Y+6, r24	; 0x06
    2dd8:	e3 cf       	rjmp	.-58     	; 0x2da0 <fputc+0x18>
    2dda:	e8 85       	ldd	r30, Y+8	; 0x08
    2ddc:	f9 85       	ldd	r31, Y+9	; 0x09
    2dde:	81 2f       	mov	r24, r17
    2de0:	09 95       	icall
    2de2:	89 2b       	or	r24, r25
    2de4:	a1 f3       	breq	.-24     	; 0x2dce <fputc+0x46>
    2de6:	da cf       	rjmp	.-76     	; 0x2d9c <fputc+0x14>

00002de8 <__ultoa_invert>:
    2de8:	fa 01       	movw	r30, r20
    2dea:	aa 27       	eor	r26, r26
    2dec:	28 30       	cpi	r18, 0x08	; 8
    2dee:	51 f1       	breq	.+84     	; 0x2e44 <__ultoa_invert+0x5c>
    2df0:	20 31       	cpi	r18, 0x10	; 16
    2df2:	81 f1       	breq	.+96     	; 0x2e54 <__ultoa_invert+0x6c>
    2df4:	e8 94       	clt
    2df6:	6f 93       	push	r22
    2df8:	6e 7f       	andi	r22, 0xFE	; 254
    2dfa:	6e 5f       	subi	r22, 0xFE	; 254
    2dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfe:	8f 4f       	sbci	r24, 0xFF	; 255
    2e00:	9f 4f       	sbci	r25, 0xFF	; 255
    2e02:	af 4f       	sbci	r26, 0xFF	; 255
    2e04:	b1 e0       	ldi	r27, 0x01	; 1
    2e06:	3e d0       	rcall	.+124    	; 0x2e84 <__ultoa_invert+0x9c>
    2e08:	b4 e0       	ldi	r27, 0x04	; 4
    2e0a:	3c d0       	rcall	.+120    	; 0x2e84 <__ultoa_invert+0x9c>
    2e0c:	67 0f       	add	r22, r23
    2e0e:	78 1f       	adc	r23, r24
    2e10:	89 1f       	adc	r24, r25
    2e12:	9a 1f       	adc	r25, r26
    2e14:	a1 1d       	adc	r26, r1
    2e16:	68 0f       	add	r22, r24
    2e18:	79 1f       	adc	r23, r25
    2e1a:	8a 1f       	adc	r24, r26
    2e1c:	91 1d       	adc	r25, r1
    2e1e:	a1 1d       	adc	r26, r1
    2e20:	6a 0f       	add	r22, r26
    2e22:	71 1d       	adc	r23, r1
    2e24:	81 1d       	adc	r24, r1
    2e26:	91 1d       	adc	r25, r1
    2e28:	a1 1d       	adc	r26, r1
    2e2a:	20 d0       	rcall	.+64     	; 0x2e6c <__ultoa_invert+0x84>
    2e2c:	09 f4       	brne	.+2      	; 0x2e30 <__ultoa_invert+0x48>
    2e2e:	68 94       	set
    2e30:	3f 91       	pop	r19
    2e32:	2a e0       	ldi	r18, 0x0A	; 10
    2e34:	26 9f       	mul	r18, r22
    2e36:	11 24       	eor	r1, r1
    2e38:	30 19       	sub	r19, r0
    2e3a:	30 5d       	subi	r19, 0xD0	; 208
    2e3c:	31 93       	st	Z+, r19
    2e3e:	de f6       	brtc	.-74     	; 0x2df6 <__ultoa_invert+0xe>
    2e40:	cf 01       	movw	r24, r30
    2e42:	08 95       	ret
    2e44:	46 2f       	mov	r20, r22
    2e46:	47 70       	andi	r20, 0x07	; 7
    2e48:	40 5d       	subi	r20, 0xD0	; 208
    2e4a:	41 93       	st	Z+, r20
    2e4c:	b3 e0       	ldi	r27, 0x03	; 3
    2e4e:	0f d0       	rcall	.+30     	; 0x2e6e <__ultoa_invert+0x86>
    2e50:	c9 f7       	brne	.-14     	; 0x2e44 <__ultoa_invert+0x5c>
    2e52:	f6 cf       	rjmp	.-20     	; 0x2e40 <__ultoa_invert+0x58>
    2e54:	46 2f       	mov	r20, r22
    2e56:	4f 70       	andi	r20, 0x0F	; 15
    2e58:	40 5d       	subi	r20, 0xD0	; 208
    2e5a:	4a 33       	cpi	r20, 0x3A	; 58
    2e5c:	18 f0       	brcs	.+6      	; 0x2e64 <__ultoa_invert+0x7c>
    2e5e:	49 5d       	subi	r20, 0xD9	; 217
    2e60:	31 fd       	sbrc	r19, 1
    2e62:	40 52       	subi	r20, 0x20	; 32
    2e64:	41 93       	st	Z+, r20
    2e66:	02 d0       	rcall	.+4      	; 0x2e6c <__ultoa_invert+0x84>
    2e68:	a9 f7       	brne	.-22     	; 0x2e54 <__ultoa_invert+0x6c>
    2e6a:	ea cf       	rjmp	.-44     	; 0x2e40 <__ultoa_invert+0x58>
    2e6c:	b4 e0       	ldi	r27, 0x04	; 4
    2e6e:	a6 95       	lsr	r26
    2e70:	97 95       	ror	r25
    2e72:	87 95       	ror	r24
    2e74:	77 95       	ror	r23
    2e76:	67 95       	ror	r22
    2e78:	ba 95       	dec	r27
    2e7a:	c9 f7       	brne	.-14     	; 0x2e6e <__ultoa_invert+0x86>
    2e7c:	00 97       	sbiw	r24, 0x00	; 0
    2e7e:	61 05       	cpc	r22, r1
    2e80:	71 05       	cpc	r23, r1
    2e82:	08 95       	ret
    2e84:	9b 01       	movw	r18, r22
    2e86:	ac 01       	movw	r20, r24
    2e88:	0a 2e       	mov	r0, r26
    2e8a:	06 94       	lsr	r0
    2e8c:	57 95       	ror	r21
    2e8e:	47 95       	ror	r20
    2e90:	37 95       	ror	r19
    2e92:	27 95       	ror	r18
    2e94:	ba 95       	dec	r27
    2e96:	c9 f7       	brne	.-14     	; 0x2e8a <__ultoa_invert+0xa2>
    2e98:	62 0f       	add	r22, r18
    2e9a:	73 1f       	adc	r23, r19
    2e9c:	84 1f       	adc	r24, r20
    2e9e:	95 1f       	adc	r25, r21
    2ea0:	a0 1d       	adc	r26, r0
    2ea2:	08 95       	ret

00002ea4 <__prologue_saves__>:
    2ea4:	2f 92       	push	r2
    2ea6:	3f 92       	push	r3
    2ea8:	4f 92       	push	r4
    2eaa:	5f 92       	push	r5
    2eac:	6f 92       	push	r6
    2eae:	7f 92       	push	r7
    2eb0:	8f 92       	push	r8
    2eb2:	9f 92       	push	r9
    2eb4:	af 92       	push	r10
    2eb6:	bf 92       	push	r11
    2eb8:	cf 92       	push	r12
    2eba:	df 92       	push	r13
    2ebc:	ef 92       	push	r14
    2ebe:	ff 92       	push	r15
    2ec0:	0f 93       	push	r16
    2ec2:	1f 93       	push	r17
    2ec4:	cf 93       	push	r28
    2ec6:	df 93       	push	r29
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
    2ecc:	ca 1b       	sub	r28, r26
    2ece:	db 0b       	sbc	r29, r27
    2ed0:	0f b6       	in	r0, 0x3f	; 63
    2ed2:	f8 94       	cli
    2ed4:	de bf       	out	0x3e, r29	; 62
    2ed6:	0f be       	out	0x3f, r0	; 63
    2ed8:	cd bf       	out	0x3d, r28	; 61
    2eda:	09 94       	ijmp

00002edc <__epilogue_restores__>:
    2edc:	2a 88       	ldd	r2, Y+18	; 0x12
    2ede:	39 88       	ldd	r3, Y+17	; 0x11
    2ee0:	48 88       	ldd	r4, Y+16	; 0x10
    2ee2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ee4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ee6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ee8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2eea:	9b 84       	ldd	r9, Y+11	; 0x0b
    2eec:	aa 84       	ldd	r10, Y+10	; 0x0a
    2eee:	b9 84       	ldd	r11, Y+9	; 0x09
    2ef0:	c8 84       	ldd	r12, Y+8	; 0x08
    2ef2:	df 80       	ldd	r13, Y+7	; 0x07
    2ef4:	ee 80       	ldd	r14, Y+6	; 0x06
    2ef6:	fd 80       	ldd	r15, Y+5	; 0x05
    2ef8:	0c 81       	ldd	r16, Y+4	; 0x04
    2efa:	1b 81       	ldd	r17, Y+3	; 0x03
    2efc:	aa 81       	ldd	r26, Y+2	; 0x02
    2efe:	b9 81       	ldd	r27, Y+1	; 0x01
    2f00:	ce 0f       	add	r28, r30
    2f02:	d1 1d       	adc	r29, r1
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	cd bf       	out	0x3d, r28	; 61
    2f0e:	ed 01       	movw	r28, r26
    2f10:	08 95       	ret

00002f12 <_exit>:
    2f12:	f8 94       	cli

00002f14 <__stop_program>:
    2f14:	ff cf       	rjmp	.-2      	; 0x2f14 <__stop_program>
